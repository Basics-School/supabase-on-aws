// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Snapshot 1`] = `
Object {
  "Mappings": Object {
    "ServiceprincipalMap": Object {
      "af-south-1": Object {
        "states": "states.af-south-1.amazonaws.com",
      },
      "ap-east-1": Object {
        "states": "states.ap-east-1.amazonaws.com",
      },
      "ap-northeast-1": Object {
        "states": "states.ap-northeast-1.amazonaws.com",
      },
      "ap-northeast-2": Object {
        "states": "states.ap-northeast-2.amazonaws.com",
      },
      "ap-northeast-3": Object {
        "states": "states.ap-northeast-3.amazonaws.com",
      },
      "ap-south-1": Object {
        "states": "states.ap-south-1.amazonaws.com",
      },
      "ap-southeast-1": Object {
        "states": "states.ap-southeast-1.amazonaws.com",
      },
      "ap-southeast-2": Object {
        "states": "states.ap-southeast-2.amazonaws.com",
      },
      "ap-southeast-3": Object {
        "states": "states.ap-southeast-3.amazonaws.com",
      },
      "ca-central-1": Object {
        "states": "states.ca-central-1.amazonaws.com",
      },
      "cn-north-1": Object {
        "states": "states.cn-north-1.amazonaws.com",
      },
      "cn-northwest-1": Object {
        "states": "states.cn-northwest-1.amazonaws.com",
      },
      "eu-central-1": Object {
        "states": "states.eu-central-1.amazonaws.com",
      },
      "eu-north-1": Object {
        "states": "states.eu-north-1.amazonaws.com",
      },
      "eu-south-1": Object {
        "states": "states.eu-south-1.amazonaws.com",
      },
      "eu-south-2": Object {
        "states": "states.eu-south-2.amazonaws.com",
      },
      "eu-west-1": Object {
        "states": "states.eu-west-1.amazonaws.com",
      },
      "eu-west-2": Object {
        "states": "states.eu-west-2.amazonaws.com",
      },
      "eu-west-3": Object {
        "states": "states.eu-west-3.amazonaws.com",
      },
      "me-south-1": Object {
        "states": "states.me-south-1.amazonaws.com",
      },
      "sa-east-1": Object {
        "states": "states.sa-east-1.amazonaws.com",
      },
      "us-east-1": Object {
        "states": "states.us-east-1.amazonaws.com",
      },
      "us-east-2": Object {
        "states": "states.us-east-2.amazonaws.com",
      },
      "us-gov-east-1": Object {
        "states": "states.us-gov-east-1.amazonaws.com",
      },
      "us-gov-west-1": Object {
        "states": "states.us-gov-west-1.amazonaws.com",
      },
      "us-iso-east-1": Object {
        "states": "states.amazonaws.com",
      },
      "us-iso-west-1": Object {
        "states": "states.amazonaws.com",
      },
      "us-isob-east-1": Object {
        "states": "states.amazonaws.com",
      },
      "us-west-1": Object {
        "states": "states.us-west-1.amazonaws.com",
      },
      "us-west-2": Object {
        "states": "states.us-west-2.amazonaws.com",
      },
    },
  },
  "Outputs": Object {
    "KongSvcLoadBalancerDNS7AB8D78E": Object {
      "Value": Object {
        "Fn::GetAtt": Array [
          "KongSvcLBD22BD9AD",
          "DNSName",
        ],
      },
    },
    "StudioSvcLoadBalancerDNS4F23D7E8": Object {
      "Value": Object {
        "Fn::GetAtt": Array [
          "StudioSvcLBC1B49D6D",
          "DNSName",
        ],
      },
    },
    "StudioSvcServiceURLF12C5377": Object {
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "http://",
            Object {
              "Fn::GetAtt": Array [
                "StudioSvcLBC1B49D6D",
                "DNSName",
              ],
            },
          ],
        ],
      },
    },
    "StudioUrl": Object {
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "https://",
            Object {
              "Fn::GetAtt": Array [
                "StudioCDN8AB0BD38",
                "DomainName",
              ],
            },
          ],
        ],
      },
    },
  },
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "AuthSvcCloudmapService85C22E54": Object {
      "Properties": Object {
        "DnsConfig": Object {
          "DnsRecords": Array [
            Object {
              "TTL": 10,
              "Type": "A",
            },
          ],
          "NamespaceId": Object {
            "Fn::GetAtt": Array [
              "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
              "Id",
            ],
          },
          "RoutingPolicy": "MULTIVALUE",
        },
        "HealthCheckCustomConfig": Object {
          "FailureThreshold": 1,
        },
        "Name": "auth",
        "NamespaceId": Object {
          "Fn::GetAtt": Array [
            "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
            "Id",
          ],
        },
      },
      "Type": "AWS::ServiceDiscovery::Service",
    },
    "AuthSvcSecurityGroup71415F29": Object {
      "Properties": Object {
        "GroupDescription": "test/Auth/Svc/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "AuthSvcSecurityGroupfromtestKongSvcServiceSecurityGroupD2D88BD7999923CBA018": Object {
      "Properties": Object {
        "Description": "from testKongSvcServiceSecurityGroupD2D88BD7:9999",
        "FromPort": 9999,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "AuthSvcSecurityGroup71415F29",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "KongSvcServiceSecurityGroup5EF39425",
            "GroupId",
          ],
        },
        "ToPort": 9999,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "AuthSvcServiceDAF53F1D": Object {
      "Properties": Object {
        "CapacityProviderStrategy": Array [
          Object {
            "Base": 1,
            "CapacityProvider": "FARGATE",
            "Weight": 1,
          },
          Object {
            "Base": 0,
            "CapacityProvider": "FARGATE_SPOT",
            "Weight": 0,
          },
        ],
        "Cluster": Object {
          "Ref": "ClusterEB0386A7",
        },
        "DeploymentConfiguration": Object {
          "DeploymentCircuitBreaker": Object {
            "Enable": true,
            "Rollback": true,
          },
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "DeploymentController": Object {
          "Type": "ECS",
        },
        "EnableECSManagedTags": false,
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "AuthSvcSecurityGroup71415F29",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Array [
              Object {
                "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
              },
              Object {
                "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
              },
            ],
          },
        },
        "ServiceRegistries": Array [
          Object {
            "RegistryArn": Object {
              "Fn::GetAtt": Array [
                "AuthSvcCloudmapService85C22E54",
                "Arn",
              ],
            },
          },
        ],
        "TaskDefinition": Object {
          "Ref": "AuthTaskDefinitionDBEE261E",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "AuthTaskDefinitionDBEE261E": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "DependsOn": Array [
              Object {
                "Condition": "HEALTHY",
                "ContainerName": "envoy",
              },
            ],
            "Environment": Array [
              Object {
                "Name": "GOTRUE_API_HOST",
                "Value": "0.0.0.0",
              },
              Object {
                "Name": "GOTRUE_API_PORT",
                "Value": "9999",
              },
              Object {
                "Name": "API_EXTERNAL_URL",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "https://",
                      Object {
                        "Fn::GetAtt": Array [
                          "CDN2330F4C0",
                          "DomainName",
                        ],
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_DB_DRIVER",
                "Value": "postgres",
              },
              Object {
                "Name": "GOTRUE_SITE_URL",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "http://",
                      Object {
                        "Fn::GetAtt": Array [
                          "KongSvcLBD22BD9AD",
                          "DNSName",
                        ],
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_URI_ALLOW_LIST",
                "Value": "",
              },
              Object {
                "Name": "GOTRUE_DISABLE_SIGNUP",
                "Value": "false",
              },
              Object {
                "Name": "GOTRUE_JWT_ADMIN_ROLES",
                "Value": "service_role",
              },
              Object {
                "Name": "GOTRUE_JWT_AUD",
                "Value": "authenticated",
              },
              Object {
                "Name": "GOTRUE_JWT_DEFAULT_GROUP_NAME",
                "Value": "authenticated",
              },
              Object {
                "Name": "GOTRUE_JWT_EXP",
                "Value": "3600",
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_EMAIL_ENABLED",
                "Value": "true",
              },
              Object {
                "Name": "GOTRUE_MAILER_AUTOCONFIRM",
                "Value": "false",
              },
              Object {
                "Name": "GOTRUE_SMTP_SENDER_NAME",
                "Value": "Supabase",
              },
              Object {
                "Name": "GOTRUE_MAILER_URLPATHS_INVITE",
                "Value": "/auth/v1/verify",
              },
              Object {
                "Name": "GOTRUE_MAILER_URLPATHS_CONFIRMATION",
                "Value": "/auth/v1/verify",
              },
              Object {
                "Name": "GOTRUE_MAILER_URLPATHS_RECOVERY",
                "Value": "/auth/v1/verify",
              },
              Object {
                "Name": "GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE",
                "Value": "/auth/v1/verify",
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_PHONE_ENABLED",
                "Value": "true",
              },
              Object {
                "Name": "GOTRUE_SMS_AUTOCONFIRM",
                "Value": "true",
              },
            ],
            "Essential": true,
            "Image": "supabase/gotrue:v2.9.2",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "AuthTaskDefinitionappLogGroup30C81075",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "Name": "app",
            "PortMappings": Array [
              Object {
                "ContainerPort": 9999,
                "Protocol": "tcp",
              },
            ],
            "Secrets": Array [
              Object {
                "Name": "GOTRUE_DB_DATABASE_URL",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DBSecretAttachment1CF7DE47",
                      },
                      ":url_auth::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_JWT_SECRET",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "SupabaseJwtSecret4CEDF760",
                      },
                      ":jwt_secret::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_SMTP_ADMIN_EMAIL",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "SupabaseMailSecret777E0288",
                      },
                      ":email::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_SMTP_HOST",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "SupabaseMailSecret777E0288",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_SMTP_PORT",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "SupabaseMailSecret777E0288",
                      },
                      ":port::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_SMTP_USER",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "SupabaseMailSecret777E0288",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_SMTP_PASS",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "SupabaseMailSecret777E0288",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
            "Ulimits": Array [
              Object {
                "HardLimit": 65536,
                "Name": "nofile",
                "SoftLimit": 65536,
              },
            ],
          },
          Object {
            "Cpu": 80,
            "Environment": Array [
              Object {
                "Name": "APPMESH_VIRTUAL_NODE_NAME",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "mesh/",
                      Object {
                        "Fn::GetAtt": Array [
                          "Mesh73A573F6",
                          "MeshName",
                        ],
                      },
                      "/virtualNode/",
                      Object {
                        "Fn::GetAtt": Array [
                          "AuthVirtualNode4480F984",
                          "VirtualNodeName",
                        ],
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "ENVOY_ADMIN_ACCESS_LOG_FILE",
                "Value": "/dev/null",
              },
              Object {
                "Name": "ENABLE_ENVOY_XRAY_TRACING",
                "Value": "1",
              },
              Object {
                "Name": "XRAY_SAMPLING_RATE",
                "Value": "1.00",
              },
            ],
            "Essential": true,
            "HealthCheck": Object {
              "Command": Array [
                "CMD-SHELL",
                "curl -s http://localhost:9901/server_info | grep state | grep -q LIVE",
              ],
              "Interval": 5,
              "Retries": 3,
              "StartPeriod": 10,
              "Timeout": 2,
            },
            "Image": "public.ecr.aws/appmesh/aws-appmesh-envoy:v1.22.2.0-prod",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "AuthTaskDefinitionenvoyLogGroup220A606F",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "MemoryReservation": 128,
            "Name": "envoy",
            "Ulimits": Array [
              Object {
                "HardLimit": 1024000,
                "Name": "nofile",
                "SoftLimit": 1024000,
              },
            ],
            "User": "1337",
          },
          Object {
            "Cpu": 16,
            "Essential": true,
            "Image": "public.ecr.aws/xray/aws-xray-daemon:latest",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "AuthTaskDefinitionxraydaemonLogGroupEA589E9E",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "MemoryReservation": 64,
            "Name": "xray-daemon",
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "AuthTaskDefinitionExecutionRole8B68B008",
            "Arn",
          ],
        },
        "Family": "testAuthTaskDefinitionEC6C0853",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "ProxyConfiguration": Object {
          "ContainerName": "envoy",
          "ProxyConfigurationProperties": Array [
            Object {
              "Name": "IgnoredUID",
              "Value": "1337",
            },
            Object {
              "Name": "IgnoredGID",
              "Value": "1338",
            },
            Object {
              "Name": "AppPorts",
              "Value": "9999",
            },
            Object {
              "Name": "ProxyIngressPort",
              "Value": "15000",
            },
            Object {
              "Name": "ProxyEgressPort",
              "Value": "15001",
            },
            Object {
              "Name": "EgressIgnoredIPs",
              "Value": "169.254.170.2,169.254.169.254",
            },
          ],
          "Type": "APPMESH",
        },
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "RuntimePlatform": Object {
          "CpuArchitecture": "ARM64",
        },
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "AuthTaskDefinitionTaskRole0174181B",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "AuthTaskDefinitionExecutionRole8B68B008": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "AuthTaskDefinitionExecutionRoleDefaultPolicy2A4B4627": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "AuthTaskDefinitionappLogGroup30C81075",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "DBSecretAttachment1CF7DE47",
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "SupabaseJwtSecret4CEDF760",
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "SupabaseMailSecret777E0288",
              },
            },
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "AuthTaskDefinitionenvoyLogGroup220A606F",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "AuthTaskDefinitionxraydaemonLogGroupEA589E9E",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "AuthTaskDefinitionExecutionRoleDefaultPolicy2A4B4627",
        "Roles": Array [
          Object {
            "Ref": "AuthTaskDefinitionExecutionRole8B68B008",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "AuthTaskDefinitionTaskRole0174181B": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          "arn:aws:iam::aws:policy/AWSAppMeshEnvoyAccess",
          "arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess",
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "AuthTaskDefinitionappLogGroup30C81075": Object {
      "DeletionPolicy": "Retain",
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "AuthTaskDefinitionenvoyLogGroup220A606F": Object {
      "DeletionPolicy": "Retain",
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "AuthTaskDefinitionxraydaemonLogGroupEA589E9E": Object {
      "DeletionPolicy": "Retain",
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "AuthVirtualNode4480F984": Object {
      "Properties": Object {
        "MeshName": Object {
          "Fn::GetAtt": Array [
            "Mesh73A573F6",
            "MeshName",
          ],
        },
        "Spec": Object {
          "Backends": Array [
            Object {
              "VirtualService": Object {
                "VirtualServiceName": "rest.supabase.local",
              },
            },
            Object {
              "VirtualService": Object {
                "VirtualServiceName": Object {
                  "Fn::GetAtt": Array [
                    "DB4924F778",
                    "Endpoint.Address",
                  ],
                },
              },
            },
          ],
          "Listeners": Array [
            Object {
              "PortMapping": Object {
                "Port": 9999,
                "Protocol": "http",
              },
            },
          ],
          "Logging": Object {
            "AccessLog": Object {
              "File": Object {
                "Path": "/dev/stdout",
              },
            },
          },
          "ServiceDiscovery": Object {
            "AWSCloudMap": Object {
              "NamespaceName": "supabase.local",
              "ServiceName": Object {
                "Fn::GetAtt": Array [
                  "AuthSvcCloudmapService85C22E54",
                  "Name",
                ],
              },
            },
          },
        },
        "VirtualNodeName": "Auth",
      },
      "Type": "AWS::AppMesh::VirtualNode",
    },
    "AuthVirtualService6B0561FE": Object {
      "Properties": Object {
        "MeshName": Object {
          "Fn::GetAtt": Array [
            "Mesh73A573F6",
            "MeshName",
          ],
        },
        "Spec": Object {
          "Provider": Object {
            "VirtualNode": Object {
              "VirtualNodeName": Object {
                "Fn::GetAtt": Array [
                  "AuthVirtualNode4480F984",
                  "VirtualNodeName",
                ],
              },
            },
          },
        },
        "VirtualServiceName": "auth.supabase.local",
      },
      "Type": "AWS::AppMesh::VirtualService",
    },
    "Bucket83908E77": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "CDN2330F4C0": Object {
      "Properties": Object {
        "DistributionConfig": Object {
          "CacheBehaviors": Array [
            Object {
              "AllowedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
              "Compress": true,
              "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
              "PathPattern": "*.css",
              "TargetOriginId": "testCDNOrigin1D646FF0B",
              "ViewerProtocolPolicy": "redirect-to-https",
            },
            Object {
              "AllowedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
              "Compress": true,
              "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
              "PathPattern": "*.png",
              "TargetOriginId": "testCDNOrigin1D646FF0B",
              "ViewerProtocolPolicy": "redirect-to-https",
            },
            Object {
              "AllowedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
              "Compress": true,
              "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
              "PathPattern": "*.svg",
              "TargetOriginId": "testCDNOrigin1D646FF0B",
              "ViewerProtocolPolicy": "redirect-to-https",
            },
            Object {
              "AllowedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
              "Compress": true,
              "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
              "PathPattern": "*.woff",
              "TargetOriginId": "testCDNOrigin1D646FF0B",
              "ViewerProtocolPolicy": "redirect-to-https",
            },
            Object {
              "AllowedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
              "Compress": true,
              "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
              "PathPattern": "*.woff2",
              "TargetOriginId": "testCDNOrigin1D646FF0B",
              "ViewerProtocolPolicy": "redirect-to-https",
            },
            Object {
              "AllowedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
              "Compress": true,
              "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
              "PathPattern": "*.js",
              "TargetOriginId": "testCDNOrigin1D646FF0B",
              "ViewerProtocolPolicy": "redirect-to-https",
            },
          ],
          "Comment": "Supabase - CDN",
          "CustomErrorResponses": Array [
            Object {
              "ErrorCachingMinTTL": 10,
              "ErrorCode": 400,
            },
            Object {
              "ErrorCachingMinTTL": 10,
              "ErrorCode": 500,
            },
          ],
          "DefaultCacheBehavior": Object {
            "AllowedMethods": Array [
              "GET",
              "HEAD",
              "OPTIONS",
              "PUT",
              "PATCH",
              "POST",
              "DELETE",
            ],
            "CachePolicyId": "4135ea2d-6df8-44a3-9df3-4b5a84be39ad",
            "Compress": true,
            "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
            "TargetOriginId": "testCDNOrigin1D646FF0B",
            "ViewerProtocolPolicy": "redirect-to-https",
          },
          "Enabled": true,
          "HttpVersion": "http2",
          "IPV6Enabled": true,
          "Origins": Array [
            Object {
              "CustomOriginConfig": Object {
                "OriginProtocolPolicy": "http-only",
                "OriginSSLProtocols": Array [
                  "TLSv1.2",
                ],
              },
              "DomainName": Object {
                "Fn::GetAtt": Array [
                  "KongSvcLBD22BD9AD",
                  "DNSName",
                ],
              },
              "Id": "testCDNOrigin1D646FF0B",
            },
          ],
        },
      },
      "Type": "AWS::CloudFront::Distribution",
    },
    "Cluster3DA9CCBA": Object {
      "Properties": Object {
        "CapacityProviders": Array [
          "FARGATE",
          "FARGATE_SPOT",
        ],
        "Cluster": Object {
          "Ref": "ClusterEB0386A7",
        },
        "DefaultCapacityProviderStrategy": Array [],
      },
      "Type": "AWS::ECS::ClusterCapacityProviderAssociations",
    },
    "ClusterDefaultServiceDiscoveryNamespaceC336F9B4": Object {
      "Properties": Object {
        "Name": "supabase.local",
        "Vpc": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::ServiceDiscovery::PrivateDnsNamespace",
    },
    "ClusterEB0386A7": Object {
      "Type": "AWS::ECS::Cluster",
    },
    "DB4924F778": Object {
      "DeletionPolicy": "Snapshot",
      "Properties": Object {
        "CopyTagsToSnapshot": true,
        "DBClusterParameterGroupName": Object {
          "Ref": "ParameterGroup5E32DECB",
        },
        "DBSubnetGroupName": Object {
          "Ref": "DBSubnets7B70DA43",
        },
        "DatabaseName": "postgres",
        "Engine": "aurora-postgresql",
        "EngineVersion": "14.3",
        "MasterUserPassword": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{{resolve:secretsmanager:",
              Object {
                "Ref": "DBSecretB8D1B379",
              },
              ":SecretString:password::}}",
            ],
          ],
        },
        "MasterUsername": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{{resolve:secretsmanager:",
              Object {
                "Ref": "DBSecretB8D1B379",
              },
              ":SecretString:username::}}",
            ],
          ],
        },
        "Port": 5432,
        "StorageEncrypted": true,
        "VpcSecurityGroupIds": Array [
          Object {
            "Fn::GetAtt": Array [
              "DBSecurityGroup302CDD63",
              "GroupId",
            ],
          },
        ],
      },
      "Type": "AWS::RDS::DBCluster",
      "UpdateReplacePolicy": "Snapshot",
    },
    "DBInitC726DE70": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "SecretId": Object {
          "Ref": "DBSecretAttachment1CF7DE47",
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "DBInitProviderframeworkonEvent24F1BF69",
            "Arn",
          ],
        },
        "Version": "4",
      },
      "Type": "Custom::SupabaseDatabaseInit",
      "UpdateReplacePolicy": "Delete",
    },
    "DBInitFunctionDFB79729": Object {
      "DependsOn": Array [
        "DBInitFunctionServiceRoleDefaultPolicy68AC8C37",
        "DBInitFunctionServiceRole0DD3B954",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "be7e267f8222c81cbaf4fae111fb1a83629da064558fcc481290fc653f4561ea.zip",
        },
        "Description": "Supabase - Database init function",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "DBInitFunctionServiceRole0DD3B954",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
        "Timeout": 60,
        "VpcConfig": Object {
          "SecurityGroupIds": Array [
            Object {
              "Fn::GetAtt": Array [
                "DBInitFunctionSecurityGroup040C3895",
                "GroupId",
              ],
            },
          ],
          "SubnetIds": Array [
            Object {
              "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
            },
            Object {
              "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "DBInitFunctionSecurityGroup040C3895": Object {
      "Properties": Object {
        "GroupDescription": "Automatic security group for Lambda Function testDBInitFunction7716A06F",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "DBInitFunctionServiceRole0DD3B954": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "DBInitFunctionServiceRoleDefaultPolicy68AC8C37": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "DBSecretAttachment1CF7DE47",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "DBInitFunctionServiceRoleDefaultPolicy68AC8C37",
        "Roles": Array [
          Object {
            "Ref": "DBInitFunctionServiceRole0DD3B954",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "DBInitProviderframeworkonEvent24F1BF69": Object {
      "DependsOn": Array [
        "DBInitProviderframeworkonEventServiceRoleDefaultPolicy40DF7B7A",
        "DBInitProviderframeworkonEventServiceRole0A865FA6",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "e7c95e1a12d903d913ebdd526c735f1ac58b2024882a5562110221fe685ebe85.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (test/DB/InitProvider)",
        "Environment": Object {
          "Variables": Object {
            "USER_ON_EVENT_FUNCTION_ARN": Object {
              "Fn::GetAtt": Array [
                "DBInitFunctionDFB79729",
                "Arn",
              ],
            },
          },
        },
        "Handler": "framework.onEvent",
        "Role": Object {
          "Fn::GetAtt": Array [
            "DBInitProviderframeworkonEventServiceRole0A865FA6",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "DBInitProviderframeworkonEventServiceRole0A865FA6": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "DBInitProviderframeworkonEventServiceRoleDefaultPolicy40DF7B7A": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "DBInitFunctionDFB79729",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "DBInitFunctionDFB79729",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "DBInitProviderframeworkonEventServiceRoleDefaultPolicy40DF7B7A",
        "Roles": Array [
          Object {
            "Ref": "DBInitProviderframeworkonEventServiceRole0A865FA6",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "DBInstance17EB9EC72": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "VPCPrivateSubnet1DefaultRouteAE1D6490",
        "VPCPrivateSubnet2DefaultRouteF4F5CFD2",
      ],
      "Properties": Object {
        "DBClusterIdentifier": Object {
          "Ref": "DB4924F778",
        },
        "DBInstanceClass": "db.t4g.medium",
        "DBSubnetGroupName": Object {
          "Ref": "DBSubnets7B70DA43",
        },
        "Engine": "aurora-postgresql",
        "EngineVersion": "14.3",
      },
      "Type": "AWS::RDS::DBInstance",
      "UpdateReplacePolicy": "Delete",
    },
    "DBSecretAttachment1CF7DE47": Object {
      "Properties": Object {
        "SecretId": Object {
          "Ref": "DBSecretB8D1B379",
        },
        "TargetId": Object {
          "Ref": "DB4924F778",
        },
        "TargetType": "AWS::RDS::DBCluster",
      },
      "Type": "AWS::SecretsManager::SecretTargetAttachment",
    },
    "DBSecretB8D1B379": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "Description": Object {
          "Fn::Join": Array [
            "",
            Array [
              "Generated by the CDK for stack: ",
              Object {
                "Ref": "AWS::StackName",
              },
            ],
          ],
        },
        "GenerateSecretString": Object {
          "ExcludeCharacters": " %+~\`#$&*()|[]{}:;<>?!'/@\\"\\\\",
          "GenerateStringKey": "password",
          "PasswordLength": 30,
          "SecretStringTemplate": "{\\"username\\":\\"postgres\\"}",
        },
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "DBSecurityGroup302CDD63": Object {
      "Properties": Object {
        "GroupDescription": "RDS security group",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "DBSecurityGroupfromtestAuthSvcSecurityGroup6D8B81F6IndirectPort6C9BC415": Object {
      "Properties": Object {
        "Description": "from testAuthSvcSecurityGroup6D8B81F6:{IndirectPort}",
        "FromPort": Object {
          "Fn::GetAtt": Array [
            "DB4924F778",
            "Endpoint.Port",
          ],
        },
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "DBSecurityGroup302CDD63",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "AuthSvcSecurityGroup71415F29",
            "GroupId",
          ],
        },
        "ToPort": Object {
          "Fn::GetAtt": Array [
            "DB4924F778",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "DBSecurityGroupfromtestDBInitFunctionSecurityGroup544E1509IndirectPort5EFF6EC2": Object {
      "Properties": Object {
        "Description": "from testDBInitFunctionSecurityGroup544E1509:{IndirectPort}",
        "FromPort": Object {
          "Fn::GetAtt": Array [
            "DB4924F778",
            "Endpoint.Port",
          ],
        },
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "DBSecurityGroup302CDD63",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "DBInitFunctionSecurityGroup040C3895",
            "GroupId",
          ],
        },
        "ToPort": Object {
          "Fn::GetAtt": Array [
            "DB4924F778",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "DBSecurityGroupfromtestMetaSvcSecurityGroup082FBFC3IndirectPort87923156": Object {
      "Properties": Object {
        "Description": "from testMetaSvcSecurityGroup082FBFC3:{IndirectPort}",
        "FromPort": Object {
          "Fn::GetAtt": Array [
            "DB4924F778",
            "Endpoint.Port",
          ],
        },
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "DBSecurityGroup302CDD63",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "MetaSvcSecurityGroup28D90BB4",
            "GroupId",
          ],
        },
        "ToPort": Object {
          "Fn::GetAtt": Array [
            "DB4924F778",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "DBSecurityGroupfromtestRealtimeSvcSecurityGroupC45E6168IndirectPort165E7F6F": Object {
      "Properties": Object {
        "Description": "from testRealtimeSvcSecurityGroupC45E6168:{IndirectPort}",
        "FromPort": Object {
          "Fn::GetAtt": Array [
            "DB4924F778",
            "Endpoint.Port",
          ],
        },
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "DBSecurityGroup302CDD63",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "RealtimeSvcSecurityGroup15A1991B",
            "GroupId",
          ],
        },
        "ToPort": Object {
          "Fn::GetAtt": Array [
            "DB4924F778",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "DBSecurityGroupfromtestRestSvcSecurityGroupB54CAFDCIndirectPort3ED4CE56": Object {
      "Properties": Object {
        "Description": "from testRestSvcSecurityGroupB54CAFDC:{IndirectPort}",
        "FromPort": Object {
          "Fn::GetAtt": Array [
            "DB4924F778",
            "Endpoint.Port",
          ],
        },
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "DBSecurityGroup302CDD63",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "RestSvcSecurityGroup4F37982C",
            "GroupId",
          ],
        },
        "ToPort": Object {
          "Fn::GetAtt": Array [
            "DB4924F778",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "DBSecurityGroupfromtestStorageSvcSecurityGroupECDB89FCIndirectPort8D3B2881": Object {
      "Properties": Object {
        "Description": "from testStorageSvcSecurityGroupECDB89FC:{IndirectPort}",
        "FromPort": Object {
          "Fn::GetAtt": Array [
            "DB4924F778",
            "Endpoint.Port",
          ],
        },
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "DBSecurityGroup302CDD63",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "StorageSvcSecurityGroup134E6883",
            "GroupId",
          ],
        },
        "ToPort": Object {
          "Fn::GetAtt": Array [
            "DB4924F778",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "DBSubnets7B70DA43": Object {
      "Properties": Object {
        "DBSubnetGroupDescription": "Subnets for DB database",
        "SubnetIds": Array [
          Object {
            "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
          },
          Object {
            "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
          },
        ],
      },
      "Type": "AWS::RDS::DBSubnetGroup",
    },
    "DBURLF56CE3E5": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "SecretId": Object {
          "Ref": "DBSecretAttachment1CF7DE47",
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "DBUrlProviderframeworkonEvent083A4FCA",
            "Arn",
          ],
        },
      },
      "Type": "Custom::SupabaseDatabaseUrl",
      "UpdateReplacePolicy": "Delete",
    },
    "DBUrlGeneratorFunctionFCD48DEF": Object {
      "DependsOn": Array [
        "DBUrlGeneratorFunctionServiceRoleDefaultPolicyA52CC778",
        "DBUrlGeneratorFunctionServiceRole1A36EAC8",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "fa5329d9302be2afb3c5a7c609acd80d541c87faf6d1c16f88af0cde95fba2a8.zip",
        },
        "Description": "Supabase - Database URL generator function",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "DBUrlGeneratorFunctionServiceRole1A36EAC8",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "DBUrlGeneratorFunctionServiceRole1A36EAC8": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "DBUrlGeneratorFunctionServiceRoleDefaultPolicyA52CC778": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "secretsmanager:PutSecretValue",
                "secretsmanager:UpdateSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "DBSecretAttachment1CF7DE47",
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "DBSecretAttachment1CF7DE47",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "DBUrlGeneratorFunctionServiceRoleDefaultPolicyA52CC778",
        "Roles": Array [
          Object {
            "Ref": "DBUrlGeneratorFunctionServiceRole1A36EAC8",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "DBUrlProviderframeworkonEvent083A4FCA": Object {
      "DependsOn": Array [
        "DBUrlProviderframeworkonEventServiceRoleDefaultPolicy69C0CE7E",
        "DBUrlProviderframeworkonEventServiceRole0BB99795",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "e7c95e1a12d903d913ebdd526c735f1ac58b2024882a5562110221fe685ebe85.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (test/DB/UrlProvider)",
        "Environment": Object {
          "Variables": Object {
            "USER_ON_EVENT_FUNCTION_ARN": Object {
              "Fn::GetAtt": Array [
                "DBUrlGeneratorFunctionFCD48DEF",
                "Arn",
              ],
            },
          },
        },
        "Handler": "framework.onEvent",
        "Role": Object {
          "Fn::GetAtt": Array [
            "DBUrlProviderframeworkonEventServiceRole0BB99795",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "DBUrlProviderframeworkonEventServiceRole0BB99795": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "DBUrlProviderframeworkonEventServiceRoleDefaultPolicy69C0CE7E": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "DBUrlGeneratorFunctionFCD48DEF",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "DBUrlGeneratorFunctionFCD48DEF",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "DBUrlProviderframeworkonEventServiceRoleDefaultPolicy69C0CE7E",
        "Roles": Array [
          Object {
            "Ref": "DBUrlProviderframeworkonEventServiceRole0BB99795",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "DBVirtualNode473618FF": Object {
      "Properties": Object {
        "MeshName": Object {
          "Fn::GetAtt": Array [
            "Mesh73A573F6",
            "MeshName",
          ],
        },
        "Spec": Object {
          "Listeners": Array [
            Object {
              "PortMapping": Object {
                "Port": Object {
                  "Fn::GetAtt": Array [
                    "DB4924F778",
                    "Endpoint.Port",
                  ],
                },
                "Protocol": "tcp",
              },
            },
          ],
          "ServiceDiscovery": Object {
            "DNS": Object {
              "Hostname": Object {
                "Fn::GetAtt": Array [
                  "DB4924F778",
                  "Endpoint.Address",
                ],
              },
              "ResponseType": "ENDPOINTS",
            },
          },
        },
        "VirtualNodeName": "testDBVirtualNode111D3C1D",
      },
      "Type": "AWS::AppMesh::VirtualNode",
    },
    "DBVirtualService39A7C323": Object {
      "Properties": Object {
        "MeshName": Object {
          "Fn::GetAtt": Array [
            "Mesh73A573F6",
            "MeshName",
          ],
        },
        "Spec": Object {
          "Provider": Object {
            "VirtualNode": Object {
              "VirtualNodeName": Object {
                "Fn::GetAtt": Array [
                  "DBVirtualNode473618FF",
                  "VirtualNodeName",
                ],
              },
            },
          },
        },
        "VirtualServiceName": Object {
          "Fn::GetAtt": Array [
            "DB4924F778",
            "Endpoint.Address",
          ],
        },
      },
      "Type": "AWS::AppMesh::VirtualService",
    },
    "KongSvcLBD22BD9AD": Object {
      "DependsOn": Array [
        "VPCPublicSubnet1DefaultRoute91CEF279",
        "VPCPublicSubnet2DefaultRouteB7481BBA",
      ],
      "Properties": Object {
        "LoadBalancerAttributes": Array [
          Object {
            "Key": "deletion_protection.enabled",
            "Value": "false",
          },
        ],
        "Scheme": "internet-facing",
        "Subnets": Array [
          Object {
            "Ref": "VPCPublicSubnet1SubnetB4246D30",
          },
          Object {
            "Ref": "VPCPublicSubnet2Subnet74179F39",
          },
        ],
        "Type": "network",
      },
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
    },
    "KongSvcLBPublicListener5B640FAA": Object {
      "Properties": Object {
        "DefaultActions": Array [
          Object {
            "TargetGroupArn": Object {
              "Ref": "KongSvcLBPublicListenerECSGroup64A6B988",
            },
            "Type": "forward",
          },
        ],
        "LoadBalancerArn": Object {
          "Ref": "KongSvcLBD22BD9AD",
        },
        "Port": 80,
        "Protocol": "TCP",
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "KongSvcLBPublicListenerECSGroup64A6B988": Object {
      "Properties": Object {
        "HealthCheckIntervalSeconds": 10,
        "HealthCheckPort": "8100",
        "Port": 80,
        "Protocol": "TCP",
        "TargetGroupAttributes": Array [
          Object {
            "Key": "deregistration_delay.timeout_seconds",
            "Value": "30",
          },
          Object {
            "Key": "preserve_client_ip.enabled",
            "Value": "true",
          },
        ],
        "TargetType": "ip",
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
    },
    "KongSvcServiceCAB2BB74": Object {
      "DependsOn": Array [
        "KongSvcLBPublicListenerECSGroup64A6B988",
        "KongSvcLBPublicListener5B640FAA",
      ],
      "Properties": Object {
        "CapacityProviderStrategy": Array [
          Object {
            "Base": 1,
            "CapacityProvider": "FARGATE",
            "Weight": 1,
          },
          Object {
            "Base": 0,
            "CapacityProvider": "FARGATE_SPOT",
            "Weight": 0,
          },
        ],
        "Cluster": Object {
          "Ref": "ClusterEB0386A7",
        },
        "DeploymentConfiguration": Object {
          "DeploymentCircuitBreaker": Object {
            "Enable": true,
            "Rollback": true,
          },
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "DeploymentController": Object {
          "Type": "ECS",
        },
        "EnableECSManagedTags": false,
        "HealthCheckGracePeriodSeconds": 10,
        "LoadBalancers": Array [
          Object {
            "ContainerName": "app",
            "ContainerPort": 8000,
            "TargetGroupArn": Object {
              "Ref": "KongSvcLBPublicListenerECSGroup64A6B988",
            },
          },
        ],
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "KongSvcServiceSecurityGroup5EF39425",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Array [
              Object {
                "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
              },
              Object {
                "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
              },
            ],
          },
        },
        "ServiceRegistries": Array [
          Object {
            "RegistryArn": Object {
              "Fn::GetAtt": Array [
                "KongSvcServiceCloudmapServiceA3BF260B",
                "Arn",
              ],
            },
          },
        ],
        "TaskDefinition": Object {
          "Ref": "KongTaskDefinitionAE44544D",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "KongSvcServiceCloudmapServiceA3BF260B": Object {
      "Properties": Object {
        "DnsConfig": Object {
          "DnsRecords": Array [
            Object {
              "TTL": 10,
              "Type": "A",
            },
          ],
          "NamespaceId": Object {
            "Fn::GetAtt": Array [
              "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
              "Id",
            ],
          },
          "RoutingPolicy": "MULTIVALUE",
        },
        "HealthCheckCustomConfig": Object {
          "FailureThreshold": 1,
        },
        "Name": "kong",
        "NamespaceId": Object {
          "Fn::GetAtt": Array [
            "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
            "Id",
          ],
        },
      },
      "Type": "AWS::ServiceDiscovery::Service",
    },
    "KongSvcServiceSecurityGroup5EF39425": Object {
      "Properties": Object {
        "GroupDescription": "test/Kong/Svc/Service/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": Object {
              "Fn::GetAtt": Array [
                "VPCB9E5F0B4",
                "CidrBlock",
              ],
            },
            "Description": "NLB healthcheck",
            "FromPort": 8100,
            "IpProtocol": "tcp",
            "ToPort": 8100,
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "KongSvcServiceSecurityGroupfrompl82a045eb8000E450E98F": Object {
      "Properties": Object {
        "Description": "CloudFront",
        "FromPort": 8000,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "KongSvcServiceSecurityGroup5EF39425",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourcePrefixListId": "pl-82a045eb",
        "ToPort": 8000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "KongTaskDefinitionAE44544D": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "DependsOn": Array [
              Object {
                "Condition": "HEALTHY",
                "ContainerName": "envoy",
              },
            ],
            "Environment": Array [
              Object {
                "Name": "KONG_DNS_ORDER",
                "Value": "LAST,A,CNAME",
              },
              Object {
                "Name": "KONG_PLUGINS",
                "Value": "request-transformer,cors,key-auth,acl",
              },
              Object {
                "Name": "KONG_STATUS_LISTEN",
                "Value": "0.0.0.0:8100",
              },
            ],
            "Essential": true,
            "HealthCheck": Object {
              "Command": Array [
                "CMD",
                "kong",
                "health",
              ],
              "Interval": 10,
              "Retries": 3,
              "Timeout": 10,
            },
            "Image": Object {
              "Fn::Sub": "\${AWS::AccountId}.dkr.ecr.\${AWS::Region}.\${AWS::URLSuffix}/cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}:4caf2cf98bd2ac54cac51cde120019576b434c9a3f41e40bc5cc4fb286c3314d",
            },
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "KongTaskDefinitionappLogGroup2AEC822E",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "Name": "app",
            "PortMappings": Array [
              Object {
                "ContainerPort": 8000,
                "Protocol": "tcp",
              },
              Object {
                "ContainerPort": 8100,
                "Protocol": "tcp",
              },
            ],
            "Secrets": Array [
              Object {
                "Name": "ANON_KEY",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "SupabaseJwtSecret4CEDF760",
                      },
                      ":anon_key::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "SERVICE_KEY",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "SupabaseJwtSecret4CEDF760",
                      },
                      ":service_role_key::",
                    ],
                  ],
                },
              },
            ],
            "Ulimits": Array [
              Object {
                "HardLimit": 65536,
                "Name": "nofile",
                "SoftLimit": 65536,
              },
            ],
          },
          Object {
            "Cpu": 80,
            "Environment": Array [
              Object {
                "Name": "APPMESH_VIRTUAL_NODE_NAME",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "mesh/",
                      Object {
                        "Fn::GetAtt": Array [
                          "Mesh73A573F6",
                          "MeshName",
                        ],
                      },
                      "/virtualNode/",
                      Object {
                        "Fn::GetAtt": Array [
                          "KongVirtualNodeFABCC391",
                          "VirtualNodeName",
                        ],
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "ENVOY_ADMIN_ACCESS_LOG_FILE",
                "Value": "/dev/null",
              },
              Object {
                "Name": "ENABLE_ENVOY_XRAY_TRACING",
                "Value": "1",
              },
              Object {
                "Name": "XRAY_SAMPLING_RATE",
                "Value": "1.00",
              },
            ],
            "Essential": true,
            "HealthCheck": Object {
              "Command": Array [
                "CMD-SHELL",
                "curl -s http://localhost:9901/server_info | grep state | grep -q LIVE",
              ],
              "Interval": 5,
              "Retries": 3,
              "StartPeriod": 10,
              "Timeout": 2,
            },
            "Image": "public.ecr.aws/appmesh/aws-appmesh-envoy:v1.22.2.0-prod",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "KongTaskDefinitionenvoyLogGroupD501650D",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "MemoryReservation": 128,
            "Name": "envoy",
            "Ulimits": Array [
              Object {
                "HardLimit": 1024000,
                "Name": "nofile",
                "SoftLimit": 1024000,
              },
            ],
            "User": "1337",
          },
          Object {
            "Cpu": 16,
            "Essential": true,
            "Image": "public.ecr.aws/xray/aws-xray-daemon:latest",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "KongTaskDefinitionxraydaemonLogGroup98B1A9FF",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "MemoryReservation": 64,
            "Name": "xray-daemon",
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "KongTaskDefinitionExecutionRole2593435E",
            "Arn",
          ],
        },
        "Family": "testKongTaskDefinition885143DC",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "ProxyConfiguration": Object {
          "ContainerName": "envoy",
          "ProxyConfigurationProperties": Array [
            Object {
              "Name": "IgnoredUID",
              "Value": "1337",
            },
            Object {
              "Name": "IgnoredGID",
              "Value": "1338",
            },
            Object {
              "Name": "AppPorts",
              "Value": "8000",
            },
            Object {
              "Name": "ProxyIngressPort",
              "Value": "15000",
            },
            Object {
              "Name": "ProxyEgressPort",
              "Value": "15001",
            },
            Object {
              "Name": "EgressIgnoredIPs",
              "Value": "169.254.170.2,169.254.169.254",
            },
          ],
          "Type": "APPMESH",
        },
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "RuntimePlatform": Object {
          "CpuArchitecture": "ARM64",
        },
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "KongTaskDefinitionTaskRole59341FD6",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "KongTaskDefinitionExecutionRole2593435E": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "KongTaskDefinitionExecutionRoleDefaultPolicyF6446340": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ecr:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":repository/",
                    Object {
                      "Fn::Sub": "cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "KongTaskDefinitionappLogGroup2AEC822E",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "SupabaseJwtSecret4CEDF760",
              },
            },
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "KongTaskDefinitionenvoyLogGroupD501650D",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "KongTaskDefinitionxraydaemonLogGroup98B1A9FF",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "KongTaskDefinitionExecutionRoleDefaultPolicyF6446340",
        "Roles": Array [
          Object {
            "Ref": "KongTaskDefinitionExecutionRole2593435E",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "KongTaskDefinitionTaskRole59341FD6": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          "arn:aws:iam::aws:policy/AWSAppMeshEnvoyAccess",
          "arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess",
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "KongTaskDefinitionappLogGroup2AEC822E": Object {
      "DeletionPolicy": "Retain",
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "KongTaskDefinitionenvoyLogGroupD501650D": Object {
      "DeletionPolicy": "Retain",
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "KongTaskDefinitionxraydaemonLogGroup98B1A9FF": Object {
      "DeletionPolicy": "Retain",
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "KongVirtualNodeFABCC391": Object {
      "Properties": Object {
        "MeshName": Object {
          "Fn::GetAtt": Array [
            "Mesh73A573F6",
            "MeshName",
          ],
        },
        "Spec": Object {
          "Backends": Array [
            Object {
              "VirtualService": Object {
                "VirtualServiceName": "auth.supabase.local",
              },
            },
            Object {
              "VirtualService": Object {
                "VirtualServiceName": "rest.supabase.local",
              },
            },
            Object {
              "VirtualService": Object {
                "VirtualServiceName": "realtime.supabase.local",
              },
            },
            Object {
              "VirtualService": Object {
                "VirtualServiceName": "storage.supabase.local",
              },
            },
            Object {
              "VirtualService": Object {
                "VirtualServiceName": "meta.supabase.local",
              },
            },
          ],
          "Listeners": Array [
            Object {
              "PortMapping": Object {
                "Port": 8000,
                "Protocol": "http",
              },
            },
          ],
          "Logging": Object {
            "AccessLog": Object {
              "File": Object {
                "Path": "/dev/stdout",
              },
            },
          },
          "ServiceDiscovery": Object {
            "AWSCloudMap": Object {
              "NamespaceName": "supabase.local",
              "ServiceName": Object {
                "Fn::GetAtt": Array [
                  "KongSvcServiceCloudmapServiceA3BF260B",
                  "Name",
                ],
              },
            },
          },
        },
        "VirtualNodeName": "Kong",
      },
      "Type": "AWS::AppMesh::VirtualNode",
    },
    "KongVirtualService469BBDA1": Object {
      "Properties": Object {
        "MeshName": Object {
          "Fn::GetAtt": Array [
            "Mesh73A573F6",
            "MeshName",
          ],
        },
        "Spec": Object {
          "Provider": Object {
            "VirtualNode": Object {
              "VirtualNodeName": Object {
                "Fn::GetAtt": Array [
                  "KongVirtualNodeFABCC391",
                  "VirtualNodeName",
                ],
              },
            },
          },
        },
        "VirtualServiceName": "kong.supabase.local",
      },
      "Type": "AWS::AppMesh::VirtualService",
    },
    "Mesh73A573F6": Object {
      "Properties": Object {
        "MeshName": "test",
        "Spec": Object {
          "EgressFilter": Object {
            "Type": "ALLOW_ALL",
          },
        },
      },
      "Type": "AWS::AppMesh::Mesh",
    },
    "MetaSvcCloudmapService5BBAEB97": Object {
      "Properties": Object {
        "DnsConfig": Object {
          "DnsRecords": Array [
            Object {
              "TTL": 10,
              "Type": "A",
            },
          ],
          "NamespaceId": Object {
            "Fn::GetAtt": Array [
              "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
              "Id",
            ],
          },
          "RoutingPolicy": "MULTIVALUE",
        },
        "HealthCheckCustomConfig": Object {
          "FailureThreshold": 1,
        },
        "Name": "meta",
        "NamespaceId": Object {
          "Fn::GetAtt": Array [
            "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
            "Id",
          ],
        },
      },
      "Type": "AWS::ServiceDiscovery::Service",
    },
    "MetaSvcSecurityGroup28D90BB4": Object {
      "Properties": Object {
        "GroupDescription": "test/Meta/Svc/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "MetaSvcSecurityGroupfromtestKongSvcServiceSecurityGroupD2D88BD78080683BE40D": Object {
      "Properties": Object {
        "Description": "from testKongSvcServiceSecurityGroupD2D88BD7:8080",
        "FromPort": 8080,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "MetaSvcSecurityGroup28D90BB4",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "KongSvcServiceSecurityGroup5EF39425",
            "GroupId",
          ],
        },
        "ToPort": 8080,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "MetaSvcSecurityGroupfromtestStudioSvcServiceSecurityGroup969332918080EE542376": Object {
      "Properties": Object {
        "Description": "from testStudioSvcServiceSecurityGroup96933291:8080",
        "FromPort": 8080,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "MetaSvcSecurityGroup28D90BB4",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "StudioSvcServiceSecurityGroupEF26159E",
            "GroupId",
          ],
        },
        "ToPort": 8080,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "MetaSvcService58BFAF30": Object {
      "Properties": Object {
        "CapacityProviderStrategy": Array [
          Object {
            "Base": 1,
            "CapacityProvider": "FARGATE",
            "Weight": 1,
          },
          Object {
            "Base": 0,
            "CapacityProvider": "FARGATE_SPOT",
            "Weight": 0,
          },
        ],
        "Cluster": Object {
          "Ref": "ClusterEB0386A7",
        },
        "DeploymentConfiguration": Object {
          "DeploymentCircuitBreaker": Object {
            "Enable": true,
            "Rollback": true,
          },
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "DeploymentController": Object {
          "Type": "ECS",
        },
        "EnableECSManagedTags": false,
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "MetaSvcSecurityGroup28D90BB4",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Array [
              Object {
                "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
              },
              Object {
                "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
              },
            ],
          },
        },
        "ServiceRegistries": Array [
          Object {
            "RegistryArn": Object {
              "Fn::GetAtt": Array [
                "MetaSvcCloudmapService5BBAEB97",
                "Arn",
              ],
            },
          },
        ],
        "TaskDefinition": Object {
          "Ref": "MetaTaskDefinition286A1512",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "MetaTaskDefinition286A1512": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "DependsOn": Array [
              Object {
                "Condition": "HEALTHY",
                "ContainerName": "envoy",
              },
            ],
            "Environment": Array [
              Object {
                "Name": "PG_META_PORT",
                "Value": "8080",
              },
            ],
            "Essential": true,
            "Image": "supabase/postgres-meta:v0.41.0",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "MetaTaskDefinitionappLogGroup5C408D57",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "Name": "app",
            "PortMappings": Array [
              Object {
                "ContainerPort": 8080,
                "Protocol": "tcp",
              },
            ],
            "Secrets": Array [
              Object {
                "Name": "PG_META_DB_HOST",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DBSecretAttachment1CF7DE47",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "PG_META_DB_PORT",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DBSecretAttachment1CF7DE47",
                      },
                      ":port::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "PG_META_DB_NAME",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DBSecretAttachment1CF7DE47",
                      },
                      ":dbname::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "PG_META_DB_USER",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DBSecretAttachment1CF7DE47",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "PG_META_DB_PASSWORD",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DBSecretAttachment1CF7DE47",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
            "Ulimits": Array [
              Object {
                "HardLimit": 65536,
                "Name": "nofile",
                "SoftLimit": 65536,
              },
            ],
          },
          Object {
            "Cpu": 80,
            "Environment": Array [
              Object {
                "Name": "APPMESH_VIRTUAL_NODE_NAME",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "mesh/",
                      Object {
                        "Fn::GetAtt": Array [
                          "Mesh73A573F6",
                          "MeshName",
                        ],
                      },
                      "/virtualNode/",
                      Object {
                        "Fn::GetAtt": Array [
                          "MetaVirtualNode03248F16",
                          "VirtualNodeName",
                        ],
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "ENVOY_ADMIN_ACCESS_LOG_FILE",
                "Value": "/dev/null",
              },
              Object {
                "Name": "ENABLE_ENVOY_XRAY_TRACING",
                "Value": "1",
              },
              Object {
                "Name": "XRAY_SAMPLING_RATE",
                "Value": "1.00",
              },
            ],
            "Essential": true,
            "HealthCheck": Object {
              "Command": Array [
                "CMD-SHELL",
                "curl -s http://localhost:9901/server_info | grep state | grep -q LIVE",
              ],
              "Interval": 5,
              "Retries": 3,
              "StartPeriod": 10,
              "Timeout": 2,
            },
            "Image": "public.ecr.aws/appmesh/aws-appmesh-envoy:v1.22.2.0-prod",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "MetaTaskDefinitionenvoyLogGroup7E55EAEB",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "MemoryReservation": 128,
            "Name": "envoy",
            "Ulimits": Array [
              Object {
                "HardLimit": 1024000,
                "Name": "nofile",
                "SoftLimit": 1024000,
              },
            ],
            "User": "1337",
          },
          Object {
            "Cpu": 16,
            "Essential": true,
            "Image": "public.ecr.aws/xray/aws-xray-daemon:latest",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "MetaTaskDefinitionxraydaemonLogGroupAD84E3BE",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "MemoryReservation": 64,
            "Name": "xray-daemon",
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "MetaTaskDefinitionExecutionRole93D83399",
            "Arn",
          ],
        },
        "Family": "testMetaTaskDefinition965F79E5",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "ProxyConfiguration": Object {
          "ContainerName": "envoy",
          "ProxyConfigurationProperties": Array [
            Object {
              "Name": "IgnoredUID",
              "Value": "1337",
            },
            Object {
              "Name": "IgnoredGID",
              "Value": "1338",
            },
            Object {
              "Name": "AppPorts",
              "Value": "8080",
            },
            Object {
              "Name": "ProxyIngressPort",
              "Value": "15000",
            },
            Object {
              "Name": "ProxyEgressPort",
              "Value": "15001",
            },
            Object {
              "Name": "EgressIgnoredIPs",
              "Value": "169.254.170.2,169.254.169.254",
            },
          ],
          "Type": "APPMESH",
        },
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "RuntimePlatform": Object {
          "CpuArchitecture": "ARM64",
        },
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "MetaTaskDefinitionTaskRole18CD498C",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "MetaTaskDefinitionExecutionRole93D83399": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "MetaTaskDefinitionExecutionRoleDefaultPolicy5A6F1F9C": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "MetaTaskDefinitionappLogGroup5C408D57",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "DBSecretAttachment1CF7DE47",
              },
            },
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "MetaTaskDefinitionenvoyLogGroup7E55EAEB",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "MetaTaskDefinitionxraydaemonLogGroupAD84E3BE",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "MetaTaskDefinitionExecutionRoleDefaultPolicy5A6F1F9C",
        "Roles": Array [
          Object {
            "Ref": "MetaTaskDefinitionExecutionRole93D83399",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "MetaTaskDefinitionTaskRole18CD498C": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          "arn:aws:iam::aws:policy/AWSAppMeshEnvoyAccess",
          "arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess",
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "MetaTaskDefinitionappLogGroup5C408D57": Object {
      "DeletionPolicy": "Retain",
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "MetaTaskDefinitionenvoyLogGroup7E55EAEB": Object {
      "DeletionPolicy": "Retain",
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "MetaTaskDefinitionxraydaemonLogGroupAD84E3BE": Object {
      "DeletionPolicy": "Retain",
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "MetaVirtualNode03248F16": Object {
      "Properties": Object {
        "MeshName": Object {
          "Fn::GetAtt": Array [
            "Mesh73A573F6",
            "MeshName",
          ],
        },
        "Spec": Object {
          "Backends": Array [
            Object {
              "VirtualService": Object {
                "VirtualServiceName": Object {
                  "Fn::GetAtt": Array [
                    "DB4924F778",
                    "Endpoint.Address",
                  ],
                },
              },
            },
          ],
          "Listeners": Array [
            Object {
              "PortMapping": Object {
                "Port": 8080,
                "Protocol": "http",
              },
            },
          ],
          "Logging": Object {
            "AccessLog": Object {
              "File": Object {
                "Path": "/dev/stdout",
              },
            },
          },
          "ServiceDiscovery": Object {
            "AWSCloudMap": Object {
              "NamespaceName": "supabase.local",
              "ServiceName": Object {
                "Fn::GetAtt": Array [
                  "MetaSvcCloudmapService5BBAEB97",
                  "Name",
                ],
              },
            },
          },
        },
        "VirtualNodeName": "Meta",
      },
      "Type": "AWS::AppMesh::VirtualNode",
    },
    "MetaVirtualServiceD8836994": Object {
      "Properties": Object {
        "MeshName": Object {
          "Fn::GetAtt": Array [
            "Mesh73A573F6",
            "MeshName",
          ],
        },
        "Spec": Object {
          "Provider": Object {
            "VirtualNode": Object {
              "VirtualNodeName": Object {
                "Fn::GetAtt": Array [
                  "MetaVirtualNode03248F16",
                  "VirtualNodeName",
                ],
              },
            },
          },
        },
        "VirtualServiceName": "meta.supabase.local",
      },
      "Type": "AWS::AppMesh::VirtualService",
    },
    "ParameterGroup5E32DECB": Object {
      "Properties": Object {
        "Description": "Supabase parameter group for aurora-postgresql14",
        "Family": "aurora-postgresql14",
        "Parameters": Object {
          "rds.logical_replication": "1",
        },
      },
      "Type": "AWS::RDS::DBClusterParameterGroup",
    },
    "RealtimeSvcCloudmapServiceF8CD5DF6": Object {
      "Properties": Object {
        "DnsConfig": Object {
          "DnsRecords": Array [
            Object {
              "TTL": 10,
              "Type": "A",
            },
          ],
          "NamespaceId": Object {
            "Fn::GetAtt": Array [
              "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
              "Id",
            ],
          },
          "RoutingPolicy": "MULTIVALUE",
        },
        "HealthCheckCustomConfig": Object {
          "FailureThreshold": 1,
        },
        "Name": "realtime",
        "NamespaceId": Object {
          "Fn::GetAtt": Array [
            "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
            "Id",
          ],
        },
      },
      "Type": "AWS::ServiceDiscovery::Service",
    },
    "RealtimeSvcSecurityGroup15A1991B": Object {
      "Properties": Object {
        "GroupDescription": "test/Realtime/Svc/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "RealtimeSvcSecurityGroupfromtestKongSvcServiceSecurityGroupD2D88BD74000249763F3": Object {
      "Properties": Object {
        "Description": "from testKongSvcServiceSecurityGroupD2D88BD7:4000",
        "FromPort": 4000,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "RealtimeSvcSecurityGroup15A1991B",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "KongSvcServiceSecurityGroup5EF39425",
            "GroupId",
          ],
        },
        "ToPort": 4000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "RealtimeSvcService05F54057": Object {
      "Properties": Object {
        "CapacityProviderStrategy": Array [
          Object {
            "Base": 1,
            "CapacityProvider": "FARGATE",
            "Weight": 1,
          },
          Object {
            "Base": 0,
            "CapacityProvider": "FARGATE_SPOT",
            "Weight": 0,
          },
        ],
        "Cluster": Object {
          "Ref": "ClusterEB0386A7",
        },
        "DeploymentConfiguration": Object {
          "DeploymentCircuitBreaker": Object {
            "Enable": true,
            "Rollback": true,
          },
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "DeploymentController": Object {
          "Type": "ECS",
        },
        "EnableECSManagedTags": false,
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "RealtimeSvcSecurityGroup15A1991B",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Array [
              Object {
                "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
              },
              Object {
                "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
              },
            ],
          },
        },
        "ServiceRegistries": Array [
          Object {
            "RegistryArn": Object {
              "Fn::GetAtt": Array [
                "RealtimeSvcCloudmapServiceF8CD5DF6",
                "Arn",
              ],
            },
          },
        ],
        "TaskDefinition": Object {
          "Ref": "RealtimeTaskDefinition52361C2C",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "RealtimeTaskDefinition52361C2C": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "Command": Array [
              "bash",
              "-c",
              "./prod/rel/realtime/bin/realtime eval Realtime.Release.migrate && ./prod/rel/realtime/bin/realtime start",
            ],
            "DependsOn": Array [
              Object {
                "Condition": "HEALTHY",
                "ContainerName": "envoy",
              },
            ],
            "Environment": Array [
              Object {
                "Name": "DB_SSL",
                "Value": "false",
              },
              Object {
                "Name": "PORT",
                "Value": "4000",
              },
              Object {
                "Name": "REPLICATION_MODE",
                "Value": "RLS",
              },
              Object {
                "Name": "REPLICATION_POLL_INTERVAL",
                "Value": "100",
              },
              Object {
                "Name": "SECURE_CHANNELS",
                "Value": "true",
              },
              Object {
                "Name": "SLOT_NAME",
                "Value": "supabase_realtime_rls",
              },
              Object {
                "Name": "TEMPORARY_SLOT",
                "Value": "true",
              },
            ],
            "Essential": true,
            "Image": "supabase/realtime:v0.22.7",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "RealtimeTaskDefinitionappLogGroup60EE6415",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "Name": "app",
            "PortMappings": Array [
              Object {
                "ContainerPort": 4000,
                "Protocol": "tcp",
              },
            ],
            "Secrets": Array [
              Object {
                "Name": "JWT_SECRET",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "SupabaseJwtSecret4CEDF760",
                      },
                      ":jwt_secret::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "DB_HOST",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DBSecretAttachment1CF7DE47",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "DB_PORT",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DBSecretAttachment1CF7DE47",
                      },
                      ":port::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "DB_NAME",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DBSecretAttachment1CF7DE47",
                      },
                      ":dbname::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "DB_USER",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DBSecretAttachment1CF7DE47",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "DB_PASSWORD",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DBSecretAttachment1CF7DE47",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
            "Ulimits": Array [
              Object {
                "HardLimit": 65536,
                "Name": "nofile",
                "SoftLimit": 65536,
              },
            ],
          },
          Object {
            "Cpu": 80,
            "Environment": Array [
              Object {
                "Name": "APPMESH_VIRTUAL_NODE_NAME",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "mesh/",
                      Object {
                        "Fn::GetAtt": Array [
                          "Mesh73A573F6",
                          "MeshName",
                        ],
                      },
                      "/virtualNode/",
                      Object {
                        "Fn::GetAtt": Array [
                          "RealtimeVirtualNode58346FCC",
                          "VirtualNodeName",
                        ],
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "ENVOY_ADMIN_ACCESS_LOG_FILE",
                "Value": "/dev/null",
              },
              Object {
                "Name": "ENABLE_ENVOY_XRAY_TRACING",
                "Value": "1",
              },
              Object {
                "Name": "XRAY_SAMPLING_RATE",
                "Value": "1.00",
              },
            ],
            "Essential": true,
            "HealthCheck": Object {
              "Command": Array [
                "CMD-SHELL",
                "curl -s http://localhost:9901/server_info | grep state | grep -q LIVE",
              ],
              "Interval": 5,
              "Retries": 3,
              "StartPeriod": 10,
              "Timeout": 2,
            },
            "Image": "public.ecr.aws/appmesh/aws-appmesh-envoy:v1.22.2.0-prod",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "RealtimeTaskDefinitionenvoyLogGroup7AE18490",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "MemoryReservation": 128,
            "Name": "envoy",
            "Ulimits": Array [
              Object {
                "HardLimit": 1024000,
                "Name": "nofile",
                "SoftLimit": 1024000,
              },
            ],
            "User": "1337",
          },
          Object {
            "Cpu": 16,
            "Essential": true,
            "Image": "public.ecr.aws/xray/aws-xray-daemon:latest",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "RealtimeTaskDefinitionxraydaemonLogGroup46723FF1",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "MemoryReservation": 64,
            "Name": "xray-daemon",
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "RealtimeTaskDefinitionExecutionRoleCD260B29",
            "Arn",
          ],
        },
        "Family": "testRealtimeTaskDefinition02CBF02F",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "ProxyConfiguration": Object {
          "ContainerName": "envoy",
          "ProxyConfigurationProperties": Array [
            Object {
              "Name": "IgnoredUID",
              "Value": "1337",
            },
            Object {
              "Name": "IgnoredGID",
              "Value": "1338",
            },
            Object {
              "Name": "AppPorts",
              "Value": "4000",
            },
            Object {
              "Name": "ProxyIngressPort",
              "Value": "15000",
            },
            Object {
              "Name": "ProxyEgressPort",
              "Value": "15001",
            },
            Object {
              "Name": "EgressIgnoredIPs",
              "Value": "169.254.170.2,169.254.169.254",
            },
          ],
          "Type": "APPMESH",
        },
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "RuntimePlatform": Object {
          "CpuArchitecture": "ARM64",
        },
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "RealtimeTaskDefinitionTaskRole8324A2B1",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "RealtimeTaskDefinitionExecutionRoleCD260B29": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "RealtimeTaskDefinitionExecutionRoleDefaultPolicyBD7C355B": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "RealtimeTaskDefinitionappLogGroup60EE6415",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "SupabaseJwtSecret4CEDF760",
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "DBSecretAttachment1CF7DE47",
              },
            },
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "RealtimeTaskDefinitionenvoyLogGroup7AE18490",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "RealtimeTaskDefinitionxraydaemonLogGroup46723FF1",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "RealtimeTaskDefinitionExecutionRoleDefaultPolicyBD7C355B",
        "Roles": Array [
          Object {
            "Ref": "RealtimeTaskDefinitionExecutionRoleCD260B29",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "RealtimeTaskDefinitionTaskRole8324A2B1": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          "arn:aws:iam::aws:policy/AWSAppMeshEnvoyAccess",
          "arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess",
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "RealtimeTaskDefinitionappLogGroup60EE6415": Object {
      "DeletionPolicy": "Retain",
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "RealtimeTaskDefinitionenvoyLogGroup7AE18490": Object {
      "DeletionPolicy": "Retain",
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "RealtimeTaskDefinitionxraydaemonLogGroup46723FF1": Object {
      "DeletionPolicy": "Retain",
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "RealtimeVirtualNode58346FCC": Object {
      "Properties": Object {
        "MeshName": Object {
          "Fn::GetAtt": Array [
            "Mesh73A573F6",
            "MeshName",
          ],
        },
        "Spec": Object {
          "Backends": Array [
            Object {
              "VirtualService": Object {
                "VirtualServiceName": Object {
                  "Fn::GetAtt": Array [
                    "DB4924F778",
                    "Endpoint.Address",
                  ],
                },
              },
            },
          ],
          "Listeners": Array [
            Object {
              "PortMapping": Object {
                "Port": 4000,
                "Protocol": "http",
              },
            },
          ],
          "Logging": Object {
            "AccessLog": Object {
              "File": Object {
                "Path": "/dev/stdout",
              },
            },
          },
          "ServiceDiscovery": Object {
            "AWSCloudMap": Object {
              "NamespaceName": "supabase.local",
              "ServiceName": Object {
                "Fn::GetAtt": Array [
                  "RealtimeSvcCloudmapServiceF8CD5DF6",
                  "Name",
                ],
              },
            },
          },
        },
        "VirtualNodeName": "Realtime",
      },
      "Type": "AWS::AppMesh::VirtualNode",
    },
    "RealtimeVirtualService596BFBD0": Object {
      "Properties": Object {
        "MeshName": Object {
          "Fn::GetAtt": Array [
            "Mesh73A573F6",
            "MeshName",
          ],
        },
        "Spec": Object {
          "Provider": Object {
            "VirtualNode": Object {
              "VirtualNodeName": Object {
                "Fn::GetAtt": Array [
                  "RealtimeVirtualNode58346FCC",
                  "VirtualNodeName",
                ],
              },
            },
          },
        },
        "VirtualServiceName": "realtime.supabase.local",
      },
      "Type": "AWS::AppMesh::VirtualService",
    },
    "RestSvcCloudmapServiceC2707820": Object {
      "Properties": Object {
        "DnsConfig": Object {
          "DnsRecords": Array [
            Object {
              "TTL": 10,
              "Type": "A",
            },
          ],
          "NamespaceId": Object {
            "Fn::GetAtt": Array [
              "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
              "Id",
            ],
          },
          "RoutingPolicy": "MULTIVALUE",
        },
        "HealthCheckCustomConfig": Object {
          "FailureThreshold": 1,
        },
        "Name": "rest",
        "NamespaceId": Object {
          "Fn::GetAtt": Array [
            "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
            "Id",
          ],
        },
      },
      "Type": "AWS::ServiceDiscovery::Service",
    },
    "RestSvcSecurityGroup4F37982C": Object {
      "Properties": Object {
        "GroupDescription": "test/Rest/Svc/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "RestSvcSecurityGroupfromtestAuthSvcSecurityGroup6D8B81F63000F563BE3B": Object {
      "Properties": Object {
        "Description": "from testAuthSvcSecurityGroup6D8B81F6:3000",
        "FromPort": 3000,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "RestSvcSecurityGroup4F37982C",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "AuthSvcSecurityGroup71415F29",
            "GroupId",
          ],
        },
        "ToPort": 3000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "RestSvcSecurityGroupfromtestKongSvcServiceSecurityGroupD2D88BD730006DA670D0": Object {
      "Properties": Object {
        "Description": "from testKongSvcServiceSecurityGroupD2D88BD7:3000",
        "FromPort": 3000,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "RestSvcSecurityGroup4F37982C",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "KongSvcServiceSecurityGroup5EF39425",
            "GroupId",
          ],
        },
        "ToPort": 3000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "RestSvcSecurityGroupfromtestStorageSvcSecurityGroupECDB89FC3000681F55F6": Object {
      "Properties": Object {
        "Description": "from testStorageSvcSecurityGroupECDB89FC:3000",
        "FromPort": 3000,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "RestSvcSecurityGroup4F37982C",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "StorageSvcSecurityGroup134E6883",
            "GroupId",
          ],
        },
        "ToPort": 3000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "RestSvcServiceCEB7F559": Object {
      "Properties": Object {
        "CapacityProviderStrategy": Array [
          Object {
            "Base": 1,
            "CapacityProvider": "FARGATE",
            "Weight": 1,
          },
          Object {
            "Base": 0,
            "CapacityProvider": "FARGATE_SPOT",
            "Weight": 0,
          },
        ],
        "Cluster": Object {
          "Ref": "ClusterEB0386A7",
        },
        "DeploymentConfiguration": Object {
          "DeploymentCircuitBreaker": Object {
            "Enable": true,
            "Rollback": true,
          },
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "DeploymentController": Object {
          "Type": "ECS",
        },
        "EnableECSManagedTags": false,
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "RestSvcSecurityGroup4F37982C",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Array [
              Object {
                "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
              },
              Object {
                "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
              },
            ],
          },
        },
        "ServiceRegistries": Array [
          Object {
            "RegistryArn": Object {
              "Fn::GetAtt": Array [
                "RestSvcCloudmapServiceC2707820",
                "Arn",
              ],
            },
          },
        ],
        "TaskDefinition": Object {
          "Ref": "RestTaskDefinition4EBA60E9",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "RestTaskDefinition4EBA60E9": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "DependsOn": Array [
              Object {
                "Condition": "HEALTHY",
                "ContainerName": "envoy",
              },
            ],
            "Environment": Array [
              Object {
                "Name": "PGRST_DB_SCHEMAS",
                "Value": "public,storage,graphql_public",
              },
              Object {
                "Name": "PGRST_DB_ANON_ROLE",
                "Value": "anon",
              },
              Object {
                "Name": "PGRST_DB_USE_LEGACY_GUCS",
                "Value": "false",
              },
            ],
            "Essential": true,
            "Image": "postgrest/postgrest:v9.0.1",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "RestTaskDefinitionappLogGroup1B252B42",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "Name": "app",
            "PortMappings": Array [
              Object {
                "ContainerPort": 3000,
                "Protocol": "tcp",
              },
            ],
            "Secrets": Array [
              Object {
                "Name": "PGRST_DB_URI",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DBSecretAttachment1CF7DE47",
                      },
                      ":url::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "PGRST_JWT_SECRET",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "SupabaseJwtSecret4CEDF760",
                      },
                      ":jwt_secret::",
                    ],
                  ],
                },
              },
            ],
            "Ulimits": Array [
              Object {
                "HardLimit": 65536,
                "Name": "nofile",
                "SoftLimit": 65536,
              },
            ],
          },
          Object {
            "Cpu": 80,
            "Environment": Array [
              Object {
                "Name": "APPMESH_VIRTUAL_NODE_NAME",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "mesh/",
                      Object {
                        "Fn::GetAtt": Array [
                          "Mesh73A573F6",
                          "MeshName",
                        ],
                      },
                      "/virtualNode/",
                      Object {
                        "Fn::GetAtt": Array [
                          "RestVirtualNode2FA1B1DF",
                          "VirtualNodeName",
                        ],
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "ENVOY_ADMIN_ACCESS_LOG_FILE",
                "Value": "/dev/null",
              },
              Object {
                "Name": "ENABLE_ENVOY_XRAY_TRACING",
                "Value": "1",
              },
              Object {
                "Name": "XRAY_SAMPLING_RATE",
                "Value": "1.00",
              },
            ],
            "Essential": true,
            "HealthCheck": Object {
              "Command": Array [
                "CMD-SHELL",
                "curl -s http://localhost:9901/server_info | grep state | grep -q LIVE",
              ],
              "Interval": 5,
              "Retries": 3,
              "StartPeriod": 10,
              "Timeout": 2,
            },
            "Image": "public.ecr.aws/appmesh/aws-appmesh-envoy:v1.22.2.0-prod",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "RestTaskDefinitionenvoyLogGroup8364AFDA",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "MemoryReservation": 128,
            "Name": "envoy",
            "Ulimits": Array [
              Object {
                "HardLimit": 1024000,
                "Name": "nofile",
                "SoftLimit": 1024000,
              },
            ],
            "User": "1337",
          },
          Object {
            "Cpu": 16,
            "Essential": true,
            "Image": "public.ecr.aws/xray/aws-xray-daemon:latest",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "RestTaskDefinitionxraydaemonLogGroupB7C2922E",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "MemoryReservation": 64,
            "Name": "xray-daemon",
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "RestTaskDefinitionExecutionRole3F0CBE29",
            "Arn",
          ],
        },
        "Family": "testRestTaskDefinition32339EDE",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "ProxyConfiguration": Object {
          "ContainerName": "envoy",
          "ProxyConfigurationProperties": Array [
            Object {
              "Name": "IgnoredUID",
              "Value": "1337",
            },
            Object {
              "Name": "IgnoredGID",
              "Value": "1338",
            },
            Object {
              "Name": "AppPorts",
              "Value": "3000",
            },
            Object {
              "Name": "ProxyIngressPort",
              "Value": "15000",
            },
            Object {
              "Name": "ProxyEgressPort",
              "Value": "15001",
            },
            Object {
              "Name": "EgressIgnoredIPs",
              "Value": "169.254.170.2,169.254.169.254",
            },
          ],
          "Type": "APPMESH",
        },
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "RuntimePlatform": Object {
          "CpuArchitecture": "ARM64",
        },
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "RestTaskDefinitionTaskRole94551FBF",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "RestTaskDefinitionExecutionRole3F0CBE29": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "RestTaskDefinitionExecutionRoleDefaultPolicyB130F5B5": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "RestTaskDefinitionappLogGroup1B252B42",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "DBSecretAttachment1CF7DE47",
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "SupabaseJwtSecret4CEDF760",
              },
            },
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "RestTaskDefinitionenvoyLogGroup8364AFDA",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "RestTaskDefinitionxraydaemonLogGroupB7C2922E",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "RestTaskDefinitionExecutionRoleDefaultPolicyB130F5B5",
        "Roles": Array [
          Object {
            "Ref": "RestTaskDefinitionExecutionRole3F0CBE29",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "RestTaskDefinitionTaskRole94551FBF": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          "arn:aws:iam::aws:policy/AWSAppMeshEnvoyAccess",
          "arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess",
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "RestTaskDefinitionappLogGroup1B252B42": Object {
      "DeletionPolicy": "Retain",
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "RestTaskDefinitionenvoyLogGroup8364AFDA": Object {
      "DeletionPolicy": "Retain",
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "RestTaskDefinitionxraydaemonLogGroupB7C2922E": Object {
      "DeletionPolicy": "Retain",
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "RestVirtualNode2FA1B1DF": Object {
      "Properties": Object {
        "MeshName": Object {
          "Fn::GetAtt": Array [
            "Mesh73A573F6",
            "MeshName",
          ],
        },
        "Spec": Object {
          "Backends": Array [
            Object {
              "VirtualService": Object {
                "VirtualServiceName": Object {
                  "Fn::GetAtt": Array [
                    "DB4924F778",
                    "Endpoint.Address",
                  ],
                },
              },
            },
          ],
          "Listeners": Array [
            Object {
              "PortMapping": Object {
                "Port": 3000,
                "Protocol": "http",
              },
            },
          ],
          "Logging": Object {
            "AccessLog": Object {
              "File": Object {
                "Path": "/dev/stdout",
              },
            },
          },
          "ServiceDiscovery": Object {
            "AWSCloudMap": Object {
              "NamespaceName": "supabase.local",
              "ServiceName": Object {
                "Fn::GetAtt": Array [
                  "RestSvcCloudmapServiceC2707820",
                  "Name",
                ],
              },
            },
          },
        },
        "VirtualNodeName": "Rest",
      },
      "Type": "AWS::AppMesh::VirtualNode",
    },
    "RestVirtualService75A9862D": Object {
      "Properties": Object {
        "MeshName": Object {
          "Fn::GetAtt": Array [
            "Mesh73A573F6",
            "MeshName",
          ],
        },
        "Spec": Object {
          "Provider": Object {
            "VirtualNode": Object {
              "VirtualNodeName": Object {
                "Fn::GetAtt": Array [
                  "RestVirtualNode2FA1B1DF",
                  "VirtualNodeName",
                ],
              },
            },
          },
        },
        "VirtualServiceName": "rest.supabase.local",
      },
      "Type": "AWS::AppMesh::VirtualService",
    },
    "StorageSvcCloudmapServiceEC9FA74C": Object {
      "Properties": Object {
        "DnsConfig": Object {
          "DnsRecords": Array [
            Object {
              "TTL": 10,
              "Type": "A",
            },
          ],
          "NamespaceId": Object {
            "Fn::GetAtt": Array [
              "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
              "Id",
            ],
          },
          "RoutingPolicy": "MULTIVALUE",
        },
        "HealthCheckCustomConfig": Object {
          "FailureThreshold": 1,
        },
        "Name": "storage",
        "NamespaceId": Object {
          "Fn::GetAtt": Array [
            "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
            "Id",
          ],
        },
      },
      "Type": "AWS::ServiceDiscovery::Service",
    },
    "StorageSvcSecurityGroup134E6883": Object {
      "Properties": Object {
        "GroupDescription": "test/Storage/Svc/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "StorageSvcSecurityGroupfromtestKongSvcServiceSecurityGroupD2D88BD780806FB84E10": Object {
      "Properties": Object {
        "Description": "from testKongSvcServiceSecurityGroupD2D88BD7:8080",
        "FromPort": 8080,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "StorageSvcSecurityGroup134E6883",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "KongSvcServiceSecurityGroup5EF39425",
            "GroupId",
          ],
        },
        "ToPort": 8080,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "StorageSvcServiceA4DA327A": Object {
      "Properties": Object {
        "CapacityProviderStrategy": Array [
          Object {
            "Base": 1,
            "CapacityProvider": "FARGATE",
            "Weight": 1,
          },
          Object {
            "Base": 0,
            "CapacityProvider": "FARGATE_SPOT",
            "Weight": 0,
          },
        ],
        "Cluster": Object {
          "Ref": "ClusterEB0386A7",
        },
        "DeploymentConfiguration": Object {
          "DeploymentCircuitBreaker": Object {
            "Enable": true,
            "Rollback": true,
          },
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "DeploymentController": Object {
          "Type": "ECS",
        },
        "EnableECSManagedTags": false,
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "StorageSvcSecurityGroup134E6883",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Array [
              Object {
                "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
              },
              Object {
                "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
              },
            ],
          },
        },
        "ServiceRegistries": Array [
          Object {
            "RegistryArn": Object {
              "Fn::GetAtt": Array [
                "StorageSvcCloudmapServiceEC9FA74C",
                "Arn",
              ],
            },
          },
        ],
        "TaskDefinition": Object {
          "Ref": "StorageTaskDefinition6B21D26E",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "StorageTaskDefinition6B21D26E": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "DependsOn": Array [
              Object {
                "Condition": "HEALTHY",
                "ContainerName": "envoy",
              },
            ],
            "Environment": Array [
              Object {
                "Name": "POSTGREST_URL",
                "Value": "http://rest.supabase.local:3000",
              },
              Object {
                "Name": "PGOPTIONS",
                "Value": "-c search_path=storage,public",
              },
              Object {
                "Name": "FILE_SIZE_LIMIT",
                "Value": "52428800",
              },
              Object {
                "Name": "STORAGE_BACKEND",
                "Value": "s3",
              },
              Object {
                "Name": "FILE_STORAGE_BACKEND_PATH",
                "Value": "./data",
              },
              Object {
                "Name": "TENANT_ID",
                "Value": "stub",
              },
              Object {
                "Name": "REGION",
                "Value": Object {
                  "Ref": "AWS::Region",
                },
              },
              Object {
                "Name": "GLOBAL_S3_BUCKET",
                "Value": Object {
                  "Ref": "Bucket83908E77",
                },
              },
            ],
            "Essential": true,
            "Image": "supabase/storage-api:v0.18.6",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "StorageTaskDefinitionappLogGroupDFD4685A",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "Name": "app",
            "PortMappings": Array [
              Object {
                "ContainerPort": 8080,
                "Protocol": "tcp",
              },
            ],
            "Secrets": Array [
              Object {
                "Name": "ANON_KEY",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "SupabaseJwtSecret4CEDF760",
                      },
                      ":anon_key::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "SERVICE_KEY",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "SupabaseJwtSecret4CEDF760",
                      },
                      ":service_role_key::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "PGRST_JWT_SECRET",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "SupabaseJwtSecret4CEDF760",
                      },
                      ":jwt_secret::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "DATABASE_URL",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DBSecretAttachment1CF7DE47",
                      },
                      ":url::",
                    ],
                  ],
                },
              },
            ],
            "Ulimits": Array [
              Object {
                "HardLimit": 65536,
                "Name": "nofile",
                "SoftLimit": 65536,
              },
            ],
          },
          Object {
            "Cpu": 80,
            "Environment": Array [
              Object {
                "Name": "APPMESH_VIRTUAL_NODE_NAME",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "mesh/",
                      Object {
                        "Fn::GetAtt": Array [
                          "Mesh73A573F6",
                          "MeshName",
                        ],
                      },
                      "/virtualNode/",
                      Object {
                        "Fn::GetAtt": Array [
                          "StorageVirtualNodeB19919D7",
                          "VirtualNodeName",
                        ],
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "ENVOY_ADMIN_ACCESS_LOG_FILE",
                "Value": "/dev/null",
              },
              Object {
                "Name": "ENABLE_ENVOY_XRAY_TRACING",
                "Value": "1",
              },
              Object {
                "Name": "XRAY_SAMPLING_RATE",
                "Value": "1.00",
              },
            ],
            "Essential": true,
            "HealthCheck": Object {
              "Command": Array [
                "CMD-SHELL",
                "curl -s http://localhost:9901/server_info | grep state | grep -q LIVE",
              ],
              "Interval": 5,
              "Retries": 3,
              "StartPeriod": 10,
              "Timeout": 2,
            },
            "Image": "public.ecr.aws/appmesh/aws-appmesh-envoy:v1.22.2.0-prod",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "StorageTaskDefinitionenvoyLogGroupDEA4EB92",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "MemoryReservation": 128,
            "Name": "envoy",
            "Ulimits": Array [
              Object {
                "HardLimit": 1024000,
                "Name": "nofile",
                "SoftLimit": 1024000,
              },
            ],
            "User": "1337",
          },
          Object {
            "Cpu": 16,
            "Essential": true,
            "Image": "public.ecr.aws/xray/aws-xray-daemon:latest",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "StorageTaskDefinitionxraydaemonLogGroupFF6266CC",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "MemoryReservation": 64,
            "Name": "xray-daemon",
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "StorageTaskDefinitionExecutionRoleAEB5CF80",
            "Arn",
          ],
        },
        "Family": "testStorageTaskDefinition0C83A16A",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "ProxyConfiguration": Object {
          "ContainerName": "envoy",
          "ProxyConfigurationProperties": Array [
            Object {
              "Name": "IgnoredUID",
              "Value": "1337",
            },
            Object {
              "Name": "IgnoredGID",
              "Value": "1338",
            },
            Object {
              "Name": "AppPorts",
              "Value": "8080",
            },
            Object {
              "Name": "ProxyIngressPort",
              "Value": "15000",
            },
            Object {
              "Name": "ProxyEgressPort",
              "Value": "15001",
            },
            Object {
              "Name": "EgressIgnoredIPs",
              "Value": "169.254.170.2,169.254.169.254",
            },
          ],
          "Type": "APPMESH",
        },
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "RuntimePlatform": Object {
          "CpuArchitecture": "ARM64",
        },
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "StorageTaskDefinitionTaskRole24C4C137",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "StorageTaskDefinitionExecutionRoleAEB5CF80": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "StorageTaskDefinitionExecutionRoleDefaultPolicy537D0826": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "StorageTaskDefinitionappLogGroupDFD4685A",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "SupabaseJwtSecret4CEDF760",
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "DBSecretAttachment1CF7DE47",
              },
            },
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "StorageTaskDefinitionenvoyLogGroupDEA4EB92",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "StorageTaskDefinitionxraydaemonLogGroupFF6266CC",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "StorageTaskDefinitionExecutionRoleDefaultPolicy537D0826",
        "Roles": Array [
          Object {
            "Ref": "StorageTaskDefinitionExecutionRoleAEB5CF80",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "StorageTaskDefinitionTaskRole24C4C137": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          "arn:aws:iam::aws:policy/AWSAppMeshEnvoyAccess",
          "arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess",
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "StorageTaskDefinitionTaskRoleDefaultPolicy3448147D": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "Bucket83908E77",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "Bucket83908E77",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "StorageTaskDefinitionTaskRoleDefaultPolicy3448147D",
        "Roles": Array [
          Object {
            "Ref": "StorageTaskDefinitionTaskRole24C4C137",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "StorageTaskDefinitionappLogGroupDFD4685A": Object {
      "DeletionPolicy": "Retain",
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "StorageTaskDefinitionenvoyLogGroupDEA4EB92": Object {
      "DeletionPolicy": "Retain",
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "StorageTaskDefinitionxraydaemonLogGroupFF6266CC": Object {
      "DeletionPolicy": "Retain",
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "StorageVirtualNodeB19919D7": Object {
      "Properties": Object {
        "MeshName": Object {
          "Fn::GetAtt": Array [
            "Mesh73A573F6",
            "MeshName",
          ],
        },
        "Spec": Object {
          "Backends": Array [
            Object {
              "VirtualService": Object {
                "VirtualServiceName": "rest.supabase.local",
              },
            },
            Object {
              "VirtualService": Object {
                "VirtualServiceName": Object {
                  "Fn::GetAtt": Array [
                    "DB4924F778",
                    "Endpoint.Address",
                  ],
                },
              },
            },
          ],
          "Listeners": Array [
            Object {
              "PortMapping": Object {
                "Port": 8080,
                "Protocol": "http",
              },
            },
          ],
          "Logging": Object {
            "AccessLog": Object {
              "File": Object {
                "Path": "/dev/stdout",
              },
            },
          },
          "ServiceDiscovery": Object {
            "AWSCloudMap": Object {
              "NamespaceName": "supabase.local",
              "ServiceName": Object {
                "Fn::GetAtt": Array [
                  "StorageSvcCloudmapServiceEC9FA74C",
                  "Name",
                ],
              },
            },
          },
        },
        "VirtualNodeName": "Storage",
      },
      "Type": "AWS::AppMesh::VirtualNode",
    },
    "StorageVirtualServiceD9A2FDB1": Object {
      "Properties": Object {
        "MeshName": Object {
          "Fn::GetAtt": Array [
            "Mesh73A573F6",
            "MeshName",
          ],
        },
        "Spec": Object {
          "Provider": Object {
            "VirtualNode": Object {
              "VirtualNodeName": Object {
                "Fn::GetAtt": Array [
                  "StorageVirtualNodeB19919D7",
                  "VirtualNodeName",
                ],
              },
            },
          },
        },
        "VirtualServiceName": "storage.supabase.local",
      },
      "Type": "AWS::AppMesh::VirtualService",
    },
    "StudioCDN8AB0BD38": Object {
      "Properties": Object {
        "DistributionConfig": Object {
          "CacheBehaviors": Array [
            Object {
              "AllowedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
              "Compress": true,
              "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
              "PathPattern": "*.css",
              "TargetOriginId": "testStudioCDNOrigin1674ACD40",
              "ViewerProtocolPolicy": "redirect-to-https",
            },
            Object {
              "AllowedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
              "Compress": true,
              "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
              "PathPattern": "*.png",
              "TargetOriginId": "testStudioCDNOrigin1674ACD40",
              "ViewerProtocolPolicy": "redirect-to-https",
            },
            Object {
              "AllowedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
              "Compress": true,
              "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
              "PathPattern": "*.svg",
              "TargetOriginId": "testStudioCDNOrigin1674ACD40",
              "ViewerProtocolPolicy": "redirect-to-https",
            },
            Object {
              "AllowedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
              "Compress": true,
              "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
              "PathPattern": "*.woff",
              "TargetOriginId": "testStudioCDNOrigin1674ACD40",
              "ViewerProtocolPolicy": "redirect-to-https",
            },
            Object {
              "AllowedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
              "Compress": true,
              "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
              "PathPattern": "*.woff2",
              "TargetOriginId": "testStudioCDNOrigin1674ACD40",
              "ViewerProtocolPolicy": "redirect-to-https",
            },
            Object {
              "AllowedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
              "Compress": true,
              "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
              "PathPattern": "*.js",
              "TargetOriginId": "testStudioCDNOrigin1674ACD40",
              "ViewerProtocolPolicy": "redirect-to-https",
            },
          ],
          "Comment": "Supabase - StudioCDN",
          "CustomErrorResponses": Array [
            Object {
              "ErrorCachingMinTTL": 10,
              "ErrorCode": 400,
            },
            Object {
              "ErrorCachingMinTTL": 10,
              "ErrorCode": 500,
            },
          ],
          "DefaultCacheBehavior": Object {
            "AllowedMethods": Array [
              "GET",
              "HEAD",
              "OPTIONS",
              "PUT",
              "PATCH",
              "POST",
              "DELETE",
            ],
            "CachePolicyId": "4135ea2d-6df8-44a3-9df3-4b5a84be39ad",
            "Compress": true,
            "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
            "TargetOriginId": "testStudioCDNOrigin1674ACD40",
            "ViewerProtocolPolicy": "redirect-to-https",
          },
          "Enabled": true,
          "HttpVersion": "http2",
          "IPV6Enabled": true,
          "Origins": Array [
            Object {
              "CustomOriginConfig": Object {
                "OriginProtocolPolicy": "http-only",
                "OriginSSLProtocols": Array [
                  "TLSv1.2",
                ],
              },
              "DomainName": Object {
                "Fn::GetAtt": Array [
                  "StudioSvcLBC1B49D6D",
                  "DNSName",
                ],
              },
              "Id": "testStudioCDNOrigin1674ACD40",
            },
          ],
        },
      },
      "Type": "AWS::CloudFront::Distribution",
    },
    "StudioSvcLBC1B49D6D": Object {
      "DependsOn": Array [
        "VPCPublicSubnet1DefaultRoute91CEF279",
        "VPCPublicSubnet2DefaultRouteB7481BBA",
      ],
      "Properties": Object {
        "LoadBalancerAttributes": Array [
          Object {
            "Key": "deletion_protection.enabled",
            "Value": "false",
          },
        ],
        "Scheme": "internet-facing",
        "SecurityGroups": Array [
          Object {
            "Fn::GetAtt": Array [
              "StudioSvcLBSecurityGroup7B90B4C7",
              "GroupId",
            ],
          },
        ],
        "Subnets": Array [
          Object {
            "Ref": "VPCPublicSubnet1SubnetB4246D30",
          },
          Object {
            "Ref": "VPCPublicSubnet2Subnet74179F39",
          },
        ],
        "Type": "application",
      },
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
    },
    "StudioSvcLBPublicListener4C14E701": Object {
      "Properties": Object {
        "DefaultActions": Array [
          Object {
            "TargetGroupArn": Object {
              "Ref": "StudioSvcLBPublicListenerECSGroup48C5F9E8",
            },
            "Type": "forward",
          },
        ],
        "LoadBalancerArn": Object {
          "Ref": "StudioSvcLBC1B49D6D",
        },
        "Port": 80,
        "Protocol": "HTTP",
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "StudioSvcLBPublicListenerECSGroup48C5F9E8": Object {
      "Properties": Object {
        "HealthCheckIntervalSeconds": 10,
        "HealthCheckPath": "/stats",
        "HealthCheckPort": "9901",
        "HealthCheckTimeoutSeconds": 5,
        "Port": 80,
        "Protocol": "HTTP",
        "TargetGroupAttributes": Array [
          Object {
            "Key": "stickiness.enabled",
            "Value": "false",
          },
          Object {
            "Key": "deregistration_delay.timeout_seconds",
            "Value": "30",
          },
        ],
        "TargetType": "ip",
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
    },
    "StudioSvcLBSecurityGroup7B90B4C7": Object {
      "Properties": Object {
        "GroupDescription": "Automatically created Security Group for ELB testStudioSvcLBC5D08617",
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow from anyone on port 80",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80,
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "StudioSvcLBSecurityGrouptotestStudioSvcServiceSecurityGroup9693329130000CD56DFF": Object {
      "Properties": Object {
        "Description": "Load balancer to target",
        "DestinationSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "StudioSvcServiceSecurityGroupEF26159E",
            "GroupId",
          ],
        },
        "FromPort": 3000,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "StudioSvcLBSecurityGroup7B90B4C7",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "ToPort": 3000,
      },
      "Type": "AWS::EC2::SecurityGroupEgress",
    },
    "StudioSvcLBSecurityGrouptotestStudioSvcServiceSecurityGroup9693329199013F517CF1": Object {
      "Properties": Object {
        "Description": "ALB healthcheck",
        "DestinationSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "StudioSvcServiceSecurityGroupEF26159E",
            "GroupId",
          ],
        },
        "FromPort": 9901,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "StudioSvcLBSecurityGroup7B90B4C7",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "ToPort": 9901,
      },
      "Type": "AWS::EC2::SecurityGroupEgress",
    },
    "StudioSvcService8A78A16D": Object {
      "DependsOn": Array [
        "StudioSvcLBPublicListenerECSGroup48C5F9E8",
        "StudioSvcLBPublicListener4C14E701",
      ],
      "Properties": Object {
        "CapacityProviderStrategy": Array [
          Object {
            "Base": 1,
            "CapacityProvider": "FARGATE",
            "Weight": 1,
          },
          Object {
            "Base": 0,
            "CapacityProvider": "FARGATE_SPOT",
            "Weight": 0,
          },
        ],
        "Cluster": Object {
          "Ref": "ClusterEB0386A7",
        },
        "DeploymentConfiguration": Object {
          "DeploymentCircuitBreaker": Object {
            "Enable": true,
            "Rollback": true,
          },
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "DeploymentController": Object {
          "Type": "ECS",
        },
        "EnableECSManagedTags": false,
        "HealthCheckGracePeriodSeconds": 10,
        "LoadBalancers": Array [
          Object {
            "ContainerName": "app",
            "ContainerPort": 3000,
            "TargetGroupArn": Object {
              "Ref": "StudioSvcLBPublicListenerECSGroup48C5F9E8",
            },
          },
        ],
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "StudioSvcServiceSecurityGroupEF26159E",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Array [
              Object {
                "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
              },
              Object {
                "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
              },
            ],
          },
        },
        "ServiceRegistries": Array [
          Object {
            "RegistryArn": Object {
              "Fn::GetAtt": Array [
                "StudioSvcServiceCloudmapServiceFC9B208A",
                "Arn",
              ],
            },
          },
        ],
        "TaskDefinition": Object {
          "Ref": "StudioTaskDefinitionFEEA269A",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "StudioSvcServiceCloudmapServiceFC9B208A": Object {
      "Properties": Object {
        "DnsConfig": Object {
          "DnsRecords": Array [
            Object {
              "TTL": 10,
              "Type": "A",
            },
          ],
          "NamespaceId": Object {
            "Fn::GetAtt": Array [
              "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
              "Id",
            ],
          },
          "RoutingPolicy": "MULTIVALUE",
        },
        "HealthCheckCustomConfig": Object {
          "FailureThreshold": 1,
        },
        "Name": "studio",
        "NamespaceId": Object {
          "Fn::GetAtt": Array [
            "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
            "Id",
          ],
        },
      },
      "Type": "AWS::ServiceDiscovery::Service",
    },
    "StudioSvcServiceSecurityGroupEF26159E": Object {
      "Properties": Object {
        "GroupDescription": "test/Studio/Svc/Service/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "StudioSvcServiceSecurityGroupfromtestStudioSvcLBSecurityGroup76CC4F2830006E37ACFB": Object {
      "Properties": Object {
        "Description": "Load balancer to target",
        "FromPort": 3000,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "StudioSvcServiceSecurityGroupEF26159E",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "StudioSvcLBSecurityGroup7B90B4C7",
            "GroupId",
          ],
        },
        "ToPort": 3000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "StudioSvcServiceSecurityGroupfromtestStudioSvcLBSecurityGroup76CC4F289901FD3AB1E3": Object {
      "Properties": Object {
        "Description": "ALB healthcheck",
        "FromPort": 9901,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "StudioSvcServiceSecurityGroupEF26159E",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "StudioSvcLBSecurityGroup7B90B4C7",
            "GroupId",
          ],
        },
        "ToPort": 9901,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "StudioTaskDefinitionExecutionRoleBBC69CFE": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "StudioTaskDefinitionExecutionRoleDefaultPolicy1DF00583": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "StudioTaskDefinitionappLogGroupD6A01F3C",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "DBSecretAttachment1CF7DE47",
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "SupabaseJwtSecret4CEDF760",
              },
            },
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "StudioTaskDefinitionenvoyLogGroupBF83B5F7",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "StudioTaskDefinitionxraydaemonLogGroup95EDBB55",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "StudioTaskDefinitionExecutionRoleDefaultPolicy1DF00583",
        "Roles": Array [
          Object {
            "Ref": "StudioTaskDefinitionExecutionRoleBBC69CFE",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "StudioTaskDefinitionFEEA269A": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "DependsOn": Array [
              Object {
                "Condition": "HEALTHY",
                "ContainerName": "envoy",
              },
            ],
            "Environment": Array [
              Object {
                "Name": "STUDIO_PG_META_URL",
                "Value": "http://meta.supabase.local:8080",
              },
              Object {
                "Name": "SUPABASE_URL",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "https://",
                      Object {
                        "Fn::GetAtt": Array [
                          "CDN2330F4C0",
                          "DomainName",
                        ],
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "SUPABASE_REST_URL",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "https://",
                      Object {
                        "Fn::GetAtt": Array [
                          "CDN2330F4C0",
                          "DomainName",
                        ],
                      },
                      "/rest/v1/",
                    ],
                  ],
                },
              },
            ],
            "Essential": true,
            "Image": "supabase/studio:latest",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "StudioTaskDefinitionappLogGroupD6A01F3C",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "Name": "app",
            "PortMappings": Array [
              Object {
                "ContainerPort": 3000,
                "Protocol": "tcp",
              },
            ],
            "Secrets": Array [
              Object {
                "Name": "POSTGRES_PASSWORD",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DBSecretAttachment1CF7DE47",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "SUPABASE_ANON_KEY",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "SupabaseJwtSecret4CEDF760",
                      },
                      ":anon_key::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "SUPABASE_SERVICE_KEY",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "SupabaseJwtSecret4CEDF760",
                      },
                      ":service_role_key::",
                    ],
                  ],
                },
              },
            ],
            "Ulimits": Array [
              Object {
                "HardLimit": 65536,
                "Name": "nofile",
                "SoftLimit": 65536,
              },
            ],
          },
          Object {
            "Cpu": 80,
            "Environment": Array [
              Object {
                "Name": "APPMESH_VIRTUAL_NODE_NAME",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "mesh/",
                      Object {
                        "Fn::GetAtt": Array [
                          "Mesh73A573F6",
                          "MeshName",
                        ],
                      },
                      "/virtualNode/",
                      Object {
                        "Fn::GetAtt": Array [
                          "StudioVirtualNode46AA78DE",
                          "VirtualNodeName",
                        ],
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "ENVOY_ADMIN_ACCESS_LOG_FILE",
                "Value": "/dev/null",
              },
              Object {
                "Name": "ENABLE_ENVOY_XRAY_TRACING",
                "Value": "1",
              },
              Object {
                "Name": "XRAY_SAMPLING_RATE",
                "Value": "1.00",
              },
            ],
            "Essential": true,
            "HealthCheck": Object {
              "Command": Array [
                "CMD-SHELL",
                "curl -s http://localhost:9901/server_info | grep state | grep -q LIVE",
              ],
              "Interval": 5,
              "Retries": 3,
              "StartPeriod": 10,
              "Timeout": 2,
            },
            "Image": "public.ecr.aws/appmesh/aws-appmesh-envoy:v1.22.2.0-prod",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "StudioTaskDefinitionenvoyLogGroupBF83B5F7",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "MemoryReservation": 128,
            "Name": "envoy",
            "Ulimits": Array [
              Object {
                "HardLimit": 1024000,
                "Name": "nofile",
                "SoftLimit": 1024000,
              },
            ],
            "User": "1337",
          },
          Object {
            "Cpu": 16,
            "Essential": true,
            "Image": "public.ecr.aws/xray/aws-xray-daemon:latest",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "StudioTaskDefinitionxraydaemonLogGroup95EDBB55",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "MemoryReservation": 64,
            "Name": "xray-daemon",
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "StudioTaskDefinitionExecutionRoleBBC69CFE",
            "Arn",
          ],
        },
        "Family": "testStudioTaskDefinition574A138A",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "ProxyConfiguration": Object {
          "ContainerName": "envoy",
          "ProxyConfigurationProperties": Array [
            Object {
              "Name": "IgnoredUID",
              "Value": "1337",
            },
            Object {
              "Name": "IgnoredGID",
              "Value": "1338",
            },
            Object {
              "Name": "AppPorts",
              "Value": "3000",
            },
            Object {
              "Name": "ProxyIngressPort",
              "Value": "15000",
            },
            Object {
              "Name": "ProxyEgressPort",
              "Value": "15001",
            },
            Object {
              "Name": "EgressIgnoredIPs",
              "Value": "169.254.170.2,169.254.169.254",
            },
          ],
          "Type": "APPMESH",
        },
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "RuntimePlatform": Object {
          "CpuArchitecture": "ARM64",
        },
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "StudioTaskDefinitionTaskRole4FE9D685",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "StudioTaskDefinitionTaskRole4FE9D685": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          "arn:aws:iam::aws:policy/AWSAppMeshEnvoyAccess",
          "arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess",
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "StudioTaskDefinitionappLogGroupD6A01F3C": Object {
      "DeletionPolicy": "Retain",
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "StudioTaskDefinitionenvoyLogGroupBF83B5F7": Object {
      "DeletionPolicy": "Retain",
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "StudioTaskDefinitionxraydaemonLogGroup95EDBB55": Object {
      "DeletionPolicy": "Retain",
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "StudioVirtualNode46AA78DE": Object {
      "Properties": Object {
        "MeshName": Object {
          "Fn::GetAtt": Array [
            "Mesh73A573F6",
            "MeshName",
          ],
        },
        "Spec": Object {
          "Backends": Array [
            Object {
              "VirtualService": Object {
                "VirtualServiceName": "meta.supabase.local",
              },
            },
          ],
          "Listeners": Array [
            Object {
              "PortMapping": Object {
                "Port": 3000,
                "Protocol": "http",
              },
            },
          ],
          "Logging": Object {
            "AccessLog": Object {
              "File": Object {
                "Path": "/dev/stdout",
              },
            },
          },
          "ServiceDiscovery": Object {
            "AWSCloudMap": Object {
              "NamespaceName": "supabase.local",
              "ServiceName": Object {
                "Fn::GetAtt": Array [
                  "StudioSvcServiceCloudmapServiceFC9B208A",
                  "Name",
                ],
              },
            },
          },
        },
        "VirtualNodeName": "Studio",
      },
      "Type": "AWS::AppMesh::VirtualNode",
    },
    "StudioVirtualService81E3869F": Object {
      "Properties": Object {
        "MeshName": Object {
          "Fn::GetAtt": Array [
            "Mesh73A573F6",
            "MeshName",
          ],
        },
        "Spec": Object {
          "Provider": Object {
            "VirtualNode": Object {
              "VirtualNodeName": Object {
                "Fn::GetAtt": Array [
                  "StudioVirtualNode46AA78DE",
                  "VirtualNodeName",
                ],
              },
            },
          },
        },
        "VirtualServiceName": "studio.supabase.local",
      },
      "Type": "AWS::AppMesh::VirtualService",
    },
    "SupabaseJwtSecret4CEDF760": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "Description": "Supabase - Json Web Token Secret",
        "GenerateSecretString": Object {
          "ExcludePunctuation": true,
          "GenerateStringKey": "jwt_secret",
          "PasswordLength": 64,
          "SecretStringTemplate": "{\\"jwt_secret\\":\\"your-super-secret-jwt-token-with-at-least-32-characters-long\\"}",
        },
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "SupabaseJwtSecretGeneratorFunctionAA45459F": Object {
      "DependsOn": Array [
        "SupabaseJwtSecretGeneratorFunctionServiceRoleDefaultPolicyF7D37D62",
        "SupabaseJwtSecretGeneratorFunctionServiceRole1EA27662",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "09c98a199f76e2d3d59a05f9ce174e8b8ba0fac707e02649d7cb9947a43990f0.zip",
        },
        "Description": "Supabase - JWT Generator",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "SupabaseJwtSecretGeneratorFunctionServiceRole1EA27662",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "SupabaseJwtSecretGeneratorFunctionServiceRole1EA27662": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SupabaseJwtSecretGeneratorFunctionServiceRoleDefaultPolicyF7D37D62": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "secretsmanager:PutSecretValue",
                "secretsmanager:UpdateSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "SupabaseJwtSecret4CEDF760",
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "SupabaseJwtSecret4CEDF760",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SupabaseJwtSecretGeneratorFunctionServiceRoleDefaultPolicyF7D37D62",
        "Roles": Array [
          Object {
            "Ref": "SupabaseJwtSecretGeneratorFunctionServiceRole1EA27662",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SupabaseJwtSecretJWTC70DB0F1": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "SecretId": Object {
          "Ref": "SupabaseJwtSecret4CEDF760",
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "SupabaseJwtSecretProviderframeworkonEvent9D39B51B",
            "Arn",
          ],
        },
      },
      "Type": "Custom::SupabaseJWT",
      "UpdateReplacePolicy": "Delete",
    },
    "SupabaseJwtSecretProviderframeworkonEvent9D39B51B": Object {
      "DependsOn": Array [
        "SupabaseJwtSecretProviderframeworkonEventServiceRoleDefaultPolicyD320F8A5",
        "SupabaseJwtSecretProviderframeworkonEventServiceRoleE0B51369",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "e7c95e1a12d903d913ebdd526c735f1ac58b2024882a5562110221fe685ebe85.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (test/SupabaseJwtSecret/Provider)",
        "Environment": Object {
          "Variables": Object {
            "USER_ON_EVENT_FUNCTION_ARN": Object {
              "Fn::GetAtt": Array [
                "SupabaseJwtSecretGeneratorFunctionAA45459F",
                "Arn",
              ],
            },
          },
        },
        "Handler": "framework.onEvent",
        "Role": Object {
          "Fn::GetAtt": Array [
            "SupabaseJwtSecretProviderframeworkonEventServiceRoleE0B51369",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "SupabaseJwtSecretProviderframeworkonEventServiceRoleDefaultPolicyD320F8A5": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "SupabaseJwtSecretGeneratorFunctionAA45459F",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "SupabaseJwtSecretGeneratorFunctionAA45459F",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SupabaseJwtSecretProviderframeworkonEventServiceRoleDefaultPolicyD320F8A5",
        "Roles": Array [
          Object {
            "Ref": "SupabaseJwtSecretProviderframeworkonEventServiceRoleE0B51369",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SupabaseJwtSecretProviderframeworkonEventServiceRoleE0B51369": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SupabaseMailCheckWorkMailOrgFunction6C80E623": Object {
      "DependsOn": Array [
        "SupabaseMailCheckWorkMailOrgFunctionServiceRoleDefaultPolicyD20E52AA",
        "SupabaseMailCheckWorkMailOrgFunctionServiceRole7B5DBA72",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "93991e1e75ef47660fd52f30057a1e6e42526460850a9172ec5fd54a71b8e027.zip",
        },
        "Description": "Supabase - Check state WorkMail Org Function",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "SupabaseMailCheckWorkMailOrgFunctionServiceRole7B5DBA72",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "SupabaseMailCheckWorkMailOrgFunctionServiceRole7B5DBA72": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SupabaseMailCheckWorkMailOrgFunctionServiceRoleDefaultPolicyD20E52AA": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "workmail:DescribeOrganization",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SupabaseMailCheckWorkMailOrgFunctionServiceRoleDefaultPolicyD20E52AA",
        "Roles": Array [
          Object {
            "Ref": "SupabaseMailCheckWorkMailOrgFunctionServiceRole7B5DBA72",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SupabaseMailCreateWorkMailOrgFunction65AFD240": Object {
      "DependsOn": Array [
        "SupabaseMailCreateWorkMailOrgFunctionServiceRoleDefaultPolicyBE25F8EA",
        "SupabaseMailCreateWorkMailOrgFunctionServiceRoleD8B016DF",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "4432a02198fed87df66c14953f6f885e81713cd655c1083b0fffeac0b1c383ba.zip",
        },
        "Description": "Supabase - Create WorkMail Org Function",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "SupabaseMailCreateWorkMailOrgFunctionServiceRoleD8B016DF",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "SupabaseMailCreateWorkMailOrgFunctionServiceRoleD8B016DF": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SupabaseMailCreateWorkMailOrgFunctionServiceRoleDefaultPolicyBE25F8EA": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "workmail:DescribeOrganization",
                "workmail:CreateOrganization",
                "workmail:DeleteOrganization",
                "ses:DescribeActiveReceiptRuleSet",
                "ses:SetActiveReceiptRuleSet",
                "ses:CreateReceiptRuleSet",
                "ses:CreateReceiptRule",
                "ses:DeleteReceiptRule",
                "ses:VerifyDomainIdentity",
                "ses:VerifyDomainDkim",
                "ses:SetIdentityEmailNotificationEnabled",
                "ses:PutIdentityPolicy",
                "ses:DeleteIdentityPolicy",
                "ses:DeleteIdentity",
                "ds:DescribeDirectories",
                "ds:CreateIdentityPoolDirectory",
                "ds:DeleteDirectory",
                "ds:ListAuthorizedApplications",
                "ds:CreateAlias",
                "ds:AuthorizeApplication",
                "ds:UnauthorizeApplication",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SupabaseMailCreateWorkMailOrgFunctionServiceRoleDefaultPolicyBE25F8EA",
        "Roles": Array [
          Object {
            "Ref": "SupabaseMailCreateWorkMailOrgFunctionServiceRoleD8B016DF",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SupabaseMailCreateWorkMailOrgProviderframeworkisCompleteB366BC92": Object {
      "DependsOn": Array [
        "SupabaseMailCreateWorkMailOrgProviderframeworkisCompleteServiceRoleDefaultPolicy3FDC3479",
        "SupabaseMailCreateWorkMailOrgProviderframeworkisCompleteServiceRole86378AC4",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "e7c95e1a12d903d913ebdd526c735f1ac58b2024882a5562110221fe685ebe85.zip",
        },
        "Description": "AWS CDK resource provider framework - isComplete (test/SupabaseMail/CreateWorkMailOrgProvider)",
        "Environment": Object {
          "Variables": Object {
            "USER_IS_COMPLETE_FUNCTION_ARN": Object {
              "Fn::GetAtt": Array [
                "SupabaseMailCheckWorkMailOrgFunction6C80E623",
                "Arn",
              ],
            },
            "USER_ON_EVENT_FUNCTION_ARN": Object {
              "Fn::GetAtt": Array [
                "SupabaseMailCreateWorkMailOrgFunction65AFD240",
                "Arn",
              ],
            },
          },
        },
        "Handler": "framework.isComplete",
        "Role": Object {
          "Fn::GetAtt": Array [
            "SupabaseMailCreateWorkMailOrgProviderframeworkisCompleteServiceRole86378AC4",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "SupabaseMailCreateWorkMailOrgProviderframeworkisCompleteServiceRole86378AC4": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SupabaseMailCreateWorkMailOrgProviderframeworkisCompleteServiceRoleDefaultPolicy3FDC3479": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "SupabaseMailCreateWorkMailOrgFunction65AFD240",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "SupabaseMailCreateWorkMailOrgFunction65AFD240",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "SupabaseMailCheckWorkMailOrgFunction6C80E623",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "SupabaseMailCheckWorkMailOrgFunction6C80E623",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SupabaseMailCreateWorkMailOrgProviderframeworkisCompleteServiceRoleDefaultPolicy3FDC3479",
        "Roles": Array [
          Object {
            "Ref": "SupabaseMailCreateWorkMailOrgProviderframeworkisCompleteServiceRole86378AC4",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SupabaseMailCreateWorkMailOrgProviderframeworkonEvent62EFE440": Object {
      "DependsOn": Array [
        "SupabaseMailCreateWorkMailOrgProviderframeworkonEventServiceRoleDefaultPolicyB7BDB818",
        "SupabaseMailCreateWorkMailOrgProviderframeworkonEventServiceRole10A485C8",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "e7c95e1a12d903d913ebdd526c735f1ac58b2024882a5562110221fe685ebe85.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (test/SupabaseMail/CreateWorkMailOrgProvider)",
        "Environment": Object {
          "Variables": Object {
            "USER_IS_COMPLETE_FUNCTION_ARN": Object {
              "Fn::GetAtt": Array [
                "SupabaseMailCheckWorkMailOrgFunction6C80E623",
                "Arn",
              ],
            },
            "USER_ON_EVENT_FUNCTION_ARN": Object {
              "Fn::GetAtt": Array [
                "SupabaseMailCreateWorkMailOrgFunction65AFD240",
                "Arn",
              ],
            },
            "WAITER_STATE_MACHINE_ARN": Object {
              "Ref": "SupabaseMailCreateWorkMailOrgProviderwaiterstatemachineBDC7731B",
            },
          },
        },
        "Handler": "framework.onEvent",
        "Role": Object {
          "Fn::GetAtt": Array [
            "SupabaseMailCreateWorkMailOrgProviderframeworkonEventServiceRole10A485C8",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "SupabaseMailCreateWorkMailOrgProviderframeworkonEventServiceRole10A485C8": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SupabaseMailCreateWorkMailOrgProviderframeworkonEventServiceRoleDefaultPolicyB7BDB818": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "SupabaseMailCreateWorkMailOrgFunction65AFD240",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "SupabaseMailCreateWorkMailOrgFunction65AFD240",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "SupabaseMailCheckWorkMailOrgFunction6C80E623",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "SupabaseMailCheckWorkMailOrgFunction6C80E623",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "SupabaseMailCreateWorkMailOrgProviderwaiterstatemachineBDC7731B",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SupabaseMailCreateWorkMailOrgProviderframeworkonEventServiceRoleDefaultPolicyB7BDB818",
        "Roles": Array [
          Object {
            "Ref": "SupabaseMailCreateWorkMailOrgProviderframeworkonEventServiceRole10A485C8",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SupabaseMailCreateWorkMailOrgProviderframeworkonTimeout159AA7FF": Object {
      "DependsOn": Array [
        "SupabaseMailCreateWorkMailOrgProviderframeworkonTimeoutServiceRoleDefaultPolicyBF6B57B8",
        "SupabaseMailCreateWorkMailOrgProviderframeworkonTimeoutServiceRole6C5EB94C",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "e7c95e1a12d903d913ebdd526c735f1ac58b2024882a5562110221fe685ebe85.zip",
        },
        "Description": "AWS CDK resource provider framework - onTimeout (test/SupabaseMail/CreateWorkMailOrgProvider)",
        "Environment": Object {
          "Variables": Object {
            "USER_IS_COMPLETE_FUNCTION_ARN": Object {
              "Fn::GetAtt": Array [
                "SupabaseMailCheckWorkMailOrgFunction6C80E623",
                "Arn",
              ],
            },
            "USER_ON_EVENT_FUNCTION_ARN": Object {
              "Fn::GetAtt": Array [
                "SupabaseMailCreateWorkMailOrgFunction65AFD240",
                "Arn",
              ],
            },
          },
        },
        "Handler": "framework.onTimeout",
        "Role": Object {
          "Fn::GetAtt": Array [
            "SupabaseMailCreateWorkMailOrgProviderframeworkonTimeoutServiceRole6C5EB94C",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "SupabaseMailCreateWorkMailOrgProviderframeworkonTimeoutServiceRole6C5EB94C": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SupabaseMailCreateWorkMailOrgProviderframeworkonTimeoutServiceRoleDefaultPolicyBF6B57B8": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "SupabaseMailCreateWorkMailOrgFunction65AFD240",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "SupabaseMailCreateWorkMailOrgFunction65AFD240",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "SupabaseMailCheckWorkMailOrgFunction6C80E623",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "SupabaseMailCheckWorkMailOrgFunction6C80E623",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SupabaseMailCreateWorkMailOrgProviderframeworkonTimeoutServiceRoleDefaultPolicyBF6B57B8",
        "Roles": Array [
          Object {
            "Ref": "SupabaseMailCreateWorkMailOrgProviderframeworkonTimeoutServiceRole6C5EB94C",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SupabaseMailCreateWorkMailOrgProviderwaiterstatemachineBDC7731B": Object {
      "DependsOn": Array [
        "SupabaseMailCreateWorkMailOrgProviderwaiterstatemachineRoleDefaultPolicy75ED878D",
        "SupabaseMailCreateWorkMailOrgProviderwaiterstatemachineRoleA3022756",
      ],
      "Properties": Object {
        "DefinitionString": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{\\"StartAt\\":\\"framework-isComplete-task\\",\\"States\\":{\\"framework-isComplete-task\\":{\\"End\\":true,\\"Retry\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"IntervalSeconds\\":5,\\"MaxAttempts\\":360,\\"BackoffRate\\":1}],\\"Catch\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"Next\\":\\"framework-onTimeout-task\\"}],\\"Type\\":\\"Task\\",\\"Resource\\":\\"",
              Object {
                "Fn::GetAtt": Array [
                  "SupabaseMailCreateWorkMailOrgProviderframeworkisCompleteB366BC92",
                  "Arn",
                ],
              },
              "\\"},\\"framework-onTimeout-task\\":{\\"End\\":true,\\"Type\\":\\"Task\\",\\"Resource\\":\\"",
              Object {
                "Fn::GetAtt": Array [
                  "SupabaseMailCreateWorkMailOrgProviderframeworkonTimeout159AA7FF",
                  "Arn",
                ],
              },
              "\\"}}}",
            ],
          ],
        },
        "RoleArn": Object {
          "Fn::GetAtt": Array [
            "SupabaseMailCreateWorkMailOrgProviderwaiterstatemachineRoleA3022756",
            "Arn",
          ],
        },
      },
      "Type": "AWS::StepFunctions::StateMachine",
    },
    "SupabaseMailCreateWorkMailOrgProviderwaiterstatemachineRoleA3022756": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": Object {
                  "Fn::FindInMap": Array [
                    "ServiceprincipalMap",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    "states",
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "SupabaseMailCreateWorkMailOrgProviderwaiterstatemachineRoleDefaultPolicy75ED878D": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "SupabaseMailCreateWorkMailOrgProviderframeworkisCompleteB366BC92",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "SupabaseMailCreateWorkMailOrgProviderframeworkisCompleteB366BC92",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "SupabaseMailCreateWorkMailOrgProviderframeworkonTimeout159AA7FF",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "SupabaseMailCreateWorkMailOrgProviderframeworkonTimeout159AA7FF",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SupabaseMailCreateWorkMailOrgProviderwaiterstatemachineRoleDefaultPolicy75ED878D",
        "Roles": Array [
          Object {
            "Ref": "SupabaseMailCreateWorkMailOrgProviderwaiterstatemachineRoleA3022756",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SupabaseMailCreateWorkMailUserFunction7382C596": Object {
      "DependsOn": Array [
        "SupabaseMailCreateWorkMailUserFunctionServiceRoleDefaultPolicy7E87E06A",
        "SupabaseMailCreateWorkMailUserFunctionServiceRoleFCE02860",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "f1105297940cc1205923c3e10af81e402061ae89b25a2d313dcc22016ad15dd2.zip",
        },
        "Description": "Supabase - Create WorkMail User Function",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "SupabaseMailCreateWorkMailUserFunctionServiceRoleFCE02860",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "SupabaseMailCreateWorkMailUserFunctionServiceRoleDefaultPolicy7E87E06A": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "workmail:CreateUser",
                "workmail:DeleteUser",
                "workmail:RegisterToWorkMail",
                "workmail:DeregisterFromWorkMail",
                "ses:GetIdentityVerificationAttributes",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "SupabaseMailSecret777E0288",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SupabaseMailCreateWorkMailUserFunctionServiceRoleDefaultPolicy7E87E06A",
        "Roles": Array [
          Object {
            "Ref": "SupabaseMailCreateWorkMailUserFunctionServiceRoleFCE02860",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SupabaseMailCreateWorkMailUserFunctionServiceRoleFCE02860": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SupabaseMailCreateWorkMailUserProviderframeworkonEvent8F95C17F": Object {
      "DependsOn": Array [
        "SupabaseMailCreateWorkMailUserProviderframeworkonEventServiceRoleDefaultPolicy2CD1D6FD",
        "SupabaseMailCreateWorkMailUserProviderframeworkonEventServiceRole536D1387",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "e7c95e1a12d903d913ebdd526c735f1ac58b2024882a5562110221fe685ebe85.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (test/SupabaseMail/CreateWorkMailUserProvider)",
        "Environment": Object {
          "Variables": Object {
            "USER_ON_EVENT_FUNCTION_ARN": Object {
              "Fn::GetAtt": Array [
                "SupabaseMailCreateWorkMailUserFunction7382C596",
                "Arn",
              ],
            },
          },
        },
        "Handler": "framework.onEvent",
        "Role": Object {
          "Fn::GetAtt": Array [
            "SupabaseMailCreateWorkMailUserProviderframeworkonEventServiceRole536D1387",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "SupabaseMailCreateWorkMailUserProviderframeworkonEventServiceRole536D1387": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SupabaseMailCreateWorkMailUserProviderframeworkonEventServiceRoleDefaultPolicy2CD1D6FD": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "SupabaseMailCreateWorkMailUserFunction7382C596",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "SupabaseMailCreateWorkMailUserFunction7382C596",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SupabaseMailCreateWorkMailUserProviderframeworkonEventServiceRoleDefaultPolicy2CD1D6FD",
        "Roles": Array [
          Object {
            "Ref": "SupabaseMailCreateWorkMailUserProviderframeworkonEventServiceRole536D1387",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SupabaseMailOrganization367310F9": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "Alias": Object {
          "Fn::Join": Array [
            "",
            Array [
              "supabase-",
              Object {
                "Ref": "AWS::AccountId",
              },
            ],
          ],
        },
        "Region": "us-west-2",
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "SupabaseMailCreateWorkMailOrgProviderframeworkonEvent62EFE440",
            "Arn",
          ],
        },
      },
      "Type": "Custom::WorkMailOrganization",
      "UpdateReplacePolicy": "Delete",
    },
    "SupabaseMailSecret777E0288": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "Description": "Supabase - WorkMail SMTP Secret",
        "GenerateSecretString": Object {
          "GenerateStringKey": "password",
          "PasswordLength": 64,
          "SecretStringTemplate": Object {
            "Fn::Join": Array [
              "",
              Array [
                "{\\"host\\":\\"smtp.mail.us-west-2.awsapps.com\\",\\"port\\":\\"465\\",\\"username\\":\\"info@supabase-",
                Object {
                  "Ref": "AWS::AccountId",
                },
                ".awsapps.com\\",\\"password\\":\\"your-super-secret-smtp-password\\",\\"email\\":\\"info@supabase-",
                Object {
                  "Ref": "AWS::AccountId",
                },
                ".awsapps.com\\"}",
              ],
            ],
          },
        },
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "SupabaseMailUser20B5147B": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "OrganizationId": Object {
          "Ref": "SupabaseMailOrganization367310F9",
        },
        "Region": "us-west-2",
        "SecretId": Object {
          "Ref": "SupabaseMailSecret777E0288",
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "SupabaseMailCreateWorkMailUserProviderframeworkonEvent8F95C17F",
            "Arn",
          ],
        },
      },
      "Type": "Custom::WorkMailUser",
      "UpdateReplacePolicy": "Delete",
    },
    "SupabaseMailVirtualNode6D9ABCE1": Object {
      "Properties": Object {
        "MeshName": Object {
          "Fn::GetAtt": Array [
            "Mesh73A573F6",
            "MeshName",
          ],
        },
        "Spec": Object {
          "Listeners": Array [
            Object {
              "PortMapping": Object {
                "Port": 465,
                "Protocol": "tcp",
              },
            },
          ],
          "ServiceDiscovery": Object {
            "DNS": Object {
              "Hostname": "smtp.mail.us-west-2.awsapps.com",
              "ResponseType": "ENDPOINTS",
            },
          },
        },
        "VirtualNodeName": "WorkMail",
      },
      "Type": "AWS::AppMesh::VirtualNode",
    },
    "SupabaseMailVirtualService6FFA81D4": Object {
      "Properties": Object {
        "MeshName": Object {
          "Fn::GetAtt": Array [
            "Mesh73A573F6",
            "MeshName",
          ],
        },
        "Spec": Object {
          "Provider": Object {
            "VirtualNode": Object {
              "VirtualNodeName": Object {
                "Fn::GetAtt": Array [
                  "SupabaseMailVirtualNode6D9ABCE1",
                  "VirtualNodeName",
                ],
              },
            },
          },
        },
        "VirtualServiceName": "smtp.mail.us-west-2.awsapps.com",
      },
      "Type": "AWS::AppMesh::VirtualService",
    },
    "VPCB9E5F0B4": Object {
      "Properties": Object {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/VPC",
          },
        ],
      },
      "Type": "AWS::EC2::VPC",
    },
    "VPCIGWB7E252D3": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/VPC",
          },
        ],
      },
      "Type": "AWS::EC2::InternetGateway",
    },
    "VPCPrivateSubnet1DefaultRouteAE1D6490": Object {
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": Object {
          "Ref": "VPCPublicSubnet1NATGatewayE0556630",
        },
        "RouteTableId": Object {
          "Ref": "VPCPrivateSubnet1RouteTableBE8A6027",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VPCPrivateSubnet1RouteTableAssociation347902D1": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VPCPrivateSubnet1RouteTableBE8A6027",
        },
        "SubnetId": Object {
          "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VPCPrivateSubnet1RouteTableBE8A6027": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/VPC/PrivateSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VPCPrivateSubnet1Subnet8BCA10E0": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            0,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.128.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          Object {
            "Key": "Name",
            "Value": "test/VPC/PrivateSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VPCPrivateSubnet2DefaultRouteF4F5CFD2": Object {
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": Object {
          "Ref": "VPCPublicSubnet1NATGatewayE0556630",
        },
        "RouteTableId": Object {
          "Ref": "VPCPrivateSubnet2RouteTable0A19E10E",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VPCPrivateSubnet2RouteTable0A19E10E": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/VPC/PrivateSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VPCPrivateSubnet2RouteTableAssociation0C73D413": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VPCPrivateSubnet2RouteTable0A19E10E",
        },
        "SubnetId": Object {
          "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VPCPrivateSubnet2SubnetCFCDAA7A": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            1,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.192.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          Object {
            "Key": "Name",
            "Value": "test/VPC/PrivateSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VPCPublicSubnet1DefaultRoute91CEF279": Object {
      "DependsOn": Array [
        "VPCVPCGW99B986DC",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "VPCIGWB7E252D3",
        },
        "RouteTableId": Object {
          "Ref": "VPCPublicSubnet1RouteTableFEE4B781",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VPCPublicSubnet1EIP6AD938E8": Object {
      "Properties": Object {
        "Domain": "vpc",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/VPC/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::EIP",
    },
    "VPCPublicSubnet1NATGatewayE0556630": Object {
      "Properties": Object {
        "AllocationId": Object {
          "Fn::GetAtt": Array [
            "VPCPublicSubnet1EIP6AD938E8",
            "AllocationId",
          ],
        },
        "SubnetId": Object {
          "Ref": "VPCPublicSubnet1SubnetB4246D30",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/VPC/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::NatGateway",
    },
    "VPCPublicSubnet1RouteTableAssociation0B0896DC": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VPCPublicSubnet1RouteTableFEE4B781",
        },
        "SubnetId": Object {
          "Ref": "VPCPublicSubnet1SubnetB4246D30",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VPCPublicSubnet1RouteTableFEE4B781": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/VPC/PublicSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VPCPublicSubnet1SubnetB4246D30": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            0,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.0.0/18",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "test/VPC/PublicSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VPCPublicSubnet2DefaultRouteB7481BBA": Object {
      "DependsOn": Array [
        "VPCVPCGW99B986DC",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "VPCIGWB7E252D3",
        },
        "RouteTableId": Object {
          "Ref": "VPCPublicSubnet2RouteTable6F1A15F1",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VPCPublicSubnet2RouteTable6F1A15F1": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/VPC/PublicSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VPCPublicSubnet2RouteTableAssociation5A808732": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VPCPublicSubnet2RouteTable6F1A15F1",
        },
        "SubnetId": Object {
          "Ref": "VPCPublicSubnet2Subnet74179F39",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VPCPublicSubnet2Subnet74179F39": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            1,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.64.0/18",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "test/VPC/PublicSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VPCVPCGW99B986DC": Object {
      "Properties": Object {
        "InternetGatewayId": Object {
          "Ref": "VPCIGWB7E252D3",
        },
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::VPCGatewayAttachment",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
