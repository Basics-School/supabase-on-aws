// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Snapshot 1`] = `
Object {
  "Conditions": Object {
    "DatabaseMultiAzCondition82AA721B": Object {
      "Fn::Equals": Array [
        Object {
          "Ref": "DatabaseMultiAz04923704",
        },
        "true",
      ],
    },
    "StudioHttpCondition14AD1D44": Object {
      "Fn::Equals": Array [
        Object {
          "Ref": "StudioCertificateArnParameterEBA639E6",
        },
        "arn:aws:acm:us-west-2:123456789012:certificate/no-cert-it-is-not-secure-to-use-http",
      ],
    },
  },
  "Description": "Self-hosted Supabase on AWS",
  "Metadata": Object {
    "AWS::CloudFormation::Interface": Object {
      "ParameterGroups": Array [
        Object {
          "Label": Object {
            "default": "Supabase - Auth Settings",
          },
          "Parameters": Array [
            "DisableSignupParameter",
            "SiteUrlParameter",
            "RedirectUrlsParameter",
            "JwtExpiryLimitParameter",
            "PasswordMinLengthParameter",
          ],
        },
        Object {
          "Label": Object {
            "default": "Supabase - Auth E-mail Settings",
          },
          "Parameters": Array [
            "SmtpAdminEmailParameter",
            "SmtpSenderNameParameter",
          ],
        },
        Object {
          "Label": Object {
            "default": "Platform Settings",
          },
          "Parameters": Array [
            "SesRegionParameter",
            "DatabaseMultiAz04923704",
          ],
        },
        Object {
          "Label": Object {
            "default": "Supabase - API Versions",
          },
          "Parameters": Array [
            "AuthApiVersionParameter",
            "RestApiVersionParameter",
            "RealtimeApiVersionParameter",
            "StorageApiVersionParameter",
            "PostgresMetaApiVersionParameter",
          ],
        },
        Object {
          "Label": Object {
            "default": "Supabase - Studio Settings",
          },
          "Parameters": Array [
            "StudioVersionParameter",
            "StudioCertificateArnParameterEBA639E6",
          ],
        },
        Object {
          "Label": Object {
            "default": "Supabase - External Auth Provider - Google",
          },
          "Parameters": Array [
            "GoogleEnabledParameterC8D211C0",
            "GoogleClientIdParameter10AB1CB7",
            "GoogleSecretParameterD567D187",
          ],
        },
        Object {
          "Label": Object {
            "default": "Supabase - External Auth Provider - Facebook",
          },
          "Parameters": Array [
            "FacebookEnabledParameter04E6667E",
            "FacebookClientIdParameterF8F9E3CB",
            "FacebookSecretParameter0FEABC80",
          ],
        },
        Object {
          "Label": Object {
            "default": "Supabase - External Auth Provider - Twitter",
          },
          "Parameters": Array [
            "TwitterEnabledParameter355D114D",
            "TwitterClientIdParameterE2950332",
            "TwitterSecretParameter548D162D",
          ],
        },
        Object {
          "Label": Object {
            "default": "Supabase - External Auth Provider - GitHub",
          },
          "Parameters": Array [
            "GitHubEnabledParameter04C9B675",
            "GitHubClientIdParameterEB9B453C",
            "GitHubSecretParameter60DD8371",
          ],
        },
      ],
      "ParameterLabels": Object {
        "AuthApiVersionParameter": Object {
          "default": "Auth API Version - GoTrue",
        },
        "DatabaseMultiAz04923704": Object {
          "default": "Database Multi-AZ",
        },
        "DisableSignupParameter": Object {
          "default": "Disable User Signups",
        },
        "FacebookClientIdParameterF8F9E3CB": Object {
          "default": "Facebook Client ID",
        },
        "FacebookEnabledParameter04E6667E": Object {
          "default": "Facebook Enabled",
        },
        "FacebookSecretParameter0FEABC80": Object {
          "default": "Facebook Client Secret",
        },
        "GitHubClientIdParameterEB9B453C": Object {
          "default": "GitHub Client ID",
        },
        "GitHubEnabledParameter04C9B675": Object {
          "default": "GitHub Enabled",
        },
        "GitHubSecretParameter60DD8371": Object {
          "default": "GitHub Client Secret",
        },
        "GoogleClientIdParameter10AB1CB7": Object {
          "default": "Google Client ID",
        },
        "GoogleEnabledParameterC8D211C0": Object {
          "default": "Google Enabled",
        },
        "GoogleSecretParameterD567D187": Object {
          "default": "Google Client Secret",
        },
        "JwtExpiryLimitParameter": Object {
          "default": "JWT expiry limit",
        },
        "PasswordMinLengthParameter": Object {
          "default": "Min password length",
        },
        "PostgresMetaApiVersionParameter": Object {
          "default": "Postgres Meta API Version",
        },
        "RealtimeApiVersionParameter": Object {
          "default": "Realtime API Version",
        },
        "RedirectUrlsParameter": Object {
          "default": "Redirect URLs",
        },
        "RestApiVersionParameter": Object {
          "default": "Rest API Version - PostgREST",
        },
        "SesRegionParameter": Object {
          "default": "Amazon SES Region",
        },
        "SiteUrlParameter": Object {
          "default": "Site URL",
        },
        "SmtpAdminEmailParameter": Object {
          "default": "SMTP Admin Email Address",
        },
        "SmtpSenderNameParameter": Object {
          "default": "SMTP Sender Name",
        },
        "StorageApiVersionParameter": Object {
          "default": "Storage API Version",
        },
        "StudioCertificateArnParameterEBA639E6": Object {
          "default": "ACM Certificate ARN",
        },
        "StudioVersionParameter": Object {
          "default": "Supabase Studio Version",
        },
        "TwitterClientIdParameterE2950332": Object {
          "default": "Twitter Client ID",
        },
        "TwitterEnabledParameter355D114D": Object {
          "default": "Twitter Enabled",
        },
        "TwitterSecretParameter548D162D": Object {
          "default": "Twitter Client Secret",
        },
      },
    },
  },
  "Outputs": Object {
    "ExportApiKey": Object {
      "Export": Object {
        "Name": "ApiKey",
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "SupabaseJwtAnonRole874E82F9",
          "Token",
        ],
      },
    },
    "ExportUrl": Object {
      "Export": Object {
        "Name": "Url",
      },
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "https://",
            Object {
              "Fn::GetAtt": Array [
                "CDNDistributionD4FAE585",
                "DomainName",
              ],
            },
          ],
        ],
      },
    },
    "StudioUrl": Object {
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "http://",
            Object {
              "Fn::GetAtt": Array [
                "StudioLoadBalancer143227F7",
                "DNSName",
              ],
            },
          ],
        ],
      },
    },
    "StudioUserPool": Object {
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "https://",
            Object {
              "Ref": "AWS::Region",
            },
            ".console.aws.amazon.com/cognito/v2/idp/user-pools/",
            Object {
              "Ref": "StudioUserPool94F50620",
            },
            "/users",
          ],
        ],
      },
    },
  },
  "Parameters": Object {
    "AuthApiVersionParameter": Object {
      "AllowedPattern": "^(v[0-9]+.[0-9]+.[0-9]+(.w)*)|latest$",
      "Default": "v2.15.5",
      "Description": "Docker image tag - https://gallery.ecr.aws/t3w2s2c9/gotrue",
      "Type": "String",
    },
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "DatabaseMultiAz04923704": Object {
      "AllowedValues": Array [
        "true",
        "false",
      ],
      "Default": "false",
      "Description": "Create a replica at another AZ",
      "Type": "String",
    },
    "DisableSignupParameter": Object {
      "AllowedValues": Array [
        "true",
        "false",
      ],
      "Default": "false",
      "Description": "When signup is disabled the only way to create new users is through invites. Defaults to false, all signups enabled.",
      "Type": "String",
    },
    "FacebookClientIdParameterF8F9E3CB": Object {
      "Default": "replace-with-your-client-id",
      "Description": "The OAuth2 Client ID registered with the external provider.",
      "Type": "String",
    },
    "FacebookEnabledParameter04E6667E": Object {
      "AllowedValues": Array [
        "true",
        "false",
      ],
      "Default": "false",
      "Description": "Whether this external provider is enabled or not",
      "Type": "String",
    },
    "FacebookSecretParameter0FEABC80": Object {
      "Default": "replace-with-your-client-secret",
      "Description": "The OAuth2 Client Secret provided by the external provider when you registered.",
      "NoEcho": true,
      "Type": "String",
    },
    "GitHubClientIdParameterEB9B453C": Object {
      "Default": "replace-with-your-client-id",
      "Description": "The OAuth2 Client ID registered with the external provider.",
      "Type": "String",
    },
    "GitHubEnabledParameter04C9B675": Object {
      "AllowedValues": Array [
        "true",
        "false",
      ],
      "Default": "false",
      "Description": "Whether this external provider is enabled or not",
      "Type": "String",
    },
    "GitHubSecretParameter60DD8371": Object {
      "Default": "replace-with-your-client-secret",
      "Description": "The OAuth2 Client Secret provided by the external provider when you registered.",
      "NoEcho": true,
      "Type": "String",
    },
    "GoogleClientIdParameter10AB1CB7": Object {
      "Default": "replace-with-your-client-id",
      "Description": "The OAuth2 Client ID registered with the external provider.",
      "Type": "String",
    },
    "GoogleEnabledParameterC8D211C0": Object {
      "AllowedValues": Array [
        "true",
        "false",
      ],
      "Default": "false",
      "Description": "Whether this external provider is enabled or not",
      "Type": "String",
    },
    "GoogleSecretParameterD567D187": Object {
      "Default": "replace-with-your-client-secret",
      "Description": "The OAuth2 Client Secret provided by the external provider when you registered.",
      "NoEcho": true,
      "Type": "String",
    },
    "JwtExpiryLimitParameter": Object {
      "Default": 3600,
      "Description": "How long tokens are valid for. Defaults to 3600 (1 hour), maximum 604,800 seconds (one week).",
      "MaxValue": 604800,
      "MinValue": 300,
      "Type": "Number",
    },
    "PasswordMinLengthParameter": Object {
      "Default": "16",
      "Description": "When signup is disabled the only way to create new users is through invites. Defaults to false, all signups enabled.",
      "MaxValue": 128,
      "MinValue": 8,
      "Type": "Number",
    },
    "PostgresMetaApiVersionParameter": Object {
      "AllowedPattern": "^(v[0-9]+.[0-9]+.[0-9]+(.w)*)|latest$",
      "Default": "v0.44.0",
      "Description": "Docker image tag - https://gallery.ecr.aws/t3w2s2c9/postgres-meta",
      "Type": "String",
    },
    "RealtimeApiVersionParameter": Object {
      "AllowedPattern": "^(v[0-9]+.[0-9]+.[0-9]+(.w)*)|latest$",
      "Default": "v0.24.2",
      "Description": "Docker image tag - https://gallery.ecr.aws/t3w2s2c9/realtime",
      "Type": "String",
    },
    "RedirectUrlsParameter": Object {
      "Default": "",
      "Description": "URLs that auth providers are permitted to redirect to post authentication",
      "Type": "String",
    },
    "RestApiVersionParameter": Object {
      "Default": "v9.0.1.20220802",
      "Description": "Docker image tag - https://hub.docker.com/r/postgrest/postgrest/tags",
      "Type": "String",
    },
    "SesRegionParameter": Object {
      "AllowedValues": Array [
        "us-east-1",
        "us-east-2",
        "us-west-1",
        "us-west-2",
        "ap-south-1",
        "ap-northeast-1",
        "ap-northeast-2",
        "ap-northeast-3",
        "ap-southeast-1",
        "ap-southeast-2",
        "ca-central-1",
        "eu-central-1",
        "eu-west-1",
        "eu-west-2",
        "eu-west-3",
        "eu-north-1",
        "sa-east-1",
      ],
      "Default": "us-west-2",
      "Description": "Use Amazon SES as SMTP server. You must choose a region.",
      "Type": "String",
    },
    "SiteUrlParameter": Object {
      "Default": "http://localhost:3000",
      "Description": "The base URL your site is located at. Currently used in combination with other settings to construct URLs used in emails.",
      "Type": "String",
    },
    "SmtpAdminEmailParameter": Object {
      "AllowedPattern": "^[\\\\x20-\\\\x45]?[\\\\w-\\\\+]+(\\\\.[\\\\w]+)*@[\\\\w-]+(\\\\.[\\\\w]+)*(\\\\.[a-z]{2,})$",
      "ConstraintDescription": "must be a valid email address",
      "Default": "noreply@supabase.example.com",
      "Description": "The From e-mail address for all emails sent. If you want test e-mail, you can use Amazon WorkMail",
      "Type": "String",
    },
    "SmtpSenderNameParameter": Object {
      "Default": "Supabase",
      "Description": "The From email sender name for all emails sent.",
      "Type": "String",
    },
    "StorageApiVersionParameter": Object {
      "AllowedPattern": "^(v[0-9]+.[0-9]+.[0-9]+(.w)*)|latest$",
      "Default": "v0.20.0",
      "Description": "Docker image tag - https://gallery.ecr.aws/t3w2s2c9/storage-api",
      "Type": "String",
    },
    "StudioCertificateArnParameterEBA639E6": Object {
      "AllowedPattern": "^arn:aws:acm:[\\\\w-]+:[0-9]{12}:certificate/[\\\\w-]{36}$",
      "Default": "arn:aws:acm:us-west-2:123456789012:certificate/no-cert-it-is-not-secure-to-use-http",
      "Description": "ACM Certificate ARN for Supabase studio",
      "Type": "String",
    },
    "StudioVersionParameter": Object {
      "AllowedPattern": "^(v[0-9]+.[0-9]+.[0-9]+(.w)*)|latest$",
      "Default": "latest",
      "Description": "Docker image tag - https://gallery.ecr.aws/t3w2s2c9/studio",
      "Type": "String",
    },
    "TwitterClientIdParameterE2950332": Object {
      "Default": "replace-with-your-client-id",
      "Description": "The OAuth2 Client ID registered with the external provider.",
      "Type": "String",
    },
    "TwitterEnabledParameter355D114D": Object {
      "AllowedValues": Array [
        "true",
        "false",
      ],
      "Default": "false",
      "Description": "Whether this external provider is enabled or not",
      "Type": "String",
    },
    "TwitterSecretParameter548D162D": Object {
      "Default": "replace-with-your-client-secret",
      "Description": "The OAuth2 Client Secret provided by the external provider when you registered.",
      "NoEcho": true,
      "Type": "String",
    },
  },
  "Resources": Object {
    "AWS679f53fac002430cb0da5b7982bd22872D164C4C": Object {
      "DependsOn": Array [
        "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "6dbd112fe448437b3438da4382c72fccbb7d2ee1543db222620d7447fffebc50.zip",
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 120,
      },
      "Type": "AWS::Lambda::Function",
    },
    "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "AuthForceDeployFunction40B32C4E": Object {
      "DependsOn": Array [
        "AuthForceDeployFunctionServiceRoleDefaultPolicyD04AD932",
        "AuthForceDeployFunctionServiceRole1EF67253",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "8d678058f0eb8312a176152d7bdc2392d3a97980a0b4c6a5af633d405b11038b.zip",
        },
        "Description": "Supabase - Force deploy ECS service function",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "ECS_CLUSTER_NAME": Object {
              "Ref": "ClusterEB0386A7",
            },
            "ECS_SERVICE_NAME": Object {
              "Fn::GetAtt": Array [
                "AuthSvcServiceDAF53F1D",
                "Name",
              ],
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "AuthForceDeployFunctionServiceRole1EF67253",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "AuthForceDeployFunctionServiceRole1EF67253": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "AuthForceDeployFunctionServiceRoleDefaultPolicyD04AD932": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "ecs:UpdateService",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "AuthSvcServiceDAF53F1D",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "AuthForceDeployFunctionServiceRoleDefaultPolicyD04AD932",
        "Roles": Array [
          Object {
            "Ref": "AuthForceDeployFunctionServiceRole1EF67253",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "AuthLogs940C0551": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "RetentionInDays": 30,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "AuthParameterChangeAllowEventRuleSupabasenooptionAuthForceDeployFunctionCC770E71A238657F": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "AuthForceDeployFunction40B32C4E",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": Object {
          "Fn::GetAtt": Array [
            "AuthParameterChangeED794F9C",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "AuthParameterChangeED794F9C": Object {
      "Properties": Object {
        "Description": "Supabase - Force deploy Auth, when parameters changed",
        "EventPattern": Object {
          "detail": Object {
            "name": Array [
              Object {
                "prefix": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "/",
                      Object {
                        "Ref": "AWS::StackName",
                      },
                      "/Auth/",
                    ],
                  ],
                },
              },
            ],
            "operation": Array [
              "Update",
            ],
          },
          "detail-type": Array [
            "Parameter Store Change",
          ],
          "source": Array [
            "aws.ssm",
          ],
        },
        "State": "ENABLED",
        "Targets": Array [
          Object {
            "Arn": Object {
              "Fn::GetAtt": Array [
                "AuthForceDeployFunction40B32C4E",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "AuthSvcCloudmapService85C22E54": Object {
      "Properties": Object {
        "DnsConfig": Object {
          "DnsRecords": Array [
            Object {
              "TTL": 10,
              "Type": "SRV",
            },
            Object {
              "TTL": 10,
              "Type": "A",
            },
          ],
          "NamespaceId": Object {
            "Fn::GetAtt": Array [
              "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
              "Id",
            ],
          },
          "RoutingPolicy": "MULTIVALUE",
        },
        "HealthCheckCustomConfig": Object {
          "FailureThreshold": 1,
        },
        "Name": "auth",
        "NamespaceId": Object {
          "Fn::GetAtt": Array [
            "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
            "Id",
          ],
        },
      },
      "Type": "AWS::ServiceDiscovery::Service",
    },
    "AuthSvcSecurityGroup71415F29": Object {
      "Properties": Object {
        "GroupDescription": "Supabase-no-option/Auth/Svc/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "AuthSvcSecurityGroupfromSupabasenooptionKongSvcSecurityGroup993120C2999923809D8F": Object {
      "Properties": Object {
        "Description": "from SupabasenooptionKongSvcSecurityGroup993120C2:9999",
        "FromPort": 9999,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "AuthSvcSecurityGroup71415F29",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "KongSvcSecurityGroupD458B522",
            "GroupId",
          ],
        },
        "ToPort": 9999,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "AuthSvcServiceDAF53F1D": Object {
      "DependsOn": Array [
        "DatabaseInstance1844F58FD",
      ],
      "Properties": Object {
        "Cluster": Object {
          "Ref": "ClusterEB0386A7",
        },
        "DeploymentConfiguration": Object {
          "DeploymentCircuitBreaker": Object {
            "Enable": true,
            "Rollback": true,
          },
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "DeploymentController": Object {
          "Type": "ECS",
        },
        "EnableECSManagedTags": true,
        "LaunchType": "FARGATE",
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "AuthSvcSecurityGroup71415F29",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Array [
              Object {
                "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
              },
              Object {
                "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
              },
            ],
          },
        },
        "PropagateTags": "SERVICE",
        "ServiceRegistries": Array [
          Object {
            "ContainerName": "app",
            "ContainerPort": 9999,
            "RegistryArn": Object {
              "Fn::GetAtt": Array [
                "AuthSvcCloudmapService85C22E54",
                "Arn",
              ],
            },
          },
        ],
        "TaskDefinition": Object {
          "Ref": "AuthTaskDefinitionDBEE261E",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "AuthSvcTaskCountTarget3EF5C75D": Object {
      "Properties": Object {
        "MaxCapacity": 20,
        "MinCapacity": 1,
        "ResourceId": Object {
          "Fn::Join": Array [
            "",
            Array [
              "service/",
              Object {
                "Ref": "ClusterEB0386A7",
              },
              "/",
              Object {
                "Fn::GetAtt": Array [
                  "AuthSvcServiceDAF53F1D",
                  "Name",
                ],
              },
            ],
          ],
        },
        "RoleARN": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":iam::",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService",
            ],
          ],
        },
        "ScalableDimension": "ecs:service:DesiredCount",
        "ServiceNamespace": "ecs",
      },
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
    },
    "AuthSvcTaskCountTargetScaleOnCpuABE2CBF4": Object {
      "Properties": Object {
        "PolicyName": "SupabasenooptionAuthSvcTaskCountTargetScaleOnCpuE6EA412B",
        "PolicyType": "TargetTrackingScaling",
        "ScalingTargetId": Object {
          "Ref": "AuthSvcTaskCountTarget3EF5C75D",
        },
        "TargetTrackingScalingPolicyConfiguration": Object {
          "PredefinedMetricSpecification": Object {
            "PredefinedMetricType": "ECSServiceAverageCPUUtilization",
          },
          "ScaleInCooldown": 60,
          "ScaleOutCooldown": 60,
          "TargetValue": 50,
        },
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
    },
    "AuthTaskDefinitionDBEE261E": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "Environment": Array [
              Object {
                "Name": "GOTRUE_SITE_URL",
                "Value": Object {
                  "Ref": "SiteUrlParameter",
                },
              },
              Object {
                "Name": "GOTRUE_URI_ALLOW_LIST",
                "Value": Object {
                  "Ref": "RedirectUrlsParameter",
                },
              },
              Object {
                "Name": "GOTRUE_DISABLE_SIGNUP",
                "Value": Object {
                  "Ref": "DisableSignupParameter",
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_EMAIL_ENABLED",
                "Value": "true",
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_PHONE_ENABLED",
                "Value": "false",
              },
              Object {
                "Name": "GOTRUE_RATE_LIMIT_EMAIL_SENT",
                "Value": "3600",
              },
              Object {
                "Name": "GOTRUE_PASSWORD_MIN_LENGTH",
                "Value": Object {
                  "Ref": "PasswordMinLengthParameter",
                },
              },
              Object {
                "Name": "GOTRUE_API_HOST",
                "Value": "0.0.0.0",
              },
              Object {
                "Name": "GOTRUE_API_PORT",
                "Value": "9999",
              },
              Object {
                "Name": "GOTRUE_DB_DRIVER",
                "Value": "postgres",
              },
              Object {
                "Name": "GOTRUE_JWT_EXP",
                "Value": Object {
                  "Ref": "JwtExpiryLimitParameter",
                },
              },
              Object {
                "Name": "GOTRUE_JWT_AUD",
                "Value": "authenticated",
              },
              Object {
                "Name": "GOTRUE_JWT_ADMIN_ROLES",
                "Value": "service_role",
              },
              Object {
                "Name": "GOTRUE_JWT_DEFAULT_GROUP_NAME",
                "Value": "authenticated",
              },
              Object {
                "Name": "GOTRUE_SMTP_ADMIN_EMAIL",
                "Value": Object {
                  "Ref": "SmtpAdminEmailParameter",
                },
              },
              Object {
                "Name": "GOTRUE_SMTP_HOST",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "email-smtp.",
                      Object {
                        "Ref": "SesRegionParameter",
                      },
                      ".amazonaws.com",
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_SMTP_PORT",
                "Value": "465",
              },
              Object {
                "Name": "GOTRUE_SMTP_SENDER_NAME",
                "Value": Object {
                  "Ref": "SmtpSenderNameParameter",
                },
              },
              Object {
                "Name": "GOTRUE_MAILER_AUTOCONFIRM",
                "Value": "false",
              },
              Object {
                "Name": "GOTRUE_MAILER_URLPATHS_INVITE",
                "Value": "/auth/v1/verify",
              },
              Object {
                "Name": "GOTRUE_MAILER_URLPATHS_CONFIRMATION",
                "Value": "/auth/v1/verify",
              },
              Object {
                "Name": "GOTRUE_MAILER_URLPATHS_RECOVERY",
                "Value": "/auth/v1/verify",
              },
              Object {
                "Name": "GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE",
                "Value": "/auth/v1/verify",
              },
              Object {
                "Name": "GOTRUE_SMS_AUTOCONFIRM",
                "Value": "true",
              },
              Object {
                "Name": "API_EXTERNAL_URL",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "https://",
                      Object {
                        "Fn::GetAtt": Array [
                          "CDNDistributionD4FAE585",
                          "DomainName",
                        ],
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_GOOGLE_ENABLED",
                "Value": Object {
                  "Ref": "GoogleEnabledParameterC8D211C0",
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_GOOGLE_REDIRECT_URI",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "https://",
                      Object {
                        "Fn::GetAtt": Array [
                          "CDNDistributionD4FAE585",
                          "DomainName",
                        ],
                      },
                      "/auth/v1/callback",
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_FACEBOOK_ENABLED",
                "Value": Object {
                  "Ref": "FacebookEnabledParameter04E6667E",
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_FACEBOOK_REDIRECT_URI",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "https://",
                      Object {
                        "Fn::GetAtt": Array [
                          "CDNDistributionD4FAE585",
                          "DomainName",
                        ],
                      },
                      "/auth/v1/callback",
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_TWITTER_ENABLED",
                "Value": Object {
                  "Ref": "TwitterEnabledParameter355D114D",
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_TWITTER_REDIRECT_URI",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "https://",
                      Object {
                        "Fn::GetAtt": Array [
                          "CDNDistributionD4FAE585",
                          "DomainName",
                        ],
                      },
                      "/auth/v1/callback",
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_GITHUB_ENABLED",
                "Value": Object {
                  "Ref": "GitHubEnabledParameter04C9B675",
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_GITHUB_REDIRECT_URI",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "https://",
                      Object {
                        "Fn::GetAtt": Array [
                          "CDNDistributionD4FAE585",
                          "DomainName",
                        ],
                      },
                      "/auth/v1/callback",
                    ],
                  ],
                },
              },
            ],
            "Essential": true,
            "Image": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "public.ecr.aws/t3w2s2c9/gotrue:",
                  Object {
                    "Ref": "AuthApiVersionParameter",
                  },
                ],
              ],
            },
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "AuthLogs940C0551",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "Name": "app",
            "PortMappings": Array [
              Object {
                "ContainerPort": 9999,
                "Protocol": "tcp",
              },
            ],
            "Secrets": Array [
              Object {
                "Name": "GOTRUE_DB_DATABASE_URL",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "DatabaseauthUrlParameter27067EF6",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_JWT_SECRET",
                "ValueFrom": Object {
                  "Ref": "SupabaseJwtSecretFA404A75",
                },
              },
              Object {
                "Name": "GOTRUE_SMTP_USER",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "SupabaseMailSecret777E0288",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_SMTP_PASS",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "SupabaseMailSecret777E0288",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_GOOGLE_CLIENT_ID",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "GoogleClientIdF5AAE2C3",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_GOOGLE_SECRET",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "GoogleSecret3B43D818",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_FACEBOOK_CLIENT_ID",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "FacebookClientIdD49EC273",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_FACEBOOK_SECRET",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "FacebookSecret4142F291",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_TWITTER_CLIENT_ID",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "TwitterClientId11873110",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_TWITTER_SECRET",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "TwitterSecretA36121D0",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_GITHUB_CLIENT_ID",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "GitHubClientIdF139378A",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_GITHUB_SECRET",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "GitHubSecret0C4A5322",
                      },
                    ],
                  ],
                },
              },
            ],
            "Ulimits": Array [
              Object {
                "HardLimit": 65536,
                "Name": "nofile",
                "SoftLimit": 65536,
              },
            ],
          },
        ],
        "Cpu": "1024",
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "AuthTaskDefinitionExecutionRole8B68B008",
            "Arn",
          ],
        },
        "Family": "SupabasenooptionAuthTaskDefinitionFC7A0B40",
        "Memory": "2048",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "RuntimePlatform": Object {
          "CpuArchitecture": "ARM64",
          "OperatingSystemFamily": "LINUX",
        },
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "AuthTaskDefinitionTaskRole0174181B",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "AuthTaskDefinitionExecutionRole8B68B008": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "AuthTaskDefinitionExecutionRoleDefaultPolicy2A4B4627": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "AuthLogs940C0551",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "DatabaseauthUrlParameter27067EF6",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "SupabaseJwtSecretFA404A75",
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "SupabaseMailSecret777E0288",
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "GoogleClientIdF5AAE2C3",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "GoogleSecret3B43D818",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "FacebookClientIdD49EC273",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "FacebookSecret4142F291",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "TwitterClientId11873110",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "TwitterSecretA36121D0",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "GitHubClientIdF139378A",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "GitHubSecret0C4A5322",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "AuthTaskDefinitionExecutionRoleDefaultPolicy2A4B4627",
        "Roles": Array [
          Object {
            "Ref": "AuthTaskDefinitionExecutionRole8B68B008",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "AuthTaskDefinitionTaskRole0174181B": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "Bucket83908E77": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
    },
    "CDNCreateWebAclFunction9B43907E": Object {
      "DependsOn": Array [
        "CDNCreateWebAclFunctionServiceRoleDefaultPolicyA68E2DE5",
        "CDNCreateWebAclFunctionServiceRole84967C6A",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "25e1868549f0ea6f4ff053e267112cab3e36f35158a348198200ba74ee8f96ac.zip",
        },
        "Description": "Supabase - Create WAF Web ACL function",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "CDNCreateWebAclFunctionServiceRole84967C6A",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
        "Timeout": 15,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CDNCreateWebAclFunctionServiceRole84967C6A": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CDNCreateWebAclFunctionServiceRoleDefaultPolicyA68E2DE5": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "wafv2:DeleteWebACL",
                "wafv2:GetWebACL",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":wafv2:us-east-1:",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":global/webacl/",
                    Object {
                      "Ref": "AWS::StackName",
                    },
                    "-*/*",
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "wafv2:CreateWebACL",
                "wafv2:UpdateWebACL",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":wafv2:us-east-1:",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":global/webacl/",
                      Object {
                        "Ref": "AWS::StackName",
                      },
                      "-*/*",
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":wafv2:us-east-1:",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":global/ipset/*/*",
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":wafv2:us-east-1:",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":global/managedruleset/*/*",
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":wafv2:us-east-1:",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":global/regexpatternset/*/*",
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":wafv2:us-east-1:",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":global/rulegroup/*/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CDNCreateWebAclFunctionServiceRoleDefaultPolicyA68E2DE5",
        "Roles": Array [
          Object {
            "Ref": "CDNCreateWebAclFunctionServiceRole84967C6A",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CDNDistributionD4FAE585": Object {
      "Properties": Object {
        "DistributionConfig": Object {
          "CacheBehaviors": Array [
            Object {
              "AllowedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
              "CachedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
              ],
              "Compress": true,
              "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
              "PathPattern": "*.css",
              "TargetOriginId": "SupabasenooptionCDNDistributionOrigin177C79D23",
              "ViewerProtocolPolicy": "redirect-to-https",
            },
            Object {
              "AllowedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
              "CachedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
              ],
              "Compress": true,
              "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
              "PathPattern": "*.png",
              "TargetOriginId": "SupabasenooptionCDNDistributionOrigin177C79D23",
              "ViewerProtocolPolicy": "redirect-to-https",
            },
            Object {
              "AllowedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
              "CachedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
              ],
              "Compress": true,
              "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
              "PathPattern": "*.jpg",
              "TargetOriginId": "SupabasenooptionCDNDistributionOrigin177C79D23",
              "ViewerProtocolPolicy": "redirect-to-https",
            },
            Object {
              "AllowedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
              "CachedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
              ],
              "Compress": true,
              "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
              "PathPattern": "*.jpeg",
              "TargetOriginId": "SupabasenooptionCDNDistributionOrigin177C79D23",
              "ViewerProtocolPolicy": "redirect-to-https",
            },
            Object {
              "AllowedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
              "CachedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
              ],
              "Compress": true,
              "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
              "PathPattern": "*.svg",
              "TargetOriginId": "SupabasenooptionCDNDistributionOrigin177C79D23",
              "ViewerProtocolPolicy": "redirect-to-https",
            },
            Object {
              "AllowedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
              "CachedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
              ],
              "Compress": true,
              "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
              "PathPattern": "*.woff",
              "TargetOriginId": "SupabasenooptionCDNDistributionOrigin177C79D23",
              "ViewerProtocolPolicy": "redirect-to-https",
            },
            Object {
              "AllowedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
              "CachedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
              ],
              "Compress": true,
              "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
              "PathPattern": "*.woff2",
              "TargetOriginId": "SupabasenooptionCDNDistributionOrigin177C79D23",
              "ViewerProtocolPolicy": "redirect-to-https",
            },
            Object {
              "AllowedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
              "CachedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
              ],
              "Compress": true,
              "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
              "PathPattern": "*.js",
              "TargetOriginId": "SupabasenooptionCDNDistributionOrigin177C79D23",
              "ViewerProtocolPolicy": "redirect-to-https",
            },
          ],
          "Comment": "Supabase - CDN",
          "CustomErrorResponses": Array [
            Object {
              "ErrorCachingMinTTL": 10,
              "ErrorCode": 500,
            },
            Object {
              "ErrorCachingMinTTL": 10,
              "ErrorCode": 501,
            },
            Object {
              "ErrorCachingMinTTL": 10,
              "ErrorCode": 502,
            },
            Object {
              "ErrorCachingMinTTL": 10,
              "ErrorCode": 503,
            },
            Object {
              "ErrorCachingMinTTL": 10,
              "ErrorCode": 504,
            },
          ],
          "DefaultCacheBehavior": Object {
            "AllowedMethods": Array [
              "GET",
              "HEAD",
              "OPTIONS",
              "PUT",
              "PATCH",
              "POST",
              "DELETE",
            ],
            "CachePolicyId": "4135ea2d-6df8-44a3-9df3-4b5a84be39ad",
            "Compress": true,
            "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
            "TargetOriginId": "SupabasenooptionCDNDistributionOrigin177C79D23",
            "ViewerProtocolPolicy": "redirect-to-https",
          },
          "Enabled": true,
          "HttpVersion": "http2and3",
          "IPV6Enabled": true,
          "Origins": Array [
            Object {
              "CustomOriginConfig": Object {
                "OriginProtocolPolicy": "http-only",
                "OriginSSLProtocols": Array [
                  "TLSv1.2",
                ],
              },
              "DomainName": Object {
                "Fn::GetAtt": Array [
                  "KongLoadBalancerD341ED7C",
                  "DNSName",
                ],
              },
              "Id": "SupabasenooptionCDNDistributionOrigin177C79D23",
            },
          ],
          "WebACLId": Object {
            "Fn::GetAtt": Array [
              "CDNWebAcl7B4F8CB2",
              "Arn",
            ],
          },
        },
      },
      "Type": "AWS::CloudFront::Distribution",
    },
    "CDNWebAcl7B4F8CB2": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "DefaultAction": Object {
          "Allow": Object {},
        },
        "Description": "Web ACL for self-hosted Supabase",
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AWS::StackName",
              },
              "-CDN-WebAcl",
            ],
          ],
        },
        "Rules": Array [
          Object {
            "Name": "AWS-AWSManagedRulesAmazonIpReputationList",
            "OverrideAction": Object {
              "None": Object {},
            },
            "Priority": 0,
            "Statement": Object {
              "ManagedRuleGroupStatement": Object {
                "Name": "AWSManagedRulesAmazonIpReputationList",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": Object {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "AWS-AWSManagedRulesAmazonIpReputationList",
              "SampledRequestsEnabled": true,
            },
          },
          Object {
            "Name": "AWS-AWSManagedRulesKnownBadInputsRuleSet",
            "OverrideAction": Object {
              "None": Object {},
            },
            "Priority": 1,
            "Statement": Object {
              "ManagedRuleGroupStatement": Object {
                "Name": "AWSManagedRulesKnownBadInputsRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": Object {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "AWS-AWSManagedRulesKnownBadInputsRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
          Object {
            "Name": "AWS-AWSManagedRulesSQLiRuleSet",
            "OverrideAction": Object {
              "None": Object {},
            },
            "Priority": 2,
            "Statement": Object {
              "ManagedRuleGroupStatement": Object {
                "Name": "AWSManagedRulesSQLiRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": Object {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "AWS-AWSManagedRulesSQLiRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
          Object {
            "Name": "AWS-AWSManagedRulesBotControlRuleSet",
            "OverrideAction": Object {
              "None": Object {},
            },
            "Priority": 3,
            "Statement": Object {
              "ManagedRuleGroupStatement": Object {
                "Name": "AWSManagedRulesBotControlRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": Object {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "AWS-AWSManagedRulesBotControlRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
          Object {
            "Name": "AWS-AWSManagedRulesATPRuleSet",
            "OverrideAction": Object {
              "None": Object {},
            },
            "Priority": 4,
            "Statement": Object {
              "ManagedRuleGroupStatement": Object {
                "ExcludedRules": Array [
                  Object {
                    "Name": "SignalMissingCredential",
                  },
                ],
                "ManagedRuleGroupConfigs": Array [
                  Object {
                    "LoginPath": "/auth/v1/token",
                  },
                  Object {
                    "PayloadType": "JSON",
                  },
                  Object {
                    "UsernameField": Object {
                      "Identifier": "/email",
                    },
                  },
                  Object {
                    "PasswordField": Object {
                      "Identifier": "/password",
                    },
                  },
                ],
                "Name": "AWSManagedRulesATPRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": Object {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "AWS-AWSManagedRulesATPRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
        ],
        "Scope": "CLOUDFRONT",
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "CDNWebAclProviderframeworkonEvent0566E709",
            "Arn",
          ],
        },
        "VisibilityConfig": Object {
          "CloudWatchMetricsEnabled": true,
          "MetricName": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Ref": "AWS::StackName",
                },
                "-CDN-WebAcl",
              ],
            ],
          },
          "SampledRequestsEnabled": true,
        },
      },
      "Type": "Custom::WebACL",
      "UpdateReplacePolicy": "Delete",
    },
    "CDNWebAclProviderframeworkonEvent0566E709": Object {
      "DependsOn": Array [
        "CDNWebAclProviderframeworkonEventServiceRoleDefaultPolicy83D0FB7A",
        "CDNWebAclProviderframeworkonEventServiceRoleF03F76DB",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "e7c95e1a12d903d913ebdd526c735f1ac58b2024882a5562110221fe685ebe85.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (Supabase-no-option/CDN/WebAclProvider)",
        "Environment": Object {
          "Variables": Object {
            "USER_ON_EVENT_FUNCTION_ARN": Object {
              "Fn::GetAtt": Array [
                "CDNCreateWebAclFunction9B43907E",
                "Arn",
              ],
            },
          },
        },
        "Handler": "framework.onEvent",
        "Role": Object {
          "Fn::GetAtt": Array [
            "CDNWebAclProviderframeworkonEventServiceRoleF03F76DB",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CDNWebAclProviderframeworkonEventServiceRoleDefaultPolicy83D0FB7A": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "CDNCreateWebAclFunction9B43907E",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "CDNCreateWebAclFunction9B43907E",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CDNWebAclProviderframeworkonEventServiceRoleDefaultPolicy83D0FB7A",
        "Roles": Array [
          Object {
            "Ref": "CDNWebAclProviderframeworkonEventServiceRoleF03F76DB",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CDNWebAclProviderframeworkonEventServiceRoleF03F76DB": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudFrontManagedPrefixList4E30A88B": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "CloudFrontManagedPrefixListCustomResourcePolicy18F5EEC5",
      ],
      "Properties": Object {
        "Create": "{\\"service\\":\\"EC2\\",\\"action\\":\\"describeManagedPrefixLists\\",\\"parameters\\":{\\"Filters\\":[{\\"Name\\":\\"prefix-list-name\\",\\"Values\\":[\\"com.amazonaws.global.cloudfront.origin-facing\\"]}]},\\"physicalResourceId\\":{\\"responsePath\\":\\"PrefixLists.0.PrefixListId\\"}}",
        "InstallLatestAwsSdk": true,
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "AWS679f53fac002430cb0da5b7982bd22872D164C4C",
            "Arn",
          ],
        },
      },
      "Type": "Custom::ManagedPrefixList",
      "UpdateReplacePolicy": "Delete",
    },
    "CloudFrontManagedPrefixListCustomResourcePolicy18F5EEC5": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "ec2:DescribeManagedPrefixLists",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudFrontManagedPrefixListCustomResourcePolicy18F5EEC5",
        "Roles": Array [
          Object {
            "Ref": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "Cluster3DA9CCBA": Object {
      "Properties": Object {
        "CapacityProviders": Array [
          "FARGATE",
          "FARGATE_SPOT",
        ],
        "Cluster": Object {
          "Ref": "ClusterEB0386A7",
        },
        "DefaultCapacityProviderStrategy": Array [],
      },
      "Type": "AWS::ECS::ClusterCapacityProviderAssociations",
    },
    "ClusterDefaultServiceDiscoveryNamespaceC336F9B4": Object {
      "Properties": Object {
        "Name": "supabase.local",
        "Vpc": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::ServiceDiscovery::PrivateDnsNamespace",
    },
    "ClusterEB0386A7": Object {
      "Properties": Object {
        "ClusterSettings": Array [
          Object {
            "Name": "containerInsights",
            "Value": "disabled",
          },
        ],
      },
      "Type": "AWS::ECS::Cluster",
    },
    "DatabaseB269D8BB": Object {
      "DeletionPolicy": "Snapshot",
      "Properties": Object {
        "CopyTagsToSnapshot": true,
        "DBClusterParameterGroupName": Object {
          "Ref": "ParameterGroup5E32DECB",
        },
        "DBSubnetGroupName": Object {
          "Ref": "DatabaseSubnets56F17B9A",
        },
        "DatabaseName": "postgres",
        "Engine": "aurora-postgresql",
        "EngineVersion": "14.3",
        "MasterUserPassword": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{{resolve:secretsmanager:",
              Object {
                "Ref": "SupabasenooptionDatabaseSecret67203BF16b2eb8af71bef5c6813259b78dc271d3",
              },
              ":SecretString:password::}}",
            ],
          ],
        },
        "MasterUsername": "supabase_admin",
        "Port": 5432,
        "StorageEncrypted": true,
        "VpcSecurityGroupIds": Array [
          Object {
            "Fn::GetAtt": Array [
              "DatabaseSecurityGroup5C91FDCB",
              "GroupId",
            ],
          },
        ],
      },
      "Type": "AWS::RDS::DBCluster",
      "UpdateReplacePolicy": "Snapshot",
    },
    "DatabaseDbScalingConfigureA53A665A": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "DatabaseDbScalingConfigureCustomResourcePolicy8F6D2C0B",
      ],
      "Properties": Object {
        "Create": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{\\"service\\":\\"RDS\\",\\"action\\":\\"modifyDBCluster\\",\\"parameters\\":{\\"DBClusterIdentifier\\":\\"",
              Object {
                "Ref": "DatabaseB269D8BB",
              },
              "\\",\\"ServerlessV2ScalingConfiguration\\":{\\"MinCapacity\\":0.5,\\"MaxCapacity\\":32}},\\"physicalResourceId\\":{\\"id\\":\\"",
              Object {
                "Ref": "DatabaseB269D8BB",
              },
              "\\"}}",
            ],
          ],
        },
        "InstallLatestAwsSdk": true,
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "AWS679f53fac002430cb0da5b7982bd22872D164C4C",
            "Arn",
          ],
        },
        "Update": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{\\"service\\":\\"RDS\\",\\"action\\":\\"modifyDBCluster\\",\\"parameters\\":{\\"DBClusterIdentifier\\":\\"",
              Object {
                "Ref": "DatabaseB269D8BB",
              },
              "\\",\\"ServerlessV2ScalingConfiguration\\":{\\"MinCapacity\\":0.5,\\"MaxCapacity\\":32}},\\"physicalResourceId\\":{\\"id\\":\\"",
              Object {
                "Ref": "DatabaseB269D8BB",
              },
              "\\"}}",
            ],
          ],
        },
      },
      "Type": "Custom::AuroraServerlessV2ScalingConfiguration",
      "UpdateReplacePolicy": "Delete",
    },
    "DatabaseDbScalingConfigureCustomResourcePolicy8F6D2C0B": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "rds:ModifyDBCluster",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "DatabaseDbScalingConfigureCustomResourcePolicy8F6D2C0B",
        "Roles": Array [
          Object {
            "Ref": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "DatabaseInit6CD697C3": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "DatabaseInstance1844F58FD",
      ],
      "Properties": Object {
        "Hostname": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Address",
          ],
        },
        "SecretId": Object {
          "Ref": "DatabaseSecretAttachmentE5D1B020",
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "DatabaseInitProviderframeworkonEventE5DC022A",
            "Arn",
          ],
        },
      },
      "Type": "Custom::SupabaseDatabaseInit",
      "UpdateReplacePolicy": "Delete",
    },
    "DatabaseInitFunctionC94D0413": Object {
      "DependsOn": Array [
        "DatabaseInitFunctionServiceRoleDefaultPolicyE8E6FF4E",
        "DatabaseInitFunctionServiceRole8CD61C4B",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "8596f13703aa5f15379180c66371178ebc06977f4f9242bc89ea139bb3b6ae5e.zip",
        },
        "Description": "Supabase - Database init function",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "DatabaseInitFunctionServiceRole8CD61C4B",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
        "Timeout": 60,
        "VpcConfig": Object {
          "SecurityGroupIds": Array [
            Object {
              "Fn::GetAtt": Array [
                "DatabaseInitFunctionSecurityGroupAC823144",
                "GroupId",
              ],
            },
          ],
          "SubnetIds": Array [
            Object {
              "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
            },
            Object {
              "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "DatabaseInitFunctionSecurityGroupAC823144": Object {
      "Properties": Object {
        "GroupDescription": "Automatic security group for Lambda Function SupabasenooptionDatabaseInitFunctionC50BD7D9",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "DatabaseInitFunctionServiceRole8CD61C4B": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "DatabaseInitFunctionServiceRoleDefaultPolicyE8E6FF4E": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "DatabaseSecretAttachmentE5D1B020",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "DatabaseInitFunctionServiceRoleDefaultPolicyE8E6FF4E",
        "Roles": Array [
          Object {
            "Ref": "DatabaseInitFunctionServiceRole8CD61C4B",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "DatabaseInitProviderframeworkonEventE5DC022A": Object {
      "DependsOn": Array [
        "DatabaseInitProviderframeworkonEventServiceRoleDefaultPolicy7FB834D6",
        "DatabaseInitProviderframeworkonEventServiceRoleF32E57C9",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "e7c95e1a12d903d913ebdd526c735f1ac58b2024882a5562110221fe685ebe85.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (Supabase-no-option/Database/InitProvider)",
        "Environment": Object {
          "Variables": Object {
            "USER_ON_EVENT_FUNCTION_ARN": Object {
              "Fn::GetAtt": Array [
                "DatabaseInitFunctionC94D0413",
                "Arn",
              ],
            },
          },
        },
        "Handler": "framework.onEvent",
        "Role": Object {
          "Fn::GetAtt": Array [
            "DatabaseInitProviderframeworkonEventServiceRoleF32E57C9",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "DatabaseInitProviderframeworkonEventServiceRoleDefaultPolicy7FB834D6": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "DatabaseInitFunctionC94D0413",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "DatabaseInitFunctionC94D0413",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "DatabaseInitProviderframeworkonEventServiceRoleDefaultPolicy7FB834D6",
        "Roles": Array [
          Object {
            "Ref": "DatabaseInitProviderframeworkonEventServiceRoleF32E57C9",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "DatabaseInitProviderframeworkonEventServiceRoleF32E57C9": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "DatabaseInstance1844F58FD": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "DatabaseDbScalingConfigureCustomResourcePolicy8F6D2C0B",
        "DatabaseDbScalingConfigureA53A665A",
        "VPCPrivateSubnet1DefaultRouteAE1D6490",
        "VPCPrivateSubnet2DefaultRouteF4F5CFD2",
      ],
      "Properties": Object {
        "DBClusterIdentifier": Object {
          "Ref": "DatabaseB269D8BB",
        },
        "DBInstanceClass": "db.serverless",
        "DBSubnetGroupName": Object {
          "Ref": "DatabaseSubnets56F17B9A",
        },
        "EnablePerformanceInsights": true,
        "Engine": "aurora-postgresql",
        "EngineVersion": "14.3",
        "PerformanceInsightsRetentionPeriod": 7,
      },
      "Type": "AWS::RDS::DBInstance",
      "UpdateReplacePolicy": "Delete",
    },
    "DatabaseInstance2AA380DEE": Object {
      "Condition": "DatabaseMultiAzCondition82AA721B",
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "DatabaseDbScalingConfigureCustomResourcePolicy8F6D2C0B",
        "DatabaseDbScalingConfigureA53A665A",
        "VPCPrivateSubnet1DefaultRouteAE1D6490",
        "VPCPrivateSubnet2DefaultRouteF4F5CFD2",
      ],
      "Properties": Object {
        "DBClusterIdentifier": Object {
          "Ref": "DatabaseB269D8BB",
        },
        "DBInstanceClass": "db.serverless",
        "DBSubnetGroupName": Object {
          "Ref": "DatabaseSubnets56F17B9A",
        },
        "EnablePerformanceInsights": true,
        "Engine": "aurora-postgresql",
        "EngineVersion": "14.3",
        "PerformanceInsightsRetentionPeriod": 7,
      },
      "Type": "AWS::RDS::DBInstance",
      "UpdateReplacePolicy": "Delete",
    },
    "DatabaseRotationSecurityGroup8E1B7C66": Object {
      "Properties": Object {
        "GroupDescription": "Supabase-no-option/Database/RotationSecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "DatabaseSecretAttachmentE5D1B020": Object {
      "Properties": Object {
        "SecretId": Object {
          "Ref": "SupabasenooptionDatabaseSecret67203BF16b2eb8af71bef5c6813259b78dc271d3",
        },
        "TargetId": Object {
          "Ref": "DatabaseB269D8BB",
        },
        "TargetType": "AWS::RDS::DBCluster",
      },
      "Type": "AWS::SecretsManager::SecretTargetAttachment",
    },
    "DatabaseSecretAttachmentPolicy5ACFE6CA": Object {
      "Properties": Object {
        "ResourcePolicy": Object {
          "Statement": Array [
            Object {
              "Action": "secretsmanager:DeleteSecret",
              "Effect": "Deny",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "SecretId": Object {
          "Ref": "DatabaseSecretAttachmentE5D1B020",
        },
      },
      "Type": "AWS::SecretsManager::ResourcePolicy",
    },
    "DatabaseSecretAttachmentRotation5592F5B2": Object {
      "Properties": Object {
        "HostedRotationLambda": Object {
          "ExcludeCharacters": "%+~\`#$&*()|[]{}:;<>?!'/@\\"\\\\=^",
          "RotationLambdaName": "SupabaseDatabaseSecretRotationFunction",
          "RotationType": "PostgreSQLSingleUser",
          "VpcSecurityGroupIds": Object {
            "Fn::GetAtt": Array [
              "DatabaseRotationSecurityGroup8E1B7C66",
              "GroupId",
            ],
          },
          "VpcSubnetIds": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
                },
                ",",
                Object {
                  "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
                },
              ],
            ],
          },
        },
        "RotationRules": Object {
          "AutomaticallyAfterDays": 30,
        },
        "SecretId": Object {
          "Ref": "DatabaseSecretAttachmentE5D1B020",
        },
      },
      "Type": "AWS::SecretsManager::RotationSchedule",
    },
    "DatabaseSecretChangeRule472D79D9": Object {
      "Properties": Object {
        "Description": "Supabase - Update parameter store, when DB secret rotated",
        "EventPattern": Object {
          "detail": Object {
            "additionalEventData": Object {
              "SecretId": Array [
                Object {
                  "Ref": "DatabaseSecretAttachmentE5D1B020",
                },
              ],
            },
            "eventName": Array [
              "RotationSucceeded",
            ],
          },
          "source": Array [
            "aws.secretsmanager",
          ],
        },
        "State": "ENABLED",
        "Targets": Array [
          Object {
            "Arn": Object {
              "Fn::GetAtt": Array [
                "DatabaseSyncSecretFunction60FEB86F",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "DatabaseSecretChangeRuleAllowEventRuleSupabasenooptionDatabaseSyncSecretFunctionC364841D07BA6A15": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DatabaseSyncSecretFunction60FEB86F",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": Object {
          "Fn::GetAtt": Array [
            "DatabaseSecretChangeRule472D79D9",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DatabaseSecurityGroup5C91FDCB": Object {
      "Properties": Object {
        "GroupDescription": "RDS security group",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "DatabaseSecurityGroupfromSupabasenooptionAuthSvcSecurityGroup24676927IndirectPort023F1BD6": Object {
      "Properties": Object {
        "Description": "from SupabasenooptionAuthSvcSecurityGroup24676927:{IndirectPort}",
        "FromPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Port",
          ],
        },
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "DatabaseSecurityGroup5C91FDCB",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "AuthSvcSecurityGroup71415F29",
            "GroupId",
          ],
        },
        "ToPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "DatabaseSecurityGroupfromSupabasenooptionDatabaseInitFunctionSecurityGroup231E8710IndirectPortB547AF30": Object {
      "Properties": Object {
        "Description": "from SupabasenooptionDatabaseInitFunctionSecurityGroup231E8710:{IndirectPort}",
        "FromPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Port",
          ],
        },
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "DatabaseSecurityGroup5C91FDCB",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "DatabaseInitFunctionSecurityGroupAC823144",
            "GroupId",
          ],
        },
        "ToPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "DatabaseSecurityGroupfromSupabasenooptionDatabaseRotationSecurityGroupEABC1CB9IndirectPortBC7D2C72": Object {
      "Properties": Object {
        "Description": "Lambda to rotate secrets",
        "FromPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Port",
          ],
        },
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "DatabaseSecurityGroup5C91FDCB",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "DatabaseRotationSecurityGroup8E1B7C66",
            "GroupId",
          ],
        },
        "ToPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "DatabaseSecurityGroupfromSupabasenooptionMetaSvcSecurityGroupE8CCB082IndirectPortD61FF472": Object {
      "Properties": Object {
        "Description": "from SupabasenooptionMetaSvcSecurityGroupE8CCB082:{IndirectPort}",
        "FromPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Port",
          ],
        },
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "DatabaseSecurityGroup5C91FDCB",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "MetaSvcSecurityGroup28D90BB4",
            "GroupId",
          ],
        },
        "ToPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "DatabaseSecurityGroupfromSupabasenooptionRealtimeSvcSecurityGroup7D25AC20IndirectPort3955E832": Object {
      "Properties": Object {
        "Description": "from SupabasenooptionRealtimeSvcSecurityGroup7D25AC20:{IndirectPort}",
        "FromPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Port",
          ],
        },
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "DatabaseSecurityGroup5C91FDCB",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "RealtimeSvcSecurityGroup15A1991B",
            "GroupId",
          ],
        },
        "ToPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "DatabaseSecurityGroupfromSupabasenooptionRestSvcSecurityGroup1C1D295AIndirectPort3D72C922": Object {
      "Properties": Object {
        "Description": "from SupabasenooptionRestSvcSecurityGroup1C1D295A:{IndirectPort}",
        "FromPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Port",
          ],
        },
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "DatabaseSecurityGroup5C91FDCB",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "RestSvcSecurityGroup4F37982C",
            "GroupId",
          ],
        },
        "ToPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "DatabaseSecurityGroupfromSupabasenooptionStorageSvcSecurityGroupD6BFDB31IndirectPortB6E21413": Object {
      "Properties": Object {
        "Description": "from SupabasenooptionStorageSvcSecurityGroupD6BFDB31:{IndirectPort}",
        "FromPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Port",
          ],
        },
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "DatabaseSecurityGroup5C91FDCB",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "StorageSvcSecurityGroup134E6883",
            "GroupId",
          ],
        },
        "ToPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "DatabaseSubnets56F17B9A": Object {
      "Properties": Object {
        "DBSubnetGroupDescription": "Subnets for Database database",
        "SubnetIds": Array [
          Object {
            "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
          },
          Object {
            "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
          },
        ],
      },
      "Type": "AWS::RDS::DBSubnetGroup",
    },
    "DatabaseSyncSecretFunction60FEB86F": Object {
      "DependsOn": Array [
        "DatabaseSyncSecretFunctionServiceRoleDefaultPolicy5F9B6AA1",
        "DatabaseSyncSecretFunctionServiceRole189FFC3D",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "592c9d675ff833cd183fb49d128d1d1f8202742d5997b530ef384abfbd890c93.zip",
        },
        "Description": "Supabase - Sync DB secret to parameter store",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "URL_PARAMETER_NAME": Object {
              "Ref": "DatabaseUrlParameter81075D88",
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "DatabaseSyncSecretFunctionServiceRole189FFC3D",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "DatabaseSyncSecretFunctionServiceRole189FFC3D": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "DatabaseSyncSecretFunctionServiceRoleDefaultPolicy5F9B6AA1": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "ssm:PutParameter",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "DatabaseUrlParameter81075D88",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": "ssm:PutParameter",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "DatabaseauthUrlParameter27067EF6",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "DatabaseSecretAttachmentE5D1B020",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "DatabaseSyncSecretFunctionServiceRoleDefaultPolicy5F9B6AA1",
        "Roles": Array [
          Object {
            "Ref": "DatabaseSyncSecretFunctionServiceRole189FFC3D",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "DatabaseUrlParameter81075D88": Object {
      "Properties": Object {
        "Description": "The standard connection PostgreSQL URI format.",
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/",
              Object {
                "Ref": "AWS::StackName",
              },
              "/Database/Url",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Fn::Join": Array [
            "",
            Array [
              "postgres://{{resolve:secretsmanager:",
              Object {
                "Ref": "DatabaseSecretAttachmentE5D1B020",
              },
              ":SecretString:username::}}:{{resolve:secretsmanager:",
              Object {
                "Ref": "DatabaseSecretAttachmentE5D1B020",
              },
              ":SecretString:password::}}@{{resolve:secretsmanager:",
              Object {
                "Ref": "DatabaseSecretAttachmentE5D1B020",
              },
              ":SecretString:host::}}:{{resolve:secretsmanager:",
              Object {
                "Ref": "DatabaseSecretAttachmentE5D1B020",
              },
              ":SecretString:port::}}/{{resolve:secretsmanager:",
              Object {
                "Ref": "DatabaseSecretAttachmentE5D1B020",
              },
              ":SecretString:dbname::}}",
            ],
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "DatabaseauthUrlParameter27067EF6": Object {
      "Properties": Object {
        "Description": "The standard connection PostgreSQL URI format with \\"?search_path=auth\\".",
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/",
              Object {
                "Ref": "AWS::StackName",
              },
              "/Database/Url/search_path/auth",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Fn::Join": Array [
            "",
            Array [
              "postgres://{{resolve:secretsmanager:",
              Object {
                "Ref": "DatabaseSecretAttachmentE5D1B020",
              },
              ":SecretString:username::}}:{{resolve:secretsmanager:",
              Object {
                "Ref": "DatabaseSecretAttachmentE5D1B020",
              },
              ":SecretString:password::}}@{{resolve:secretsmanager:",
              Object {
                "Ref": "DatabaseSecretAttachmentE5D1B020",
              },
              ":SecretString:host::}}:{{resolve:secretsmanager:",
              Object {
                "Ref": "DatabaseSecretAttachmentE5D1B020",
              },
              ":SecretString:port::}}/{{resolve:secretsmanager:",
              Object {
                "Ref": "DatabaseSecretAttachmentE5D1B020",
              },
              ":SecretString:dbname::}}?search_path=auth",
            ],
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "FacebookClientIdD49EC273": Object {
      "Properties": Object {
        "Description": "The OAuth2 Client ID registered with the external provider.",
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/",
              Object {
                "Ref": "AWS::StackName",
              },
              "/Auth/External/Facebook/ClientId",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Ref": "FacebookClientIdParameterF8F9E3CB",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "FacebookSecret4142F291": Object {
      "Properties": Object {
        "Description": "The OAuth2 Client Secret provided by the external provider when you registered.",
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/",
              Object {
                "Ref": "AWS::StackName",
              },
              "/Auth/External/Facebook/Secret",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Ref": "FacebookSecretParameter0FEABC80",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "GitHubClientIdF139378A": Object {
      "Properties": Object {
        "Description": "The OAuth2 Client ID registered with the external provider.",
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/",
              Object {
                "Ref": "AWS::StackName",
              },
              "/Auth/External/GitHub/ClientId",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Ref": "GitHubClientIdParameterEB9B453C",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "GitHubSecret0C4A5322": Object {
      "Properties": Object {
        "Description": "The OAuth2 Client Secret provided by the external provider when you registered.",
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/",
              Object {
                "Ref": "AWS::StackName",
              },
              "/Auth/External/GitHub/Secret",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Ref": "GitHubSecretParameter60DD8371",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "GoogleClientIdF5AAE2C3": Object {
      "Properties": Object {
        "Description": "The OAuth2 Client ID registered with the external provider.",
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/",
              Object {
                "Ref": "AWS::StackName",
              },
              "/Auth/External/Google/ClientId",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Ref": "GoogleClientIdParameter10AB1CB7",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "GoogleSecret3B43D818": Object {
      "Properties": Object {
        "Description": "The OAuth2 Client Secret provided by the external provider when you registered.",
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/",
              Object {
                "Ref": "AWS::StackName",
              },
              "/Auth/External/Google/Secret",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Ref": "GoogleSecretParameterD567D187",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "KongForceDeployFunction5F4BDB5C": Object {
      "DependsOn": Array [
        "KongForceDeployFunctionServiceRoleDefaultPolicy9EF28809",
        "KongForceDeployFunctionServiceRole446657AE",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "8d678058f0eb8312a176152d7bdc2392d3a97980a0b4c6a5af633d405b11038b.zip",
        },
        "Description": "Supabase - Force deploy ECS service function",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "ECS_CLUSTER_NAME": Object {
              "Ref": "ClusterEB0386A7",
            },
            "ECS_SERVICE_NAME": Object {
              "Fn::GetAtt": Array [
                "KongSvcServiceE14A19D7",
                "Name",
              ],
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "KongForceDeployFunctionServiceRole446657AE",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "KongForceDeployFunctionServiceRole446657AE": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "KongForceDeployFunctionServiceRoleDefaultPolicy9EF28809": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "ecs:UpdateService",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "KongSvcServiceE14A19D7",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "KongForceDeployFunctionServiceRoleDefaultPolicy9EF28809",
        "Roles": Array [
          Object {
            "Ref": "KongForceDeployFunctionServiceRole446657AE",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "KongLoadBalancerD341ED7C": Object {
      "DependsOn": Array [
        "VPCPublicSubnet1DefaultRoute91CEF279",
        "VPCPublicSubnet2DefaultRouteB7481BBA",
      ],
      "Properties": Object {
        "LoadBalancerAttributes": Array [
          Object {
            "Key": "deletion_protection.enabled",
            "Value": "false",
          },
        ],
        "Scheme": "internet-facing",
        "Subnets": Array [
          Object {
            "Ref": "VPCPublicSubnet1SubnetB4246D30",
          },
          Object {
            "Ref": "VPCPublicSubnet2Subnet74179F39",
          },
        ],
        "Type": "network",
      },
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
    },
    "KongLoadBalancerListenerA03182E0": Object {
      "Properties": Object {
        "DefaultActions": Array [
          Object {
            "TargetGroupArn": Object {
              "Ref": "KongTargetGroupD0277B2A",
            },
            "Type": "forward",
          },
        ],
        "LoadBalancerArn": Object {
          "Ref": "KongLoadBalancerD341ED7C",
        },
        "Port": 80,
        "Protocol": "TCP",
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "KongLogs4BD50491": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "RetentionInDays": 30,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "KongSvcCloudmapServiceF8523DCA": Object {
      "Properties": Object {
        "DnsConfig": Object {
          "DnsRecords": Array [
            Object {
              "TTL": 10,
              "Type": "SRV",
            },
            Object {
              "TTL": 10,
              "Type": "A",
            },
          ],
          "NamespaceId": Object {
            "Fn::GetAtt": Array [
              "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
              "Id",
            ],
          },
          "RoutingPolicy": "MULTIVALUE",
        },
        "HealthCheckCustomConfig": Object {
          "FailureThreshold": 1,
        },
        "Name": "kong",
        "NamespaceId": Object {
          "Fn::GetAtt": Array [
            "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
            "Id",
          ],
        },
      },
      "Type": "AWS::ServiceDiscovery::Service",
    },
    "KongSvcSecurityGroupD458B522": Object {
      "Properties": Object {
        "GroupDescription": "Supabase-no-option/Kong/Svc/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": Object {
              "Fn::GetAtt": Array [
                "VPCB9E5F0B4",
                "CidrBlock",
              ],
            },
            "Description": "NLB healthcheck",
            "FromPort": 8100,
            "IpProtocol": "tcp",
            "ToPort": 8100,
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "KongSvcSecurityGroupfromIndirectPeer80002858A8A7": Object {
      "Properties": Object {
        "Description": "CloudFront",
        "FromPort": 8000,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "KongSvcSecurityGroupD458B522",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourcePrefixListId": Object {
          "Fn::GetAtt": Array [
            "CloudFrontManagedPrefixList4E30A88B",
            "PrefixLists.0.PrefixListId",
          ],
        },
        "ToPort": 8000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "KongSvcServiceE14A19D7": Object {
      "DependsOn": Array [
        "KongLoadBalancerListenerA03182E0",
      ],
      "Properties": Object {
        "Cluster": Object {
          "Ref": "ClusterEB0386A7",
        },
        "DeploymentConfiguration": Object {
          "DeploymentCircuitBreaker": Object {
            "Enable": true,
            "Rollback": true,
          },
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "DeploymentController": Object {
          "Type": "ECS",
        },
        "EnableECSManagedTags": true,
        "HealthCheckGracePeriodSeconds": 60,
        "LaunchType": "FARGATE",
        "LoadBalancers": Array [
          Object {
            "ContainerName": "app",
            "ContainerPort": 8000,
            "TargetGroupArn": Object {
              "Ref": "KongTargetGroupD0277B2A",
            },
          },
        ],
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "KongSvcSecurityGroupD458B522",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Array [
              Object {
                "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
              },
              Object {
                "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
              },
            ],
          },
        },
        "PropagateTags": "SERVICE",
        "ServiceRegistries": Array [
          Object {
            "ContainerName": "app",
            "ContainerPort": 8000,
            "RegistryArn": Object {
              "Fn::GetAtt": Array [
                "KongSvcCloudmapServiceF8523DCA",
                "Arn",
              ],
            },
          },
        ],
        "TaskDefinition": Object {
          "Ref": "KongTaskDefinitionAE44544D",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "KongSvcTaskCountTargetD123B28B": Object {
      "Properties": Object {
        "MaxCapacity": 20,
        "MinCapacity": 1,
        "ResourceId": Object {
          "Fn::Join": Array [
            "",
            Array [
              "service/",
              Object {
                "Ref": "ClusterEB0386A7",
              },
              "/",
              Object {
                "Fn::GetAtt": Array [
                  "KongSvcServiceE14A19D7",
                  "Name",
                ],
              },
            ],
          ],
        },
        "RoleARN": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":iam::",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService",
            ],
          ],
        },
        "ScalableDimension": "ecs:service:DesiredCount",
        "ServiceNamespace": "ecs",
      },
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
    },
    "KongSvcTaskCountTargetScaleOnCpu8A2BCD73": Object {
      "Properties": Object {
        "PolicyName": "SupabasenooptionKongSvcTaskCountTargetScaleOnCpu241D0EC0",
        "PolicyType": "TargetTrackingScaling",
        "ScalingTargetId": Object {
          "Ref": "KongSvcTaskCountTargetD123B28B",
        },
        "TargetTrackingScalingPolicyConfiguration": Object {
          "PredefinedMetricSpecification": Object {
            "PredefinedMetricType": "ECSServiceAverageCPUUtilization",
          },
          "ScaleInCooldown": 60,
          "ScaleOutCooldown": 60,
          "TargetValue": 50,
        },
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
    },
    "KongTargetGroupD0277B2A": Object {
      "Properties": Object {
        "HealthCheckIntervalSeconds": 10,
        "HealthCheckPort": "8100",
        "Port": 8000,
        "Protocol": "TCP",
        "TargetGroupAttributes": Array [
          Object {
            "Key": "deregistration_delay.timeout_seconds",
            "Value": "30",
          },
          Object {
            "Key": "preserve_client_ip.enabled",
            "Value": "true",
          },
        ],
        "TargetType": "ip",
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
    },
    "KongTaskDefinitionAE44544D": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "Environment": Array [
              Object {
                "Name": "KONG_DNS_ORDER",
                "Value": "LAST,A,CNAME",
              },
              Object {
                "Name": "KONG_PLUGINS",
                "Value": "request-transformer,cors,key-auth,acl",
              },
              Object {
                "Name": "KONG_STATUS_LISTEN",
                "Value": "0.0.0.0:8100",
              },
            ],
            "Essential": true,
            "HealthCheck": Object {
              "Command": Array [
                "CMD",
                "kong",
                "health",
              ],
              "Interval": 10,
              "Retries": 3,
              "Timeout": 10,
            },
            "Image": "public.ecr.aws/u3p7q2r8/kong:latest",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "KongLogs4BD50491",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "Name": "app",
            "PortMappings": Array [
              Object {
                "ContainerPort": 8000,
                "Protocol": "tcp",
              },
              Object {
                "ContainerPort": 8100,
                "Protocol": "tcp",
              },
            ],
            "Secrets": Array [
              Object {
                "Name": "ANON_KEY",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "SupabaseJwtAnonKey90E80F90",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "SERVICE_KEY",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "SupabaseJwtServiceRoleKey94675B64",
                      },
                    ],
                  ],
                },
              },
            ],
            "Ulimits": Array [
              Object {
                "HardLimit": 65536,
                "Name": "nofile",
                "SoftLimit": 65536,
              },
            ],
          },
        ],
        "Cpu": "1024",
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "KongTaskDefinitionExecutionRole2593435E",
            "Arn",
          ],
        },
        "Family": "SupabasenooptionKongTaskDefinitionCA0C5F0B",
        "Memory": "2048",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "RuntimePlatform": Object {
          "CpuArchitecture": "ARM64",
          "OperatingSystemFamily": "LINUX",
        },
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "KongTaskDefinitionTaskRole59341FD6",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "KongTaskDefinitionExecutionRole2593435E": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "KongTaskDefinitionExecutionRoleDefaultPolicyF6446340": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "KongLogs4BD50491",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "SupabaseJwtAnonKey90E80F90",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "SupabaseJwtServiceRoleKey94675B64",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "KongTaskDefinitionExecutionRoleDefaultPolicyF6446340",
        "Roles": Array [
          Object {
            "Ref": "KongTaskDefinitionExecutionRole2593435E",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "KongTaskDefinitionTaskRole59341FD6": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "MetaForceDeployFunction26B610DA": Object {
      "DependsOn": Array [
        "MetaForceDeployFunctionServiceRoleDefaultPolicy4B531C05",
        "MetaForceDeployFunctionServiceRole22BD4245",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "8d678058f0eb8312a176152d7bdc2392d3a97980a0b4c6a5af633d405b11038b.zip",
        },
        "Description": "Supabase - Force deploy ECS service function",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "ECS_CLUSTER_NAME": Object {
              "Ref": "ClusterEB0386A7",
            },
            "ECS_SERVICE_NAME": Object {
              "Fn::GetAtt": Array [
                "MetaSvcService58BFAF30",
                "Name",
              ],
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "MetaForceDeployFunctionServiceRole22BD4245",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "MetaForceDeployFunctionServiceRole22BD4245": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "MetaForceDeployFunctionServiceRoleDefaultPolicy4B531C05": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "ecs:UpdateService",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "MetaSvcService58BFAF30",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "MetaForceDeployFunctionServiceRoleDefaultPolicy4B531C05",
        "Roles": Array [
          Object {
            "Ref": "MetaForceDeployFunctionServiceRole22BD4245",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "MetaLogs80FD71C7": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "RetentionInDays": 30,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "MetaSvcCloudmapService5BBAEB97": Object {
      "Properties": Object {
        "DnsConfig": Object {
          "DnsRecords": Array [
            Object {
              "TTL": 10,
              "Type": "SRV",
            },
            Object {
              "TTL": 10,
              "Type": "A",
            },
          ],
          "NamespaceId": Object {
            "Fn::GetAtt": Array [
              "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
              "Id",
            ],
          },
          "RoutingPolicy": "MULTIVALUE",
        },
        "HealthCheckCustomConfig": Object {
          "FailureThreshold": 1,
        },
        "Name": "meta",
        "NamespaceId": Object {
          "Fn::GetAtt": Array [
            "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
            "Id",
          ],
        },
      },
      "Type": "AWS::ServiceDiscovery::Service",
    },
    "MetaSvcSecurityGroup28D90BB4": Object {
      "Properties": Object {
        "GroupDescription": "Supabase-no-option/Meta/Svc/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "MetaSvcSecurityGroupfromSupabasenooptionKongSvcSecurityGroup993120C28080ED19C2A2": Object {
      "Properties": Object {
        "Description": "from SupabasenooptionKongSvcSecurityGroup993120C2:8080",
        "FromPort": 8080,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "MetaSvcSecurityGroup28D90BB4",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "KongSvcSecurityGroupD458B522",
            "GroupId",
          ],
        },
        "ToPort": 8080,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "MetaSvcService58BFAF30": Object {
      "DependsOn": Array [
        "DatabaseInstance1844F58FD",
      ],
      "Properties": Object {
        "Cluster": Object {
          "Ref": "ClusterEB0386A7",
        },
        "DeploymentConfiguration": Object {
          "DeploymentCircuitBreaker": Object {
            "Enable": true,
            "Rollback": true,
          },
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "DeploymentController": Object {
          "Type": "ECS",
        },
        "EnableECSManagedTags": true,
        "LaunchType": "FARGATE",
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "MetaSvcSecurityGroup28D90BB4",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Array [
              Object {
                "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
              },
              Object {
                "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
              },
            ],
          },
        },
        "PropagateTags": "SERVICE",
        "ServiceRegistries": Array [
          Object {
            "ContainerName": "app",
            "ContainerPort": 8080,
            "RegistryArn": Object {
              "Fn::GetAtt": Array [
                "MetaSvcCloudmapService5BBAEB97",
                "Arn",
              ],
            },
          },
        ],
        "TaskDefinition": Object {
          "Ref": "MetaTaskDefinition286A1512",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "MetaSvcTaskCountTarget644CBD43": Object {
      "Properties": Object {
        "MaxCapacity": 20,
        "MinCapacity": 1,
        "ResourceId": Object {
          "Fn::Join": Array [
            "",
            Array [
              "service/",
              Object {
                "Ref": "ClusterEB0386A7",
              },
              "/",
              Object {
                "Fn::GetAtt": Array [
                  "MetaSvcService58BFAF30",
                  "Name",
                ],
              },
            ],
          ],
        },
        "RoleARN": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":iam::",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService",
            ],
          ],
        },
        "ScalableDimension": "ecs:service:DesiredCount",
        "ServiceNamespace": "ecs",
      },
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
    },
    "MetaSvcTaskCountTargetScaleOnCpuF6112AC5": Object {
      "Properties": Object {
        "PolicyName": "SupabasenooptionMetaSvcTaskCountTargetScaleOnCpuED1A6498",
        "PolicyType": "TargetTrackingScaling",
        "ScalingTargetId": Object {
          "Ref": "MetaSvcTaskCountTarget644CBD43",
        },
        "TargetTrackingScalingPolicyConfiguration": Object {
          "PredefinedMetricSpecification": Object {
            "PredefinedMetricType": "ECSServiceAverageCPUUtilization",
          },
          "ScaleInCooldown": 60,
          "ScaleOutCooldown": 60,
          "TargetValue": 50,
        },
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
    },
    "MetaTaskDefinition286A1512": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "Environment": Array [
              Object {
                "Name": "PG_META_PORT",
                "Value": "8080",
              },
            ],
            "Essential": true,
            "Image": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "public.ecr.aws/t3w2s2c9/postgres-meta:",
                  Object {
                    "Ref": "PostgresMetaApiVersionParameter",
                  },
                ],
              ],
            },
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "MetaLogs80FD71C7",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "Name": "app",
            "PortMappings": Array [
              Object {
                "ContainerPort": 8080,
                "Protocol": "tcp",
              },
            ],
            "Secrets": Array [
              Object {
                "Name": "PG_META_DB_HOST",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DatabaseSecretAttachmentE5D1B020",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "PG_META_DB_PORT",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DatabaseSecretAttachmentE5D1B020",
                      },
                      ":port::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "PG_META_DB_NAME",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DatabaseSecretAttachmentE5D1B020",
                      },
                      ":dbname::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "PG_META_DB_USER",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DatabaseSecretAttachmentE5D1B020",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "PG_META_DB_PASSWORD",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DatabaseSecretAttachmentE5D1B020",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
            "Ulimits": Array [
              Object {
                "HardLimit": 65536,
                "Name": "nofile",
                "SoftLimit": 65536,
              },
            ],
          },
        ],
        "Cpu": "1024",
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "MetaTaskDefinitionExecutionRole93D83399",
            "Arn",
          ],
        },
        "Family": "SupabasenooptionMetaTaskDefinitionD398D13B",
        "Memory": "2048",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "RuntimePlatform": Object {
          "CpuArchitecture": "ARM64",
          "OperatingSystemFamily": "LINUX",
        },
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "MetaTaskDefinitionTaskRole18CD498C",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "MetaTaskDefinitionExecutionRole93D83399": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "MetaTaskDefinitionExecutionRoleDefaultPolicy5A6F1F9C": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "MetaLogs80FD71C7",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "DatabaseSecretAttachmentE5D1B020",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "MetaTaskDefinitionExecutionRoleDefaultPolicy5A6F1F9C",
        "Roles": Array [
          Object {
            "Ref": "MetaTaskDefinitionExecutionRole93D83399",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "MetaTaskDefinitionTaskRole18CD498C": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "ParameterGroup5E32DECB": Object {
      "Properties": Object {
        "Description": "Supabase parameter group for aurora-postgresql",
        "Family": "aurora-postgresql14",
        "Parameters": Object {
          "autovacuum_max_workers": "GREATEST({DBInstanceClassMemory/64371566592},2)",
          "max_logical_replication_workers": "4",
          "max_parallel_workers": "2",
          "max_replication_slots": "20",
          "max_slot_wal_keep_size": "1024",
          "max_wal_senders": "20",
          "rds.logical_replication": "1",
          "shared_preload_libraries": "pg_stat_statements, pgaudit, pg_cron",
        },
      },
      "Type": "AWS::RDS::DBClusterParameterGroup",
    },
    "RealtimeForceDeployFunctionFE2E409A": Object {
      "DependsOn": Array [
        "RealtimeForceDeployFunctionServiceRoleDefaultPolicyCD107644",
        "RealtimeForceDeployFunctionServiceRole6E959CD8",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "8d678058f0eb8312a176152d7bdc2392d3a97980a0b4c6a5af633d405b11038b.zip",
        },
        "Description": "Supabase - Force deploy ECS service function",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "ECS_CLUSTER_NAME": Object {
              "Ref": "ClusterEB0386A7",
            },
            "ECS_SERVICE_NAME": Object {
              "Fn::GetAtt": Array [
                "RealtimeSvcService05F54057",
                "Name",
              ],
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "RealtimeForceDeployFunctionServiceRole6E959CD8",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "RealtimeForceDeployFunctionServiceRole6E959CD8": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "RealtimeForceDeployFunctionServiceRoleDefaultPolicyCD107644": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "ecs:UpdateService",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "RealtimeSvcService05F54057",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "RealtimeForceDeployFunctionServiceRoleDefaultPolicyCD107644",
        "Roles": Array [
          Object {
            "Ref": "RealtimeForceDeployFunctionServiceRole6E959CD8",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "RealtimeLogs5C43159D": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "RetentionInDays": 30,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "RealtimeSvcCloudmapServiceF8CD5DF6": Object {
      "Properties": Object {
        "DnsConfig": Object {
          "DnsRecords": Array [
            Object {
              "TTL": 10,
              "Type": "SRV",
            },
            Object {
              "TTL": 10,
              "Type": "A",
            },
          ],
          "NamespaceId": Object {
            "Fn::GetAtt": Array [
              "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
              "Id",
            ],
          },
          "RoutingPolicy": "MULTIVALUE",
        },
        "HealthCheckCustomConfig": Object {
          "FailureThreshold": 1,
        },
        "Name": "realtime",
        "NamespaceId": Object {
          "Fn::GetAtt": Array [
            "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
            "Id",
          ],
        },
      },
      "Type": "AWS::ServiceDiscovery::Service",
    },
    "RealtimeSvcSecurityGroup15A1991B": Object {
      "Properties": Object {
        "GroupDescription": "Supabase-no-option/Realtime/Svc/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "RealtimeSvcSecurityGroupfromSupabasenooptionKongSvcSecurityGroup993120C2400011F5663D": Object {
      "Properties": Object {
        "Description": "from SupabasenooptionKongSvcSecurityGroup993120C2:4000",
        "FromPort": 4000,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "RealtimeSvcSecurityGroup15A1991B",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "KongSvcSecurityGroupD458B522",
            "GroupId",
          ],
        },
        "ToPort": 4000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "RealtimeSvcService05F54057": Object {
      "DependsOn": Array [
        "DatabaseInstance1844F58FD",
      ],
      "Properties": Object {
        "Cluster": Object {
          "Ref": "ClusterEB0386A7",
        },
        "DeploymentConfiguration": Object {
          "DeploymentCircuitBreaker": Object {
            "Enable": true,
            "Rollback": true,
          },
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "DeploymentController": Object {
          "Type": "ECS",
        },
        "EnableECSManagedTags": true,
        "LaunchType": "FARGATE",
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "RealtimeSvcSecurityGroup15A1991B",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Array [
              Object {
                "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
              },
              Object {
                "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
              },
            ],
          },
        },
        "PropagateTags": "SERVICE",
        "ServiceRegistries": Array [
          Object {
            "ContainerName": "app",
            "ContainerPort": 4000,
            "RegistryArn": Object {
              "Fn::GetAtt": Array [
                "RealtimeSvcCloudmapServiceF8CD5DF6",
                "Arn",
              ],
            },
          },
        ],
        "TaskDefinition": Object {
          "Ref": "RealtimeTaskDefinition52361C2C",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "RealtimeTaskDefinition52361C2C": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "Command": Array [
              "bash",
              "-c",
              "./prod/rel/realtime/bin/realtime eval Realtime.Release.migrate && ./prod/rel/realtime/bin/realtime start",
            ],
            "Environment": Array [
              Object {
                "Name": "DB_SSL",
                "Value": "false",
              },
              Object {
                "Name": "PORT",
                "Value": "4000",
              },
              Object {
                "Name": "REPLICATION_MODE",
                "Value": "RLS",
              },
              Object {
                "Name": "REPLICATION_POLL_INTERVAL",
                "Value": "300",
              },
              Object {
                "Name": "SUBSCRIPTION_SYNC_INTERVAL",
                "Value": "60000",
              },
              Object {
                "Name": "SECURE_CHANNELS",
                "Value": "true",
              },
              Object {
                "Name": "SLOT_NAME",
                "Value": "realtime_rls",
              },
              Object {
                "Name": "TEMPORARY_SLOT",
                "Value": "true",
              },
              Object {
                "Name": "MAX_REPLICATION_LAG_MB",
                "Value": "1000",
              },
            ],
            "Essential": true,
            "Image": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "public.ecr.aws/t3w2s2c9/realtime:",
                  Object {
                    "Ref": "RealtimeApiVersionParameter",
                  },
                ],
              ],
            },
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "RealtimeLogs5C43159D",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "Name": "app",
            "PortMappings": Array [
              Object {
                "ContainerPort": 4000,
                "Protocol": "tcp",
              },
            ],
            "Secrets": Array [
              Object {
                "Name": "JWT_SECRET",
                "ValueFrom": Object {
                  "Ref": "SupabaseJwtSecretFA404A75",
                },
              },
              Object {
                "Name": "DB_HOST",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DatabaseSecretAttachmentE5D1B020",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "DB_PORT",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DatabaseSecretAttachmentE5D1B020",
                      },
                      ":port::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "DB_NAME",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DatabaseSecretAttachmentE5D1B020",
                      },
                      ":dbname::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "DB_USER",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DatabaseSecretAttachmentE5D1B020",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "DB_PASSWORD",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DatabaseSecretAttachmentE5D1B020",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
            "Ulimits": Array [
              Object {
                "HardLimit": 65536,
                "Name": "nofile",
                "SoftLimit": 65536,
              },
            ],
          },
        ],
        "Cpu": "1024",
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "RealtimeTaskDefinitionExecutionRoleCD260B29",
            "Arn",
          ],
        },
        "Family": "SupabasenooptionRealtimeTaskDefinitionA9B37122",
        "Memory": "2048",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "RuntimePlatform": Object {
          "CpuArchitecture": "ARM64",
          "OperatingSystemFamily": "LINUX",
        },
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "RealtimeTaskDefinitionTaskRole8324A2B1",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "RealtimeTaskDefinitionExecutionRoleCD260B29": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "RealtimeTaskDefinitionExecutionRoleDefaultPolicyBD7C355B": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "RealtimeLogs5C43159D",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "SupabaseJwtSecretFA404A75",
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "DatabaseSecretAttachmentE5D1B020",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "RealtimeTaskDefinitionExecutionRoleDefaultPolicyBD7C355B",
        "Roles": Array [
          Object {
            "Ref": "RealtimeTaskDefinitionExecutionRoleCD260B29",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "RealtimeTaskDefinitionTaskRole8324A2B1": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "RestForceDeployFunction6022B502": Object {
      "DependsOn": Array [
        "RestForceDeployFunctionServiceRoleDefaultPolicyD312FEA0",
        "RestForceDeployFunctionServiceRole3E67F069",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "8d678058f0eb8312a176152d7bdc2392d3a97980a0b4c6a5af633d405b11038b.zip",
        },
        "Description": "Supabase - Force deploy ECS service function",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "ECS_CLUSTER_NAME": Object {
              "Ref": "ClusterEB0386A7",
            },
            "ECS_SERVICE_NAME": Object {
              "Fn::GetAtt": Array [
                "RestSvcServiceCEB7F559",
                "Name",
              ],
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "RestForceDeployFunctionServiceRole3E67F069",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "RestForceDeployFunctionServiceRole3E67F069": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "RestForceDeployFunctionServiceRoleDefaultPolicyD312FEA0": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "ecs:UpdateService",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "RestSvcServiceCEB7F559",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "RestForceDeployFunctionServiceRoleDefaultPolicyD312FEA0",
        "Roles": Array [
          Object {
            "Ref": "RestForceDeployFunctionServiceRole3E67F069",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "RestLogsE8B49088": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "RetentionInDays": 30,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "RestSvcCloudmapServiceC2707820": Object {
      "Properties": Object {
        "DnsConfig": Object {
          "DnsRecords": Array [
            Object {
              "TTL": 10,
              "Type": "SRV",
            },
            Object {
              "TTL": 10,
              "Type": "A",
            },
          ],
          "NamespaceId": Object {
            "Fn::GetAtt": Array [
              "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
              "Id",
            ],
          },
          "RoutingPolicy": "MULTIVALUE",
        },
        "HealthCheckCustomConfig": Object {
          "FailureThreshold": 1,
        },
        "Name": "rest",
        "NamespaceId": Object {
          "Fn::GetAtt": Array [
            "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
            "Id",
          ],
        },
      },
      "Type": "AWS::ServiceDiscovery::Service",
    },
    "RestSvcSecurityGroup4F37982C": Object {
      "Properties": Object {
        "GroupDescription": "Supabase-no-option/Rest/Svc/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "RestSvcSecurityGroupfromSupabasenooptionAuthSvcSecurityGroup2467692730001BA59F69": Object {
      "Properties": Object {
        "Description": "from SupabasenooptionAuthSvcSecurityGroup24676927:3000",
        "FromPort": 3000,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "RestSvcSecurityGroup4F37982C",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "AuthSvcSecurityGroup71415F29",
            "GroupId",
          ],
        },
        "ToPort": 3000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "RestSvcSecurityGroupfromSupabasenooptionKongSvcSecurityGroup993120C23000474211D2": Object {
      "Properties": Object {
        "Description": "from SupabasenooptionKongSvcSecurityGroup993120C2:3000",
        "FromPort": 3000,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "RestSvcSecurityGroup4F37982C",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "KongSvcSecurityGroupD458B522",
            "GroupId",
          ],
        },
        "ToPort": 3000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "RestSvcSecurityGroupfromSupabasenooptionStorageSvcSecurityGroupD6BFDB313000583D5F64": Object {
      "Properties": Object {
        "Description": "from SupabasenooptionStorageSvcSecurityGroupD6BFDB31:3000",
        "FromPort": 3000,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "RestSvcSecurityGroup4F37982C",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "StorageSvcSecurityGroup134E6883",
            "GroupId",
          ],
        },
        "ToPort": 3000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "RestSvcServiceCEB7F559": Object {
      "DependsOn": Array [
        "DatabaseInstance1844F58FD",
      ],
      "Properties": Object {
        "Cluster": Object {
          "Ref": "ClusterEB0386A7",
        },
        "DeploymentConfiguration": Object {
          "DeploymentCircuitBreaker": Object {
            "Enable": true,
            "Rollback": true,
          },
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "DeploymentController": Object {
          "Type": "ECS",
        },
        "EnableECSManagedTags": true,
        "LaunchType": "FARGATE",
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "RestSvcSecurityGroup4F37982C",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Array [
              Object {
                "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
              },
              Object {
                "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
              },
            ],
          },
        },
        "PropagateTags": "SERVICE",
        "ServiceRegistries": Array [
          Object {
            "ContainerName": "app",
            "ContainerPort": 3000,
            "RegistryArn": Object {
              "Fn::GetAtt": Array [
                "RestSvcCloudmapServiceC2707820",
                "Arn",
              ],
            },
          },
        ],
        "TaskDefinition": Object {
          "Ref": "RestTaskDefinition4EBA60E9",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "RestSvcTaskCountTarget16F159C2": Object {
      "Properties": Object {
        "MaxCapacity": 20,
        "MinCapacity": 1,
        "ResourceId": Object {
          "Fn::Join": Array [
            "",
            Array [
              "service/",
              Object {
                "Ref": "ClusterEB0386A7",
              },
              "/",
              Object {
                "Fn::GetAtt": Array [
                  "RestSvcServiceCEB7F559",
                  "Name",
                ],
              },
            ],
          ],
        },
        "RoleARN": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":iam::",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService",
            ],
          ],
        },
        "ScalableDimension": "ecs:service:DesiredCount",
        "ServiceNamespace": "ecs",
      },
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
    },
    "RestSvcTaskCountTargetScaleOnCpuB698E9D3": Object {
      "Properties": Object {
        "PolicyName": "SupabasenooptionRestSvcTaskCountTargetScaleOnCpu92E09677",
        "PolicyType": "TargetTrackingScaling",
        "ScalingTargetId": Object {
          "Ref": "RestSvcTaskCountTarget16F159C2",
        },
        "TargetTrackingScalingPolicyConfiguration": Object {
          "PredefinedMetricSpecification": Object {
            "PredefinedMetricType": "ECSServiceAverageCPUUtilization",
          },
          "ScaleInCooldown": 60,
          "ScaleOutCooldown": 60,
          "TargetValue": 50,
        },
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
    },
    "RestTaskDefinition4EBA60E9": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "Environment": Array [
              Object {
                "Name": "PGRST_DB_SCHEMAS",
                "Value": "public,storage,graphql_public",
              },
              Object {
                "Name": "PGRST_DB_ANON_ROLE",
                "Value": "anon",
              },
              Object {
                "Name": "PGRST_DB_USE_LEGACY_GUCS",
                "Value": "false",
              },
            ],
            "Essential": true,
            "Image": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "postgrest/postgrest:",
                  Object {
                    "Ref": "RestApiVersionParameter",
                  },
                ],
              ],
            },
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "RestLogsE8B49088",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "Name": "app",
            "PortMappings": Array [
              Object {
                "ContainerPort": 3000,
                "Protocol": "tcp",
              },
            ],
            "Secrets": Array [
              Object {
                "Name": "PGRST_DB_URI",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "DatabaseUrlParameter81075D88",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "PGRST_JWT_SECRET",
                "ValueFrom": Object {
                  "Ref": "SupabaseJwtSecretFA404A75",
                },
              },
            ],
            "Ulimits": Array [
              Object {
                "HardLimit": 65536,
                "Name": "nofile",
                "SoftLimit": 65536,
              },
            ],
          },
        ],
        "Cpu": "1024",
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "RestTaskDefinitionExecutionRole3F0CBE29",
            "Arn",
          ],
        },
        "Family": "SupabasenooptionRestTaskDefinition333E2B9C",
        "Memory": "2048",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "RuntimePlatform": Object {
          "CpuArchitecture": "ARM64",
          "OperatingSystemFamily": "LINUX",
        },
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "RestTaskDefinitionTaskRole94551FBF",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "RestTaskDefinitionExecutionRole3F0CBE29": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "RestTaskDefinitionExecutionRoleDefaultPolicyB130F5B5": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "RestLogsE8B49088",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "DatabaseUrlParameter81075D88",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "SupabaseJwtSecretFA404A75",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "RestTaskDefinitionExecutionRoleDefaultPolicyB130F5B5",
        "Roles": Array [
          Object {
            "Ref": "RestTaskDefinitionExecutionRole3F0CBE29",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "RestTaskDefinitionTaskRole94551FBF": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "StorageForceDeployFunction7B52931B": Object {
      "DependsOn": Array [
        "StorageForceDeployFunctionServiceRoleDefaultPolicyBA75E2CB",
        "StorageForceDeployFunctionServiceRoleA311B812",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "8d678058f0eb8312a176152d7bdc2392d3a97980a0b4c6a5af633d405b11038b.zip",
        },
        "Description": "Supabase - Force deploy ECS service function",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "ECS_CLUSTER_NAME": Object {
              "Ref": "ClusterEB0386A7",
            },
            "ECS_SERVICE_NAME": Object {
              "Fn::GetAtt": Array [
                "StorageSvcServiceA4DA327A",
                "Name",
              ],
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "StorageForceDeployFunctionServiceRoleA311B812",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "StorageForceDeployFunctionServiceRoleA311B812": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "StorageForceDeployFunctionServiceRoleDefaultPolicyBA75E2CB": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "ecs:UpdateService",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "StorageSvcServiceA4DA327A",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "StorageForceDeployFunctionServiceRoleDefaultPolicyBA75E2CB",
        "Roles": Array [
          Object {
            "Ref": "StorageForceDeployFunctionServiceRoleA311B812",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "StorageLogs2A2D4D26": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "RetentionInDays": 30,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "StorageSvcCloudmapServiceEC9FA74C": Object {
      "Properties": Object {
        "DnsConfig": Object {
          "DnsRecords": Array [
            Object {
              "TTL": 10,
              "Type": "SRV",
            },
            Object {
              "TTL": 10,
              "Type": "A",
            },
          ],
          "NamespaceId": Object {
            "Fn::GetAtt": Array [
              "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
              "Id",
            ],
          },
          "RoutingPolicy": "MULTIVALUE",
        },
        "HealthCheckCustomConfig": Object {
          "FailureThreshold": 1,
        },
        "Name": "storage",
        "NamespaceId": Object {
          "Fn::GetAtt": Array [
            "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
            "Id",
          ],
        },
      },
      "Type": "AWS::ServiceDiscovery::Service",
    },
    "StorageSvcSecurityGroup134E6883": Object {
      "Properties": Object {
        "GroupDescription": "Supabase-no-option/Storage/Svc/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "StorageSvcSecurityGroupfromSupabasenooptionKongSvcSecurityGroup993120C2500058E12BB2": Object {
      "Properties": Object {
        "Description": "from SupabasenooptionKongSvcSecurityGroup993120C2:5000",
        "FromPort": 5000,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "StorageSvcSecurityGroup134E6883",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "KongSvcSecurityGroupD458B522",
            "GroupId",
          ],
        },
        "ToPort": 5000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "StorageSvcServiceA4DA327A": Object {
      "DependsOn": Array [
        "DatabaseInstance1844F58FD",
      ],
      "Properties": Object {
        "Cluster": Object {
          "Ref": "ClusterEB0386A7",
        },
        "DeploymentConfiguration": Object {
          "DeploymentCircuitBreaker": Object {
            "Enable": true,
            "Rollback": true,
          },
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "DeploymentController": Object {
          "Type": "ECS",
        },
        "EnableECSManagedTags": true,
        "LaunchType": "FARGATE",
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "StorageSvcSecurityGroup134E6883",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Array [
              Object {
                "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
              },
              Object {
                "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
              },
            ],
          },
        },
        "PropagateTags": "SERVICE",
        "ServiceRegistries": Array [
          Object {
            "ContainerName": "app",
            "ContainerPort": 5000,
            "RegistryArn": Object {
              "Fn::GetAtt": Array [
                "StorageSvcCloudmapServiceEC9FA74C",
                "Arn",
              ],
            },
          },
        ],
        "TaskDefinition": Object {
          "Ref": "StorageTaskDefinition6B21D26E",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "StorageSvcTaskCountTarget6971484D": Object {
      "Properties": Object {
        "MaxCapacity": 20,
        "MinCapacity": 1,
        "ResourceId": Object {
          "Fn::Join": Array [
            "",
            Array [
              "service/",
              Object {
                "Ref": "ClusterEB0386A7",
              },
              "/",
              Object {
                "Fn::GetAtt": Array [
                  "StorageSvcServiceA4DA327A",
                  "Name",
                ],
              },
            ],
          ],
        },
        "RoleARN": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":iam::",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService",
            ],
          ],
        },
        "ScalableDimension": "ecs:service:DesiredCount",
        "ServiceNamespace": "ecs",
      },
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
    },
    "StorageSvcTaskCountTargetScaleOnCpu9FD330E2": Object {
      "Properties": Object {
        "PolicyName": "SupabasenooptionStorageSvcTaskCountTargetScaleOnCpu1634B50E",
        "PolicyType": "TargetTrackingScaling",
        "ScalingTargetId": Object {
          "Ref": "StorageSvcTaskCountTarget6971484D",
        },
        "TargetTrackingScalingPolicyConfiguration": Object {
          "PredefinedMetricSpecification": Object {
            "PredefinedMetricType": "ECSServiceAverageCPUUtilization",
          },
          "ScaleInCooldown": 60,
          "ScaleOutCooldown": 60,
          "TargetValue": 50,
        },
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
    },
    "StorageTaskDefinition6B21D26E": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "Environment": Array [
              Object {
                "Name": "POSTGREST_URL",
                "Value": "http://rest.supabase.local:3000",
              },
              Object {
                "Name": "PGOPTIONS",
                "Value": "-c search_path=storage,public",
              },
              Object {
                "Name": "FILE_SIZE_LIMIT",
                "Value": "52428800",
              },
              Object {
                "Name": "STORAGE_BACKEND",
                "Value": "s3",
              },
              Object {
                "Name": "TENANT_ID",
                "Value": "default",
              },
              Object {
                "Name": "REGION",
                "Value": Object {
                  "Ref": "AWS::Region",
                },
              },
              Object {
                "Name": "GLOBAL_S3_BUCKET",
                "Value": Object {
                  "Ref": "Bucket83908E77",
                },
              },
            ],
            "Essential": true,
            "Image": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "public.ecr.aws/t3w2s2c9/storage-api:",
                  Object {
                    "Ref": "StorageApiVersionParameter",
                  },
                ],
              ],
            },
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "StorageLogs2A2D4D26",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "Name": "app",
            "PortMappings": Array [
              Object {
                "ContainerPort": 5000,
                "Protocol": "tcp",
              },
            ],
            "Secrets": Array [
              Object {
                "Name": "ANON_KEY",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "SupabaseJwtAnonKey90E80F90",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "SERVICE_KEY",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "SupabaseJwtServiceRoleKey94675B64",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "PGRST_JWT_SECRET",
                "ValueFrom": Object {
                  "Ref": "SupabaseJwtSecretFA404A75",
                },
              },
              Object {
                "Name": "DATABASE_URL",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "DatabaseUrlParameter81075D88",
                      },
                    ],
                  ],
                },
              },
            ],
            "Ulimits": Array [
              Object {
                "HardLimit": 65536,
                "Name": "nofile",
                "SoftLimit": 65536,
              },
            ],
          },
        ],
        "Cpu": "1024",
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "StorageTaskDefinitionExecutionRoleAEB5CF80",
            "Arn",
          ],
        },
        "Family": "SupabasenooptionStorageTaskDefinition0849CCE3",
        "Memory": "2048",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "RuntimePlatform": Object {
          "CpuArchitecture": "X86_64",
          "OperatingSystemFamily": "LINUX",
        },
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "StorageTaskDefinitionTaskRole24C4C137",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "StorageTaskDefinitionExecutionRoleAEB5CF80": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "StorageTaskDefinitionExecutionRoleDefaultPolicy537D0826": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "StorageLogs2A2D4D26",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "SupabaseJwtAnonKey90E80F90",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "SupabaseJwtServiceRoleKey94675B64",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "SupabaseJwtSecretFA404A75",
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "DatabaseUrlParameter81075D88",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "StorageTaskDefinitionExecutionRoleDefaultPolicy537D0826",
        "Roles": Array [
          Object {
            "Ref": "StorageTaskDefinitionExecutionRoleAEB5CF80",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "StorageTaskDefinitionTaskRole24C4C137": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "StorageTaskDefinitionTaskRoleDefaultPolicy3448147D": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "Bucket83908E77",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "Bucket83908E77",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "StorageTaskDefinitionTaskRoleDefaultPolicy3448147D",
        "Roles": Array [
          Object {
            "Ref": "StorageTaskDefinitionTaskRole24C4C137",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "StudioClient100BA227": Object {
      "Properties": Object {
        "AllowedOAuthFlows": Array [
          "code",
        ],
        "AllowedOAuthFlowsUserPoolClient": true,
        "AllowedOAuthScopes": Array [
          "openid",
        ],
        "CallbackURLs": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "https://",
                Object {
                  "Fn::GetAtt": Array [
                    "StudioLoadBalancer143227F7",
                    "DNSName",
                  ],
                },
                "/oauth2/idpresponse",
              ],
            ],
          },
        ],
        "ExplicitAuthFlows": Array [
          "ALLOW_USER_PASSWORD_AUTH",
          "ALLOW_USER_SRP_AUTH",
          "ALLOW_REFRESH_TOKEN_AUTH",
        ],
        "GenerateSecret": true,
        "LogoutURLs": Array [
          "https://example.com",
        ],
        "SupportedIdentityProviders": Array [
          "COGNITO",
        ],
        "UserPoolId": Object {
          "Ref": "StudioUserPool94F50620",
        },
      },
      "Type": "AWS::Cognito::UserPoolClient",
    },
    "StudioForceDeployFunction3EEAC04D": Object {
      "DependsOn": Array [
        "StudioForceDeployFunctionServiceRoleDefaultPolicyDDE0ACDC",
        "StudioForceDeployFunctionServiceRole41FBB942",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "8d678058f0eb8312a176152d7bdc2392d3a97980a0b4c6a5af633d405b11038b.zip",
        },
        "Description": "Supabase - Force deploy ECS service function",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "ECS_CLUSTER_NAME": Object {
              "Ref": "ClusterEB0386A7",
            },
            "ECS_SERVICE_NAME": Object {
              "Fn::GetAtt": Array [
                "StudioSvcService57CD4A48",
                "Name",
              ],
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "StudioForceDeployFunctionServiceRole41FBB942",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "StudioForceDeployFunctionServiceRole41FBB942": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "StudioForceDeployFunctionServiceRoleDefaultPolicyDDE0ACDC": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "ecs:UpdateService",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "StudioSvcService57CD4A48",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "StudioForceDeployFunctionServiceRoleDefaultPolicyDDE0ACDC",
        "Roles": Array [
          Object {
            "Ref": "StudioForceDeployFunctionServiceRole41FBB942",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "StudioLoadBalancer143227F7": Object {
      "DependsOn": Array [
        "VPCPublicSubnet1DefaultRoute91CEF279",
        "VPCPublicSubnet2DefaultRouteB7481BBA",
      ],
      "Properties": Object {
        "LoadBalancerAttributes": Array [
          Object {
            "Key": "deletion_protection.enabled",
            "Value": "false",
          },
        ],
        "Scheme": "internet-facing",
        "SecurityGroups": Array [
          Object {
            "Fn::GetAtt": Array [
              "StudioLoadBalancerSecurityGroup73100F94",
              "GroupId",
            ],
          },
        ],
        "Subnets": Array [
          Object {
            "Ref": "VPCPublicSubnet1SubnetB4246D30",
          },
          Object {
            "Ref": "VPCPublicSubnet2Subnet74179F39",
          },
        ],
        "Type": "application",
      },
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
    },
    "StudioLoadBalancerListener522B10FC": Object {
      "Properties": Object {
        "Certificates": Object {
          "Fn::If": Array [
            "StudioHttpCondition14AD1D44",
            Object {
              "Ref": "AWS::NoValue",
            },
            Array [
              Object {
                "CertificateArn": Object {
                  "Ref": "StudioCertificateArnParameterEBA639E6",
                },
              },
            ],
          ],
        },
        "DefaultActions": Array [
          Object {
            "Order": Object {
              "Fn::If": Array [
                "StudioHttpCondition14AD1D44",
                1,
                2,
              ],
            },
            "TargetGroupArn": Object {
              "Ref": "StudioTargetGroupC1E0E03D",
            },
            "Type": "forward",
          },
          Object {
            "Fn::If": Array [
              "StudioHttpCondition14AD1D44",
              Object {
                "Ref": "AWS::NoValue",
              },
              Object {
                "AuthenticateCognitoConfig": Object {
                  "UserPoolArn": Object {
                    "Fn::GetAtt": Array [
                      "StudioUserPool94F50620",
                      "Arn",
                    ],
                  },
                  "UserPoolClientId": Object {
                    "Ref": "StudioClient100BA227",
                  },
                  "UserPoolDomain": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "supabase-studio-",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                      ],
                    ],
                  },
                },
                "Order": 1,
                "Type": "authenticate-cognito",
              },
            ],
          },
        ],
        "LoadBalancerArn": Object {
          "Ref": "StudioLoadBalancer143227F7",
        },
        "Port": Object {
          "Fn::If": Array [
            "StudioHttpCondition14AD1D44",
            80,
            443,
          ],
        },
        "Protocol": Object {
          "Fn::If": Array [
            "StudioHttpCondition14AD1D44",
            "HTTP",
            "HTTPS",
          ],
        },
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "StudioLoadBalancerSecurityGroup73100F94": Object {
      "Properties": Object {
        "GroupDescription": "Supabase-no-option/Studio/LoadBalancerSecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow from anyone on port 80",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80,
          },
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow from anyone on port 443",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "StudioLogs5268B2C5": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "RetentionInDays": 30,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "StudioSvcCloudmapServiceD5D25A54": Object {
      "Properties": Object {
        "DnsConfig": Object {
          "DnsRecords": Array [
            Object {
              "TTL": 10,
              "Type": "SRV",
            },
            Object {
              "TTL": 10,
              "Type": "A",
            },
          ],
          "NamespaceId": Object {
            "Fn::GetAtt": Array [
              "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
              "Id",
            ],
          },
          "RoutingPolicy": "MULTIVALUE",
        },
        "HealthCheckCustomConfig": Object {
          "FailureThreshold": 1,
        },
        "Name": "studio",
        "NamespaceId": Object {
          "Fn::GetAtt": Array [
            "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
            "Id",
          ],
        },
      },
      "Type": "AWS::ServiceDiscovery::Service",
    },
    "StudioSvcSecurityGroupC3E32D42": Object {
      "Properties": Object {
        "GroupDescription": "Supabase-no-option/Studio/Svc/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "StudioSvcSecurityGroupfromSupabasenooptionStudioLoadBalancerSecurityGroup1ED3AC8F300000E947A0": Object {
      "Properties": Object {
        "Description": "Load balancer to target",
        "FromPort": 3000,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "StudioSvcSecurityGroupC3E32D42",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "StudioLoadBalancerSecurityGroup73100F94",
            "GroupId",
          ],
        },
        "ToPort": 3000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "StudioSvcService57CD4A48": Object {
      "DependsOn": Array [
        "StudioLoadBalancerListener522B10FC",
      ],
      "Properties": Object {
        "Cluster": Object {
          "Ref": "ClusterEB0386A7",
        },
        "DeploymentConfiguration": Object {
          "DeploymentCircuitBreaker": Object {
            "Enable": true,
            "Rollback": true,
          },
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "DeploymentController": Object {
          "Type": "ECS",
        },
        "EnableECSManagedTags": true,
        "HealthCheckGracePeriodSeconds": 60,
        "LaunchType": "FARGATE",
        "LoadBalancers": Array [
          Object {
            "ContainerName": "app",
            "ContainerPort": 3000,
            "TargetGroupArn": Object {
              "Ref": "StudioTargetGroupC1E0E03D",
            },
          },
        ],
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "StudioSvcSecurityGroupC3E32D42",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Array [
              Object {
                "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
              },
              Object {
                "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
              },
            ],
          },
        },
        "PropagateTags": "SERVICE",
        "ServiceRegistries": Array [
          Object {
            "ContainerName": "app",
            "ContainerPort": 3000,
            "RegistryArn": Object {
              "Fn::GetAtt": Array [
                "StudioSvcCloudmapServiceD5D25A54",
                "Arn",
              ],
            },
          },
        ],
        "TaskDefinition": Object {
          "Ref": "StudioTaskDefinitionFEEA269A",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "StudioSvcTaskCountTarget992D589A": Object {
      "Properties": Object {
        "MaxCapacity": 20,
        "MinCapacity": 1,
        "ResourceId": Object {
          "Fn::Join": Array [
            "",
            Array [
              "service/",
              Object {
                "Ref": "ClusterEB0386A7",
              },
              "/",
              Object {
                "Fn::GetAtt": Array [
                  "StudioSvcService57CD4A48",
                  "Name",
                ],
              },
            ],
          ],
        },
        "RoleARN": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":iam::",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService",
            ],
          ],
        },
        "ScalableDimension": "ecs:service:DesiredCount",
        "ServiceNamespace": "ecs",
      },
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
    },
    "StudioSvcTaskCountTargetScaleOnCpuF08DFD58": Object {
      "Properties": Object {
        "PolicyName": "SupabasenooptionStudioSvcTaskCountTargetScaleOnCpu6594F668",
        "PolicyType": "TargetTrackingScaling",
        "ScalingTargetId": Object {
          "Ref": "StudioSvcTaskCountTarget992D589A",
        },
        "TargetTrackingScalingPolicyConfiguration": Object {
          "PredefinedMetricSpecification": Object {
            "PredefinedMetricType": "ECSServiceAverageCPUUtilization",
          },
          "ScaleInCooldown": 60,
          "ScaleOutCooldown": 60,
          "TargetValue": 50,
        },
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
    },
    "StudioTargetGroupC1E0E03D": Object {
      "Properties": Object {
        "HealthCheckIntervalSeconds": 10,
        "HealthCheckTimeoutSeconds": 5,
        "Port": 3000,
        "Protocol": "HTTP",
        "TargetGroupAttributes": Array [
          Object {
            "Key": "deregistration_delay.timeout_seconds",
            "Value": "30",
          },
          Object {
            "Key": "stickiness.enabled",
            "Value": "false",
          },
        ],
        "TargetType": "ip",
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
    },
    "StudioTaskDefinitionExecutionRoleBBC69CFE": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "StudioTaskDefinitionExecutionRoleDefaultPolicy1DF00583": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "StudioLogs5268B2C5",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "DatabaseSecretAttachmentE5D1B020",
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "SupabaseJwtAnonKey90E80F90",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "SupabaseJwtServiceRoleKey94675B64",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "StudioTaskDefinitionExecutionRoleDefaultPolicy1DF00583",
        "Roles": Array [
          Object {
            "Ref": "StudioTaskDefinitionExecutionRoleBBC69CFE",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "StudioTaskDefinitionFEEA269A": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "Environment": Array [
              Object {
                "Name": "STUDIO_PG_META_URL",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "https://",
                      Object {
                        "Fn::GetAtt": Array [
                          "CDNDistributionD4FAE585",
                          "DomainName",
                        ],
                      },
                      "/pg",
                    ],
                  ],
                },
              },
              Object {
                "Name": "SUPABASE_URL",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "https://",
                      Object {
                        "Fn::GetAtt": Array [
                          "CDNDistributionD4FAE585",
                          "DomainName",
                        ],
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "SUPABASE_REST_URL",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "https://",
                      Object {
                        "Fn::GetAtt": Array [
                          "CDNDistributionD4FAE585",
                          "DomainName",
                        ],
                      },
                      "/rest/v1/",
                    ],
                  ],
                },
              },
            ],
            "Essential": true,
            "Image": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "public.ecr.aws/t3w2s2c9/studio:",
                  Object {
                    "Ref": "StudioVersionParameter",
                  },
                ],
              ],
            },
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "StudioLogs5268B2C5",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "Name": "app",
            "PortMappings": Array [
              Object {
                "ContainerPort": 3000,
                "Protocol": "tcp",
              },
            ],
            "Secrets": Array [
              Object {
                "Name": "POSTGRES_PASSWORD",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DatabaseSecretAttachmentE5D1B020",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "SUPABASE_ANON_KEY",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "SupabaseJwtAnonKey90E80F90",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "SUPABASE_SERVICE_KEY",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "SupabaseJwtServiceRoleKey94675B64",
                      },
                    ],
                  ],
                },
              },
            ],
            "Ulimits": Array [
              Object {
                "HardLimit": 65536,
                "Name": "nofile",
                "SoftLimit": 65536,
              },
            ],
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "StudioTaskDefinitionExecutionRoleBBC69CFE",
            "Arn",
          ],
        },
        "Family": "SupabasenooptionStudioTaskDefinition3D9C3CC4",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "RuntimePlatform": Object {
          "CpuArchitecture": "ARM64",
          "OperatingSystemFamily": "LINUX",
        },
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "StudioTaskDefinitionTaskRole4FE9D685",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "StudioTaskDefinitionTaskRole4FE9D685": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "StudioUserPool94F50620": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "AccountRecoverySetting": Object {
          "RecoveryMechanisms": Array [
            Object {
              "Name": "verified_phone_number",
              "Priority": 1,
            },
            Object {
              "Name": "verified_email",
              "Priority": 2,
            },
          ],
        },
        "AdminCreateUserConfig": Object {
          "AllowAdminCreateUserOnly": true,
        },
        "AutoVerifiedAttributes": Array [
          "email",
        ],
        "EmailVerificationMessage": "The verification code to your new account is {####}",
        "EmailVerificationSubject": "Verify your new account",
        "SmsVerificationMessage": "The verification code to your new account is {####}",
        "UserPoolName": "SupabaseStudio-UserPool",
        "UsernameAttributes": Array [
          "email",
        ],
        "VerificationMessageTemplate": Object {
          "DefaultEmailOption": "CONFIRM_WITH_CODE",
          "EmailMessage": "The verification code to your new account is {####}",
          "EmailSubject": "Verify your new account",
          "SmsMessage": "The verification code to your new account is {####}",
        },
      },
      "Type": "AWS::Cognito::UserPool",
      "UpdateReplacePolicy": "Delete",
    },
    "StudioUserPoolDomain83E076DB": Object {
      "Properties": Object {
        "Domain": Object {
          "Fn::Join": Array [
            "",
            Array [
              "supabase-studio-",
              Object {
                "Ref": "AWS::AccountId",
              },
            ],
          ],
        },
        "UserPoolId": Object {
          "Ref": "StudioUserPool94F50620",
        },
      },
      "Type": "AWS::Cognito::UserPoolDomain",
    },
    "SupabaseJwtAnonKey90E80F90": Object {
      "Properties": Object {
        "Description": "This key is safe to use in a browser if you have enabled Row Level Security for your tables and configured policies.",
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/",
              Object {
                "Ref": "AWS::StackName",
              },
              "/JWT/anon",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Fn::GetAtt": Array [
            "SupabaseJwtAnonRole874E82F9",
            "Token",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "SupabaseJwtAnonRole874E82F9": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "ExpiresIn": "10y",
        "Issuer": "supabase",
        "Payload": Object {
          "role": "anon",
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "SupabaseJwtProviderframeworkonEventABA31464",
            "Arn",
          ],
        },
      },
      "Type": "Custom::SupabaseApiRole",
      "UpdateReplacePolicy": "Delete",
    },
    "SupabaseJwtCreateApiRoleFunction40C9BEBC": Object {
      "DependsOn": Array [
        "SupabaseJwtCreateApiRoleFunctionServiceRoleDefaultPolicyF86CBBD8",
        "SupabaseJwtCreateApiRoleFunctionServiceRoleBB9B11C4",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "711810d3f57d7256b05963e398fa514d237d4766e38bf8be79e548f5e0bf2f53.zip",
        },
        "Description": "Supabase - Create API role & API key",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "JWT_SECRET_ARN": Object {
              "Ref": "SupabaseJwtSecretFA404A75",
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "SupabaseJwtCreateApiRoleFunctionServiceRoleBB9B11C4",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "SupabaseJwtCreateApiRoleFunctionServiceRoleBB9B11C4": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SupabaseJwtCreateApiRoleFunctionServiceRoleDefaultPolicyF86CBBD8": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "SupabaseJwtSecretFA404A75",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SupabaseJwtCreateApiRoleFunctionServiceRoleDefaultPolicyF86CBBD8",
        "Roles": Array [
          Object {
            "Ref": "SupabaseJwtCreateApiRoleFunctionServiceRoleBB9B11C4",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SupabaseJwtProviderframeworkonEventABA31464": Object {
      "DependsOn": Array [
        "SupabaseJwtProviderframeworkonEventServiceRoleDefaultPolicyBFD1DEC9",
        "SupabaseJwtProviderframeworkonEventServiceRole62754416",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "e7c95e1a12d903d913ebdd526c735f1ac58b2024882a5562110221fe685ebe85.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (Supabase-no-option/SupabaseJwt/Provider)",
        "Environment": Object {
          "Variables": Object {
            "USER_ON_EVENT_FUNCTION_ARN": Object {
              "Fn::GetAtt": Array [
                "SupabaseJwtCreateApiRoleFunction40C9BEBC",
                "Arn",
              ],
            },
          },
        },
        "Handler": "framework.onEvent",
        "Role": Object {
          "Fn::GetAtt": Array [
            "SupabaseJwtProviderframeworkonEventServiceRole62754416",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "SupabaseJwtProviderframeworkonEventServiceRole62754416": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SupabaseJwtProviderframeworkonEventServiceRoleDefaultPolicyBFD1DEC9": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "SupabaseJwtCreateApiRoleFunction40C9BEBC",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "SupabaseJwtCreateApiRoleFunction40C9BEBC",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SupabaseJwtProviderframeworkonEventServiceRoleDefaultPolicyBFD1DEC9",
        "Roles": Array [
          Object {
            "Ref": "SupabaseJwtProviderframeworkonEventServiceRole62754416",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SupabaseJwtSecretFA404A75": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "Description": "Supabase - Json Web Token Secret",
        "GenerateSecretString": Object {
          "ExcludePunctuation": true,
          "PasswordLength": 64,
        },
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "SupabaseJwtServiceRole36CFC81F": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "ExpiresIn": "10y",
        "Issuer": "supabase",
        "Payload": Object {
          "role": "service_role",
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "SupabaseJwtProviderframeworkonEventABA31464",
            "Arn",
          ],
        },
      },
      "Type": "Custom::SupabaseApiRole",
      "UpdateReplacePolicy": "Delete",
    },
    "SupabaseJwtServiceRoleKey94675B64": Object {
      "Properties": Object {
        "Description": "This key has the ability to bypass Row Level Security. Never share it publicly.",
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/",
              Object {
                "Ref": "AWS::StackName",
              },
              "/JWT/service_role",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Fn::GetAtt": Array [
            "SupabaseJwtServiceRole36CFC81F",
            "Token",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "SupabaseMailAccessKeyA6348E49": Object {
      "Properties": Object {
        "UserName": Object {
          "Ref": "SupabaseMailUser6287674D",
        },
      },
      "Type": "AWS::IAM::AccessKey",
    },
    "SupabaseMailGenSmtpPasswordFunction1BD23362": Object {
      "DependsOn": Array [
        "SupabaseMailGenSmtpPasswordFunctionServiceRoleDefaultPolicyE69CB8D3",
        "SupabaseMailGenSmtpPasswordFunctionServiceRole0A78DBF3",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "bed229ed30972eb5b99c1adea2197ac5c694cd661895bb420af5f1d4054ba060.zip",
        },
        "Description": "Supabase - Generate SMTP Password Function",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "SupabaseMailGenSmtpPasswordFunctionServiceRole0A78DBF3",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "SupabaseMailGenSmtpPasswordFunctionServiceRole0A78DBF3": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SupabaseMailGenSmtpPasswordFunctionServiceRoleDefaultPolicyE69CB8D3": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "secretsmanager:PutSecretValue",
                "secretsmanager:UpdateSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "SupabaseMailSecret777E0288",
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "SupabaseMailSecret777E0288",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SupabaseMailGenSmtpPasswordFunctionServiceRoleDefaultPolicyE69CB8D3",
        "Roles": Array [
          Object {
            "Ref": "SupabaseMailGenSmtpPasswordFunctionServiceRole0A78DBF3",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SupabaseMailGenSmtpPasswordProviderframeworkonEvent3038CFFF": Object {
      "DependsOn": Array [
        "SupabaseMailGenSmtpPasswordProviderframeworkonEventServiceRoleDefaultPolicy28275DA1",
        "SupabaseMailGenSmtpPasswordProviderframeworkonEventServiceRole4F5FF7D5",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "e7c95e1a12d903d913ebdd526c735f1ac58b2024882a5562110221fe685ebe85.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (Supabase-no-option/SupabaseMail/GenSmtpPasswordProvider)",
        "Environment": Object {
          "Variables": Object {
            "USER_ON_EVENT_FUNCTION_ARN": Object {
              "Fn::GetAtt": Array [
                "SupabaseMailGenSmtpPasswordFunction1BD23362",
                "Arn",
              ],
            },
          },
        },
        "Handler": "framework.onEvent",
        "Role": Object {
          "Fn::GetAtt": Array [
            "SupabaseMailGenSmtpPasswordProviderframeworkonEventServiceRole4F5FF7D5",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "SupabaseMailGenSmtpPasswordProviderframeworkonEventServiceRole4F5FF7D5": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SupabaseMailGenSmtpPasswordProviderframeworkonEventServiceRoleDefaultPolicy28275DA1": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "SupabaseMailGenSmtpPasswordFunction1BD23362",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "SupabaseMailGenSmtpPasswordFunction1BD23362",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SupabaseMailGenSmtpPasswordProviderframeworkonEventServiceRoleDefaultPolicy28275DA1",
        "Roles": Array [
          Object {
            "Ref": "SupabaseMailGenSmtpPasswordProviderframeworkonEventServiceRole4F5FF7D5",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SupabaseMailPolicy575C9DA2": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "ses:SendRawEmail",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SendEmailPolicy",
        "Users": Array [
          Object {
            "Ref": "SupabaseMailUser6287674D",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SupabaseMailSecret777E0288": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "Description": "Supabase - SES SMTP Secret",
        "SecretString": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{\\"access_key\\":\\"",
              Object {
                "Ref": "SupabaseMailAccessKeyA6348E49",
              },
              "\\",\\"secret_access_key\\":\\"",
              Object {
                "Fn::GetAtt": Array [
                  "SupabaseMailAccessKeyA6348E49",
                  "SecretAccessKey",
                ],
              },
              "\\"}",
            ],
          ],
        },
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "SupabaseMailSmtpPassword3227537A": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "Region": Object {
          "Ref": "SesRegionParameter",
        },
        "SecretId": Object {
          "Ref": "SupabaseMailSecret777E0288",
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "SupabaseMailGenSmtpPasswordProviderframeworkonEvent3038CFFF",
            "Arn",
          ],
        },
      },
      "Type": "Custom::SmtpPassword",
      "UpdateReplacePolicy": "Delete",
    },
    "SupabaseMailUser6287674D": Object {
      "Type": "AWS::IAM::User",
    },
    "SupabasenooptionDatabaseSecret67203BF16b2eb8af71bef5c6813259b78dc271d3": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "Description": Object {
          "Fn::Join": Array [
            "",
            Array [
              "Generated by the CDK for stack: ",
              Object {
                "Ref": "AWS::StackName",
              },
            ],
          ],
        },
        "GenerateSecretString": Object {
          "ExcludeCharacters": "%+~\`#$&*()|[]{}:;<>?!'/@\\"\\\\=^",
          "GenerateStringKey": "password",
          "PasswordLength": 30,
          "SecretStringTemplate": "{\\"username\\":\\"supabase_admin\\"}",
        },
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "TwitterClientId11873110": Object {
      "Properties": Object {
        "Description": "The OAuth2 Client ID registered with the external provider.",
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/",
              Object {
                "Ref": "AWS::StackName",
              },
              "/Auth/External/Twitter/ClientId",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Ref": "TwitterClientIdParameterE2950332",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "TwitterSecretA36121D0": Object {
      "Properties": Object {
        "Description": "The OAuth2 Client Secret provided by the external provider when you registered.",
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/",
              Object {
                "Ref": "AWS::StackName",
              },
              "/Auth/External/Twitter/Secret",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Ref": "TwitterSecretParameter548D162D",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "VPCB9E5F0B4": Object {
      "Properties": Object {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Supabase-no-option/VPC",
          },
        ],
      },
      "Type": "AWS::EC2::VPC",
    },
    "VPCIGWB7E252D3": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Supabase-no-option/VPC",
          },
        ],
      },
      "Type": "AWS::EC2::InternetGateway",
    },
    "VPCPrivateSubnet1DefaultRouteAE1D6490": Object {
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": Object {
          "Ref": "VPCPublicSubnet1NATGatewayE0556630",
        },
        "RouteTableId": Object {
          "Ref": "VPCPrivateSubnet1RouteTableBE8A6027",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VPCPrivateSubnet1RouteTableAssociation347902D1": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VPCPrivateSubnet1RouteTableBE8A6027",
        },
        "SubnetId": Object {
          "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VPCPrivateSubnet1RouteTableBE8A6027": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Supabase-no-option/VPC/PrivateSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VPCPrivateSubnet1Subnet8BCA10E0": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            0,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.128.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          Object {
            "Key": "Name",
            "Value": "Supabase-no-option/VPC/PrivateSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VPCPrivateSubnet2DefaultRouteF4F5CFD2": Object {
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": Object {
          "Ref": "VPCPublicSubnet1NATGatewayE0556630",
        },
        "RouteTableId": Object {
          "Ref": "VPCPrivateSubnet2RouteTable0A19E10E",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VPCPrivateSubnet2RouteTable0A19E10E": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Supabase-no-option/VPC/PrivateSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VPCPrivateSubnet2RouteTableAssociation0C73D413": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VPCPrivateSubnet2RouteTable0A19E10E",
        },
        "SubnetId": Object {
          "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VPCPrivateSubnet2SubnetCFCDAA7A": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            1,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.192.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          Object {
            "Key": "Name",
            "Value": "Supabase-no-option/VPC/PrivateSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VPCPublicSubnet1DefaultRoute91CEF279": Object {
      "DependsOn": Array [
        "VPCVPCGW99B986DC",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "VPCIGWB7E252D3",
        },
        "RouteTableId": Object {
          "Ref": "VPCPublicSubnet1RouteTableFEE4B781",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VPCPublicSubnet1EIP6AD938E8": Object {
      "Properties": Object {
        "Domain": "vpc",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Supabase-no-option/VPC/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::EIP",
    },
    "VPCPublicSubnet1NATGatewayE0556630": Object {
      "Properties": Object {
        "AllocationId": Object {
          "Fn::GetAtt": Array [
            "VPCPublicSubnet1EIP6AD938E8",
            "AllocationId",
          ],
        },
        "SubnetId": Object {
          "Ref": "VPCPublicSubnet1SubnetB4246D30",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Supabase-no-option/VPC/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::NatGateway",
    },
    "VPCPublicSubnet1RouteTableAssociation0B0896DC": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VPCPublicSubnet1RouteTableFEE4B781",
        },
        "SubnetId": Object {
          "Ref": "VPCPublicSubnet1SubnetB4246D30",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VPCPublicSubnet1RouteTableFEE4B781": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Supabase-no-option/VPC/PublicSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VPCPublicSubnet1SubnetB4246D30": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            0,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.0.0/18",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "Supabase-no-option/VPC/PublicSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VPCPublicSubnet2DefaultRouteB7481BBA": Object {
      "DependsOn": Array [
        "VPCVPCGW99B986DC",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "VPCIGWB7E252D3",
        },
        "RouteTableId": Object {
          "Ref": "VPCPublicSubnet2RouteTable6F1A15F1",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VPCPublicSubnet2RouteTable6F1A15F1": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Supabase-no-option/VPC/PublicSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VPCPublicSubnet2RouteTableAssociation5A808732": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VPCPublicSubnet2RouteTable6F1A15F1",
        },
        "SubnetId": Object {
          "Ref": "VPCPublicSubnet2Subnet74179F39",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VPCPublicSubnet2Subnet74179F39": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            1,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.64.0/18",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "Supabase-no-option/VPC/PublicSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VPCVPCGW99B986DC": Object {
      "Properties": Object {
        "InternetGatewayId": Object {
          "Ref": "VPCIGWB7E252D3",
        },
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::VPCGatewayAttachment",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
  "Transform": "AWS::SecretsManager-2020-07-23",
}
`;

exports[`Snapshot 2`] = `
Object {
  "Conditions": Object {
    "DatabaseMultiAzCondition82AA721B": Object {
      "Fn::Equals": Array [
        Object {
          "Ref": "DatabaseMultiAz04923704",
        },
        "true",
      ],
    },
    "StudioHttpCondition14AD1D44": Object {
      "Fn::Equals": Array [
        Object {
          "Ref": "StudioCertificateArnParameterEBA639E6",
        },
        "arn:aws:acm:us-west-2:123456789012:certificate/no-cert-it-is-not-secure-to-use-http",
      ],
    },
  },
  "Description": "Self-hosted Supabase on AWS",
  "Metadata": Object {
    "AWS::CloudFormation::Interface": Object {
      "ParameterGroups": Array [
        Object {
          "Label": Object {
            "default": "Supabase - Auth Settings",
          },
          "Parameters": Array [
            "DisableSignupParameter",
            "SiteUrlParameter",
            "RedirectUrlsParameter",
            "JwtExpiryLimitParameter",
            "PasswordMinLengthParameter",
          ],
        },
        Object {
          "Label": Object {
            "default": "Supabase - Auth E-mail Settings",
          },
          "Parameters": Array [
            "SmtpAdminEmailParameter",
            "SmtpSenderNameParameter",
          ],
        },
        Object {
          "Label": Object {
            "default": "Platform Settings",
          },
          "Parameters": Array [
            "SesRegionParameter",
            "DatabaseMultiAz04923704",
          ],
        },
        Object {
          "Label": Object {
            "default": "Supabase - API Versions",
          },
          "Parameters": Array [
            "AuthApiVersionParameter",
            "RestApiVersionParameter",
            "RealtimeApiVersionParameter",
            "StorageApiVersionParameter",
            "PostgresMetaApiVersionParameter",
          ],
        },
        Object {
          "Label": Object {
            "default": "Supabase - Studio Settings",
          },
          "Parameters": Array [
            "StudioVersionParameter",
            "StudioCertificateArnParameterEBA639E6",
          ],
        },
        Object {
          "Label": Object {
            "default": "Supabase - External Auth Provider - Google",
          },
          "Parameters": Array [
            "GoogleEnabledParameterC8D211C0",
            "GoogleClientIdParameter10AB1CB7",
            "GoogleSecretParameterD567D187",
          ],
        },
        Object {
          "Label": Object {
            "default": "Supabase - External Auth Provider - Facebook",
          },
          "Parameters": Array [
            "FacebookEnabledParameter04E6667E",
            "FacebookClientIdParameterF8F9E3CB",
            "FacebookSecretParameter0FEABC80",
          ],
        },
        Object {
          "Label": Object {
            "default": "Supabase - External Auth Provider - Twitter",
          },
          "Parameters": Array [
            "TwitterEnabledParameter355D114D",
            "TwitterClientIdParameterE2950332",
            "TwitterSecretParameter548D162D",
          ],
        },
        Object {
          "Label": Object {
            "default": "Supabase - External Auth Provider - GitHub",
          },
          "Parameters": Array [
            "GitHubEnabledParameter04C9B675",
            "GitHubClientIdParameterEB9B453C",
            "GitHubSecretParameter60DD8371",
          ],
        },
      ],
      "ParameterLabels": Object {
        "AuthApiVersionParameter": Object {
          "default": "Auth API Version - GoTrue",
        },
        "DatabaseMultiAz04923704": Object {
          "default": "Database Multi-AZ",
        },
        "DisableSignupParameter": Object {
          "default": "Disable User Signups",
        },
        "FacebookClientIdParameterF8F9E3CB": Object {
          "default": "Facebook Client ID",
        },
        "FacebookEnabledParameter04E6667E": Object {
          "default": "Facebook Enabled",
        },
        "FacebookSecretParameter0FEABC80": Object {
          "default": "Facebook Client Secret",
        },
        "GitHubClientIdParameterEB9B453C": Object {
          "default": "GitHub Client ID",
        },
        "GitHubEnabledParameter04C9B675": Object {
          "default": "GitHub Enabled",
        },
        "GitHubSecretParameter60DD8371": Object {
          "default": "GitHub Client Secret",
        },
        "GoogleClientIdParameter10AB1CB7": Object {
          "default": "Google Client ID",
        },
        "GoogleEnabledParameterC8D211C0": Object {
          "default": "Google Enabled",
        },
        "GoogleSecretParameterD567D187": Object {
          "default": "Google Client Secret",
        },
        "JwtExpiryLimitParameter": Object {
          "default": "JWT expiry limit",
        },
        "PasswordMinLengthParameter": Object {
          "default": "Min password length",
        },
        "PostgresMetaApiVersionParameter": Object {
          "default": "Postgres Meta API Version",
        },
        "RealtimeApiVersionParameter": Object {
          "default": "Realtime API Version",
        },
        "RedirectUrlsParameter": Object {
          "default": "Redirect URLs",
        },
        "RestApiVersionParameter": Object {
          "default": "Rest API Version - PostgREST",
        },
        "SesRegionParameter": Object {
          "default": "Amazon SES Region",
        },
        "SiteUrlParameter": Object {
          "default": "Site URL",
        },
        "SmtpAdminEmailParameter": Object {
          "default": "SMTP Admin Email Address",
        },
        "SmtpSenderNameParameter": Object {
          "default": "SMTP Sender Name",
        },
        "StorageApiVersionParameter": Object {
          "default": "Storage API Version",
        },
        "StudioCertificateArnParameterEBA639E6": Object {
          "default": "ACM Certificate ARN",
        },
        "StudioVersionParameter": Object {
          "default": "Supabase Studio Version",
        },
        "TwitterClientIdParameterE2950332": Object {
          "default": "Twitter Client ID",
        },
        "TwitterEnabledParameter355D114D": Object {
          "default": "Twitter Enabled",
        },
        "TwitterSecretParameter548D162D": Object {
          "default": "Twitter Client Secret",
        },
      },
    },
  },
  "Outputs": Object {
    "ExportApiKey": Object {
      "Export": Object {
        "Name": "ApiKey",
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "SupabaseJwtAnonRole874E82F9",
          "Token",
        ],
      },
    },
    "ExportUrl": Object {
      "Export": Object {
        "Name": "Url",
      },
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "https://",
            Object {
              "Fn::GetAtt": Array [
                "CDNDistributionD4FAE585",
                "DomainName",
              ],
            },
          ],
        ],
      },
    },
    "StudioUrl": Object {
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "http://",
            Object {
              "Fn::GetAtt": Array [
                "StudioLoadBalancer143227F7",
                "DNSName",
              ],
            },
          ],
        ],
      },
    },
    "StudioUserPool": Object {
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "https://",
            Object {
              "Ref": "AWS::Region",
            },
            ".console.aws.amazon.com/cognito/v2/idp/user-pools/",
            Object {
              "Ref": "StudioUserPool94F50620",
            },
            "/users",
          ],
        ],
      },
    },
  },
  "Parameters": Object {
    "AuthApiVersionParameter": Object {
      "AllowedPattern": "^(v[0-9]+.[0-9]+.[0-9]+(.w)*)|latest$",
      "Default": "v2.15.5",
      "Description": "Docker image tag - https://gallery.ecr.aws/t3w2s2c9/gotrue",
      "Type": "String",
    },
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "DatabaseMultiAz04923704": Object {
      "AllowedValues": Array [
        "true",
        "false",
      ],
      "Default": "false",
      "Description": "Create a replica at another AZ",
      "Type": "String",
    },
    "DisableSignupParameter": Object {
      "AllowedValues": Array [
        "true",
        "false",
      ],
      "Default": "false",
      "Description": "When signup is disabled the only way to create new users is through invites. Defaults to false, all signups enabled.",
      "Type": "String",
    },
    "FacebookClientIdParameterF8F9E3CB": Object {
      "Default": "replace-with-your-client-id",
      "Description": "The OAuth2 Client ID registered with the external provider.",
      "Type": "String",
    },
    "FacebookEnabledParameter04E6667E": Object {
      "AllowedValues": Array [
        "true",
        "false",
      ],
      "Default": "false",
      "Description": "Whether this external provider is enabled or not",
      "Type": "String",
    },
    "FacebookSecretParameter0FEABC80": Object {
      "Default": "replace-with-your-client-secret",
      "Description": "The OAuth2 Client Secret provided by the external provider when you registered.",
      "NoEcho": true,
      "Type": "String",
    },
    "GitHubClientIdParameterEB9B453C": Object {
      "Default": "replace-with-your-client-id",
      "Description": "The OAuth2 Client ID registered with the external provider.",
      "Type": "String",
    },
    "GitHubEnabledParameter04C9B675": Object {
      "AllowedValues": Array [
        "true",
        "false",
      ],
      "Default": "false",
      "Description": "Whether this external provider is enabled or not",
      "Type": "String",
    },
    "GitHubSecretParameter60DD8371": Object {
      "Default": "replace-with-your-client-secret",
      "Description": "The OAuth2 Client Secret provided by the external provider when you registered.",
      "NoEcho": true,
      "Type": "String",
    },
    "GoogleClientIdParameter10AB1CB7": Object {
      "Default": "replace-with-your-client-id",
      "Description": "The OAuth2 Client ID registered with the external provider.",
      "Type": "String",
    },
    "GoogleEnabledParameterC8D211C0": Object {
      "AllowedValues": Array [
        "true",
        "false",
      ],
      "Default": "false",
      "Description": "Whether this external provider is enabled or not",
      "Type": "String",
    },
    "GoogleSecretParameterD567D187": Object {
      "Default": "replace-with-your-client-secret",
      "Description": "The OAuth2 Client Secret provided by the external provider when you registered.",
      "NoEcho": true,
      "Type": "String",
    },
    "JwtExpiryLimitParameter": Object {
      "Default": 3600,
      "Description": "How long tokens are valid for. Defaults to 3600 (1 hour), maximum 604,800 seconds (one week).",
      "MaxValue": 604800,
      "MinValue": 300,
      "Type": "Number",
    },
    "PasswordMinLengthParameter": Object {
      "Default": "16",
      "Description": "When signup is disabled the only way to create new users is through invites. Defaults to false, all signups enabled.",
      "MaxValue": 128,
      "MinValue": 8,
      "Type": "Number",
    },
    "PostgresMetaApiVersionParameter": Object {
      "AllowedPattern": "^(v[0-9]+.[0-9]+.[0-9]+(.w)*)|latest$",
      "Default": "v0.44.0",
      "Description": "Docker image tag - https://gallery.ecr.aws/t3w2s2c9/postgres-meta",
      "Type": "String",
    },
    "RealtimeApiVersionParameter": Object {
      "AllowedPattern": "^(v[0-9]+.[0-9]+.[0-9]+(.w)*)|latest$",
      "Default": "v0.24.2",
      "Description": "Docker image tag - https://gallery.ecr.aws/t3w2s2c9/realtime",
      "Type": "String",
    },
    "RedirectUrlsParameter": Object {
      "Default": "",
      "Description": "URLs that auth providers are permitted to redirect to post authentication",
      "Type": "String",
    },
    "RestApiVersionParameter": Object {
      "Default": "v9.0.1.20220802",
      "Description": "Docker image tag - https://hub.docker.com/r/postgrest/postgrest/tags",
      "Type": "String",
    },
    "SesRegionParameter": Object {
      "AllowedValues": Array [
        "us-east-1",
        "us-east-2",
        "us-west-1",
        "us-west-2",
        "ap-south-1",
        "ap-northeast-1",
        "ap-northeast-2",
        "ap-northeast-3",
        "ap-southeast-1",
        "ap-southeast-2",
        "ca-central-1",
        "eu-central-1",
        "eu-west-1",
        "eu-west-2",
        "eu-west-3",
        "eu-north-1",
        "sa-east-1",
      ],
      "Default": "us-west-2",
      "Description": "Use Amazon SES as SMTP server. You must choose a region.",
      "Type": "String",
    },
    "SiteUrlParameter": Object {
      "Default": "http://localhost:3000",
      "Description": "The base URL your site is located at. Currently used in combination with other settings to construct URLs used in emails.",
      "Type": "String",
    },
    "SmtpAdminEmailParameter": Object {
      "AllowedPattern": "^[\\\\x20-\\\\x45]?[\\\\w-\\\\+]+(\\\\.[\\\\w]+)*@[\\\\w-]+(\\\\.[\\\\w]+)*(\\\\.[a-z]{2,})$",
      "ConstraintDescription": "must be a valid email address",
      "Default": "noreply@supabase.example.com",
      "Description": "The From e-mail address for all emails sent. If you want test e-mail, you can use Amazon WorkMail",
      "Type": "String",
    },
    "SmtpSenderNameParameter": Object {
      "Default": "Supabase",
      "Description": "The From email sender name for all emails sent.",
      "Type": "String",
    },
    "StorageApiVersionParameter": Object {
      "AllowedPattern": "^(v[0-9]+.[0-9]+.[0-9]+(.w)*)|latest$",
      "Default": "v0.20.0",
      "Description": "Docker image tag - https://gallery.ecr.aws/t3w2s2c9/storage-api",
      "Type": "String",
    },
    "StudioCertificateArnParameterEBA639E6": Object {
      "AllowedPattern": "^arn:aws:acm:[\\\\w-]+:[0-9]{12}:certificate/[\\\\w-]{36}$",
      "Default": "arn:aws:acm:us-west-2:123456789012:certificate/no-cert-it-is-not-secure-to-use-http",
      "Description": "ACM Certificate ARN for Supabase studio",
      "Type": "String",
    },
    "StudioVersionParameter": Object {
      "AllowedPattern": "^(v[0-9]+.[0-9]+.[0-9]+(.w)*)|latest$",
      "Default": "latest",
      "Description": "Docker image tag - https://gallery.ecr.aws/t3w2s2c9/studio",
      "Type": "String",
    },
    "TwitterClientIdParameterE2950332": Object {
      "Default": "replace-with-your-client-id",
      "Description": "The OAuth2 Client ID registered with the external provider.",
      "Type": "String",
    },
    "TwitterEnabledParameter355D114D": Object {
      "AllowedValues": Array [
        "true",
        "false",
      ],
      "Default": "false",
      "Description": "Whether this external provider is enabled or not",
      "Type": "String",
    },
    "TwitterSecretParameter548D162D": Object {
      "Default": "replace-with-your-client-secret",
      "Description": "The OAuth2 Client Secret provided by the external provider when you registered.",
      "NoEcho": true,
      "Type": "String",
    },
  },
  "Resources": Object {
    "AWS679f53fac002430cb0da5b7982bd22872D164C4C": Object {
      "DependsOn": Array [
        "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "6dbd112fe448437b3438da4382c72fccbb7d2ee1543db222620d7447fffebc50.zip",
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 120,
      },
      "Type": "AWS::Lambda::Function",
    },
    "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "AuthForceDeployFunction40B32C4E": Object {
      "DependsOn": Array [
        "AuthForceDeployFunctionServiceRoleDefaultPolicyD04AD932",
        "AuthForceDeployFunctionServiceRole1EF67253",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "8d678058f0eb8312a176152d7bdc2392d3a97980a0b4c6a5af633d405b11038b.zip",
        },
        "Description": "Supabase - Force deploy ECS service function",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "ECS_CLUSTER_NAME": Object {
              "Ref": "ClusterEB0386A7",
            },
            "ECS_SERVICE_NAME": Object {
              "Fn::GetAtt": Array [
                "AuthSvcServiceDAF53F1D",
                "Name",
              ],
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "AuthForceDeployFunctionServiceRole1EF67253",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "AuthForceDeployFunctionServiceRole1EF67253": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "AuthForceDeployFunctionServiceRoleDefaultPolicyD04AD932": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "ecs:UpdateService",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "AuthSvcServiceDAF53F1D",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "AuthForceDeployFunctionServiceRoleDefaultPolicyD04AD932",
        "Roles": Array [
          Object {
            "Ref": "AuthForceDeployFunctionServiceRole1EF67253",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "AuthLogs940C0551": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "RetentionInDays": 30,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "AuthParameterChangeAllowEventRuleSupabasemeshAuthForceDeployFunction477FEBDF52028A16": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "AuthForceDeployFunction40B32C4E",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": Object {
          "Fn::GetAtt": Array [
            "AuthParameterChangeED794F9C",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "AuthParameterChangeED794F9C": Object {
      "Properties": Object {
        "Description": "Supabase - Force deploy Auth, when parameters changed",
        "EventPattern": Object {
          "detail": Object {
            "name": Array [
              Object {
                "prefix": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "/",
                      Object {
                        "Ref": "AWS::StackName",
                      },
                      "/Auth/",
                    ],
                  ],
                },
              },
            ],
            "operation": Array [
              "Update",
            ],
          },
          "detail-type": Array [
            "Parameter Store Change",
          ],
          "source": Array [
            "aws.ssm",
          ],
        },
        "State": "ENABLED",
        "Targets": Array [
          Object {
            "Arn": Object {
              "Fn::GetAtt": Array [
                "AuthForceDeployFunction40B32C4E",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "AuthSvcCloudmapService85C22E54": Object {
      "Properties": Object {
        "DnsConfig": Object {
          "DnsRecords": Array [
            Object {
              "TTL": 10,
              "Type": "SRV",
            },
            Object {
              "TTL": 10,
              "Type": "A",
            },
          ],
          "NamespaceId": Object {
            "Fn::GetAtt": Array [
              "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
              "Id",
            ],
          },
          "RoutingPolicy": "MULTIVALUE",
        },
        "HealthCheckCustomConfig": Object {
          "FailureThreshold": 1,
        },
        "Name": "auth",
        "NamespaceId": Object {
          "Fn::GetAtt": Array [
            "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
            "Id",
          ],
        },
      },
      "Type": "AWS::ServiceDiscovery::Service",
    },
    "AuthSvcSecurityGroup71415F29": Object {
      "Properties": Object {
        "GroupDescription": "Supabase-mesh/Auth/Svc/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "AuthSvcSecurityGroupfromSupabasemeshKongSvcSecurityGroupDD4F76E99999479A6912": Object {
      "Properties": Object {
        "Description": "from SupabasemeshKongSvcSecurityGroupDD4F76E9:9999",
        "FromPort": 9999,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "AuthSvcSecurityGroup71415F29",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "KongSvcSecurityGroupD458B522",
            "GroupId",
          ],
        },
        "ToPort": 9999,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "AuthSvcServiceDAF53F1D": Object {
      "DependsOn": Array [
        "DatabaseInstance1844F58FD",
      ],
      "Properties": Object {
        "Cluster": Object {
          "Ref": "ClusterEB0386A7",
        },
        "DeploymentConfiguration": Object {
          "DeploymentCircuitBreaker": Object {
            "Enable": true,
            "Rollback": true,
          },
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "DeploymentController": Object {
          "Type": "ECS",
        },
        "EnableECSManagedTags": true,
        "LaunchType": "FARGATE",
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "AuthSvcSecurityGroup71415F29",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Array [
              Object {
                "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
              },
              Object {
                "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
              },
            ],
          },
        },
        "PropagateTags": "SERVICE",
        "ServiceRegistries": Array [
          Object {
            "ContainerName": "app",
            "ContainerPort": 9999,
            "RegistryArn": Object {
              "Fn::GetAtt": Array [
                "AuthSvcCloudmapService85C22E54",
                "Arn",
              ],
            },
          },
        ],
        "TaskDefinition": Object {
          "Ref": "AuthTaskDefinitionDBEE261E",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "AuthSvcTaskCountTarget3EF5C75D": Object {
      "Properties": Object {
        "MaxCapacity": 20,
        "MinCapacity": 1,
        "ResourceId": Object {
          "Fn::Join": Array [
            "",
            Array [
              "service/",
              Object {
                "Ref": "ClusterEB0386A7",
              },
              "/",
              Object {
                "Fn::GetAtt": Array [
                  "AuthSvcServiceDAF53F1D",
                  "Name",
                ],
              },
            ],
          ],
        },
        "RoleARN": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":iam::",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService",
            ],
          ],
        },
        "ScalableDimension": "ecs:service:DesiredCount",
        "ServiceNamespace": "ecs",
      },
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
    },
    "AuthSvcTaskCountTargetScaleOnCpuABE2CBF4": Object {
      "Properties": Object {
        "PolicyName": "SupabasemeshAuthSvcTaskCountTargetScaleOnCpu53ACEF5D",
        "PolicyType": "TargetTrackingScaling",
        "ScalingTargetId": Object {
          "Ref": "AuthSvcTaskCountTarget3EF5C75D",
        },
        "TargetTrackingScalingPolicyConfiguration": Object {
          "PredefinedMetricSpecification": Object {
            "PredefinedMetricType": "ECSServiceAverageCPUUtilization",
          },
          "ScaleInCooldown": 60,
          "ScaleOutCooldown": 60,
          "TargetValue": 50,
        },
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
    },
    "AuthTaskDefinitionDBEE261E": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "Cpu": 717,
            "DependsOn": Array [
              Object {
                "Condition": "HEALTHY",
                "ContainerName": "envoy",
              },
            ],
            "Environment": Array [
              Object {
                "Name": "GOTRUE_SITE_URL",
                "Value": Object {
                  "Ref": "SiteUrlParameter",
                },
              },
              Object {
                "Name": "GOTRUE_URI_ALLOW_LIST",
                "Value": Object {
                  "Ref": "RedirectUrlsParameter",
                },
              },
              Object {
                "Name": "GOTRUE_DISABLE_SIGNUP",
                "Value": Object {
                  "Ref": "DisableSignupParameter",
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_EMAIL_ENABLED",
                "Value": "true",
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_PHONE_ENABLED",
                "Value": "false",
              },
              Object {
                "Name": "GOTRUE_RATE_LIMIT_EMAIL_SENT",
                "Value": "3600",
              },
              Object {
                "Name": "GOTRUE_PASSWORD_MIN_LENGTH",
                "Value": Object {
                  "Ref": "PasswordMinLengthParameter",
                },
              },
              Object {
                "Name": "GOTRUE_API_HOST",
                "Value": "0.0.0.0",
              },
              Object {
                "Name": "GOTRUE_API_PORT",
                "Value": "9999",
              },
              Object {
                "Name": "GOTRUE_DB_DRIVER",
                "Value": "postgres",
              },
              Object {
                "Name": "GOTRUE_JWT_EXP",
                "Value": Object {
                  "Ref": "JwtExpiryLimitParameter",
                },
              },
              Object {
                "Name": "GOTRUE_JWT_AUD",
                "Value": "authenticated",
              },
              Object {
                "Name": "GOTRUE_JWT_ADMIN_ROLES",
                "Value": "service_role",
              },
              Object {
                "Name": "GOTRUE_JWT_DEFAULT_GROUP_NAME",
                "Value": "authenticated",
              },
              Object {
                "Name": "GOTRUE_SMTP_ADMIN_EMAIL",
                "Value": Object {
                  "Ref": "SmtpAdminEmailParameter",
                },
              },
              Object {
                "Name": "GOTRUE_SMTP_HOST",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "email-smtp.",
                      Object {
                        "Ref": "SesRegionParameter",
                      },
                      ".amazonaws.com",
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_SMTP_PORT",
                "Value": "465",
              },
              Object {
                "Name": "GOTRUE_SMTP_SENDER_NAME",
                "Value": Object {
                  "Ref": "SmtpSenderNameParameter",
                },
              },
              Object {
                "Name": "GOTRUE_MAILER_AUTOCONFIRM",
                "Value": "false",
              },
              Object {
                "Name": "GOTRUE_MAILER_URLPATHS_INVITE",
                "Value": "/auth/v1/verify",
              },
              Object {
                "Name": "GOTRUE_MAILER_URLPATHS_CONFIRMATION",
                "Value": "/auth/v1/verify",
              },
              Object {
                "Name": "GOTRUE_MAILER_URLPATHS_RECOVERY",
                "Value": "/auth/v1/verify",
              },
              Object {
                "Name": "GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE",
                "Value": "/auth/v1/verify",
              },
              Object {
                "Name": "GOTRUE_SMS_AUTOCONFIRM",
                "Value": "true",
              },
              Object {
                "Name": "API_EXTERNAL_URL",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "https://",
                      Object {
                        "Fn::GetAtt": Array [
                          "CDNDistributionD4FAE585",
                          "DomainName",
                        ],
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_GOOGLE_ENABLED",
                "Value": Object {
                  "Ref": "GoogleEnabledParameterC8D211C0",
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_GOOGLE_REDIRECT_URI",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "https://",
                      Object {
                        "Fn::GetAtt": Array [
                          "CDNDistributionD4FAE585",
                          "DomainName",
                        ],
                      },
                      "/auth/v1/callback",
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_FACEBOOK_ENABLED",
                "Value": Object {
                  "Ref": "FacebookEnabledParameter04E6667E",
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_FACEBOOK_REDIRECT_URI",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "https://",
                      Object {
                        "Fn::GetAtt": Array [
                          "CDNDistributionD4FAE585",
                          "DomainName",
                        ],
                      },
                      "/auth/v1/callback",
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_TWITTER_ENABLED",
                "Value": Object {
                  "Ref": "TwitterEnabledParameter355D114D",
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_TWITTER_REDIRECT_URI",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "https://",
                      Object {
                        "Fn::GetAtt": Array [
                          "CDNDistributionD4FAE585",
                          "DomainName",
                        ],
                      },
                      "/auth/v1/callback",
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_GITHUB_ENABLED",
                "Value": Object {
                  "Ref": "GitHubEnabledParameter04C9B675",
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_GITHUB_REDIRECT_URI",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "https://",
                      Object {
                        "Fn::GetAtt": Array [
                          "CDNDistributionD4FAE585",
                          "DomainName",
                        ],
                      },
                      "/auth/v1/callback",
                    ],
                  ],
                },
              },
            ],
            "Essential": true,
            "Image": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "public.ecr.aws/t3w2s2c9/gotrue:",
                  Object {
                    "Ref": "AuthApiVersionParameter",
                  },
                ],
              ],
            },
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "AuthLogs940C0551",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "MemoryReservation": 1638,
            "Name": "app",
            "PortMappings": Array [
              Object {
                "ContainerPort": 9999,
                "Protocol": "tcp",
              },
            ],
            "Secrets": Array [
              Object {
                "Name": "GOTRUE_DB_DATABASE_URL",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "DatabaseauthUrlParameter27067EF6",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_JWT_SECRET",
                "ValueFrom": Object {
                  "Ref": "SupabaseJwtSecretFA404A75",
                },
              },
              Object {
                "Name": "GOTRUE_SMTP_USER",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "SupabaseMailSecret777E0288",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_SMTP_PASS",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "SupabaseMailSecret777E0288",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_GOOGLE_CLIENT_ID",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "GoogleClientIdF5AAE2C3",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_GOOGLE_SECRET",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "GoogleSecret3B43D818",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_FACEBOOK_CLIENT_ID",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "FacebookClientIdD49EC273",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_FACEBOOK_SECRET",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "FacebookSecret4142F291",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_TWITTER_CLIENT_ID",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "TwitterClientId11873110",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_TWITTER_SECRET",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "TwitterSecretA36121D0",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_GITHUB_CLIENT_ID",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "GitHubClientIdF139378A",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_GITHUB_SECRET",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "GitHubSecret0C4A5322",
                      },
                    ],
                  ],
                },
              },
            ],
            "Ulimits": Array [
              Object {
                "HardLimit": 65536,
                "Name": "nofile",
                "SoftLimit": 65536,
              },
            ],
          },
          Object {
            "Cpu": 205,
            "Environment": Array [
              Object {
                "Name": "APPMESH_VIRTUAL_NODE_NAME",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "mesh/",
                      Object {
                        "Fn::GetAtt": Array [
                          "Mesh73A573F6",
                          "MeshName",
                        ],
                      },
                      "/virtualNode/",
                      Object {
                        "Fn::GetAtt": Array [
                          "AuthVirtualNode4480F984",
                          "VirtualNodeName",
                        ],
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "ENVOY_ADMIN_ACCESS_LOG_FILE",
                "Value": "/dev/null",
              },
              Object {
                "Name": "ENABLE_ENVOY_XRAY_TRACING",
                "Value": "1",
              },
              Object {
                "Name": "XRAY_SAMPLING_RATE",
                "Value": "1.00",
              },
            ],
            "Essential": true,
            "HealthCheck": Object {
              "Command": Array [
                "CMD-SHELL",
                "curl -s http://localhost:9901/server_info | grep state | grep -q LIVE",
              ],
              "Interval": 5,
              "Retries": 3,
              "StartPeriod": 10,
              "Timeout": 2,
            },
            "Image": "public.ecr.aws/appmesh/aws-appmesh-envoy:v1.22.2.1-prod",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "AuthLogs940C0551",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "MemoryReservation": 205,
            "Name": "envoy",
            "ReadonlyRootFilesystem": false,
            "Ulimits": Array [
              Object {
                "HardLimit": 1024000,
                "Name": "nofile",
                "SoftLimit": 1024000,
              },
            ],
            "User": "1337",
          },
          Object {
            "Cpu": 102,
            "Essential": true,
            "HealthCheck": Object {
              "Command": Array [
                "CMD",
                "/xray",
                "--version",
                "||",
                "exit 1",
              ],
              "Interval": 5,
              "Retries": 3,
              "StartPeriod": 10,
              "Timeout": 2,
            },
            "Image": "public.ecr.aws/xray/aws-xray-daemon:latest",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "AuthLogs940C0551",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "MemoryReservation": 205,
            "Name": "xray-daemon",
            "ReadonlyRootFilesystem": true,
            "User": "1337",
          },
        ],
        "Cpu": "1024",
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "AuthTaskDefinitionExecutionRole8B68B008",
            "Arn",
          ],
        },
        "Family": "SupabasemeshAuthTaskDefinition8153B1FA",
        "Memory": "2048",
        "NetworkMode": "awsvpc",
        "ProxyConfiguration": Object {
          "ContainerName": "envoy",
          "ProxyConfigurationProperties": Array [
            Object {
              "Name": "IgnoredUID",
              "Value": "1337",
            },
            Object {
              "Name": "IgnoredGID",
              "Value": "1338",
            },
            Object {
              "Name": "AppPorts",
              "Value": "9999",
            },
            Object {
              "Name": "ProxyIngressPort",
              "Value": "15000",
            },
            Object {
              "Name": "ProxyEgressPort",
              "Value": "15001",
            },
            Object {
              "Name": "EgressIgnoredIPs",
              "Value": "169.254.170.2,169.254.169.254",
            },
          ],
          "Type": "APPMESH",
        },
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "RuntimePlatform": Object {
          "CpuArchitecture": "ARM64",
          "OperatingSystemFamily": "LINUX",
        },
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "AuthTaskDefinitionTaskRole0174181B",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "AuthTaskDefinitionExecutionRole8B68B008": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "AuthTaskDefinitionExecutionRoleDefaultPolicy2A4B4627": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "AuthLogs940C0551",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "DatabaseauthUrlParameter27067EF6",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "SupabaseJwtSecretFA404A75",
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "SupabaseMailSecret777E0288",
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "GoogleClientIdF5AAE2C3",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "GoogleSecret3B43D818",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "FacebookClientIdD49EC273",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "FacebookSecret4142F291",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "TwitterClientId11873110",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "TwitterSecretA36121D0",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "GitHubClientIdF139378A",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "GitHubSecret0C4A5322",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "AuthTaskDefinitionExecutionRoleDefaultPolicy2A4B4627",
        "Roles": Array [
          Object {
            "Ref": "AuthTaskDefinitionExecutionRole8B68B008",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "AuthTaskDefinitionTaskRole0174181B": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          "arn:aws:iam::aws:policy/AWSAppMeshEnvoyAccess",
          "arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess",
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "AuthVirtualNode4480F984": Object {
      "Properties": Object {
        "MeshName": Object {
          "Fn::GetAtt": Array [
            "Mesh73A573F6",
            "MeshName",
          ],
        },
        "Spec": Object {
          "Backends": Array [
            Object {
              "VirtualService": Object {
                "VirtualServiceName": "rest.supabase.local",
              },
            },
            Object {
              "VirtualService": Object {
                "VirtualServiceName": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "email-smtp.",
                      Object {
                        "Ref": "SesRegionParameter",
                      },
                      ".amazonaws.com",
                    ],
                  ],
                },
              },
            },
            Object {
              "VirtualService": Object {
                "VirtualServiceName": Object {
                  "Fn::GetAtt": Array [
                    "DatabaseB269D8BB",
                    "Endpoint.Address",
                  ],
                },
              },
            },
          ],
          "Listeners": Array [
            Object {
              "ConnectionPool": Object {
                "HTTP": Object {
                  "MaxConnections": 1024,
                  "MaxPendingRequests": 1024,
                },
              },
              "PortMapping": Object {
                "Port": 9999,
                "Protocol": "http",
              },
            },
          ],
          "Logging": Object {
            "AccessLog": Object {
              "File": Object {
                "Path": "/dev/stdout",
              },
            },
          },
          "ServiceDiscovery": Object {
            "AWSCloudMap": Object {
              "NamespaceName": "supabase.local",
              "ServiceName": Object {
                "Fn::GetAtt": Array [
                  "AuthSvcCloudmapService85C22E54",
                  "Name",
                ],
              },
            },
          },
        },
        "VirtualNodeName": "Auth",
      },
      "Type": "AWS::AppMesh::VirtualNode",
    },
    "AuthVirtualService6B0561FE": Object {
      "Properties": Object {
        "MeshName": Object {
          "Fn::GetAtt": Array [
            "Mesh73A573F6",
            "MeshName",
          ],
        },
        "Spec": Object {
          "Provider": Object {
            "VirtualNode": Object {
              "VirtualNodeName": Object {
                "Fn::GetAtt": Array [
                  "AuthVirtualNode4480F984",
                  "VirtualNodeName",
                ],
              },
            },
          },
        },
        "VirtualServiceName": "auth.supabase.local",
      },
      "Type": "AWS::AppMesh::VirtualService",
    },
    "Bucket83908E77": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
    },
    "CDNCreateWebAclFunction9B43907E": Object {
      "DependsOn": Array [
        "CDNCreateWebAclFunctionServiceRoleDefaultPolicyA68E2DE5",
        "CDNCreateWebAclFunctionServiceRole84967C6A",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "25e1868549f0ea6f4ff053e267112cab3e36f35158a348198200ba74ee8f96ac.zip",
        },
        "Description": "Supabase - Create WAF Web ACL function",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "CDNCreateWebAclFunctionServiceRole84967C6A",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
        "Timeout": 15,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CDNCreateWebAclFunctionServiceRole84967C6A": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CDNCreateWebAclFunctionServiceRoleDefaultPolicyA68E2DE5": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "wafv2:DeleteWebACL",
                "wafv2:GetWebACL",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":wafv2:us-east-1:",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":global/webacl/",
                    Object {
                      "Ref": "AWS::StackName",
                    },
                    "-*/*",
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "wafv2:CreateWebACL",
                "wafv2:UpdateWebACL",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":wafv2:us-east-1:",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":global/webacl/",
                      Object {
                        "Ref": "AWS::StackName",
                      },
                      "-*/*",
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":wafv2:us-east-1:",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":global/ipset/*/*",
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":wafv2:us-east-1:",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":global/managedruleset/*/*",
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":wafv2:us-east-1:",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":global/regexpatternset/*/*",
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":wafv2:us-east-1:",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":global/rulegroup/*/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CDNCreateWebAclFunctionServiceRoleDefaultPolicyA68E2DE5",
        "Roles": Array [
          Object {
            "Ref": "CDNCreateWebAclFunctionServiceRole84967C6A",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CDNDistributionD4FAE585": Object {
      "Properties": Object {
        "DistributionConfig": Object {
          "CacheBehaviors": Array [
            Object {
              "AllowedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
              "CachedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
              ],
              "Compress": true,
              "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
              "PathPattern": "*.css",
              "TargetOriginId": "SupabasemeshCDNDistributionOrigin15B66A208",
              "ViewerProtocolPolicy": "redirect-to-https",
            },
            Object {
              "AllowedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
              "CachedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
              ],
              "Compress": true,
              "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
              "PathPattern": "*.png",
              "TargetOriginId": "SupabasemeshCDNDistributionOrigin15B66A208",
              "ViewerProtocolPolicy": "redirect-to-https",
            },
            Object {
              "AllowedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
              "CachedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
              ],
              "Compress": true,
              "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
              "PathPattern": "*.jpg",
              "TargetOriginId": "SupabasemeshCDNDistributionOrigin15B66A208",
              "ViewerProtocolPolicy": "redirect-to-https",
            },
            Object {
              "AllowedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
              "CachedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
              ],
              "Compress": true,
              "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
              "PathPattern": "*.jpeg",
              "TargetOriginId": "SupabasemeshCDNDistributionOrigin15B66A208",
              "ViewerProtocolPolicy": "redirect-to-https",
            },
            Object {
              "AllowedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
              "CachedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
              ],
              "Compress": true,
              "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
              "PathPattern": "*.svg",
              "TargetOriginId": "SupabasemeshCDNDistributionOrigin15B66A208",
              "ViewerProtocolPolicy": "redirect-to-https",
            },
            Object {
              "AllowedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
              "CachedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
              ],
              "Compress": true,
              "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
              "PathPattern": "*.woff",
              "TargetOriginId": "SupabasemeshCDNDistributionOrigin15B66A208",
              "ViewerProtocolPolicy": "redirect-to-https",
            },
            Object {
              "AllowedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
              "CachedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
              ],
              "Compress": true,
              "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
              "PathPattern": "*.woff2",
              "TargetOriginId": "SupabasemeshCDNDistributionOrigin15B66A208",
              "ViewerProtocolPolicy": "redirect-to-https",
            },
            Object {
              "AllowedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
              "CachedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
              ],
              "Compress": true,
              "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
              "PathPattern": "*.js",
              "TargetOriginId": "SupabasemeshCDNDistributionOrigin15B66A208",
              "ViewerProtocolPolicy": "redirect-to-https",
            },
          ],
          "Comment": "Supabase - CDN",
          "CustomErrorResponses": Array [
            Object {
              "ErrorCachingMinTTL": 10,
              "ErrorCode": 500,
            },
            Object {
              "ErrorCachingMinTTL": 10,
              "ErrorCode": 501,
            },
            Object {
              "ErrorCachingMinTTL": 10,
              "ErrorCode": 502,
            },
            Object {
              "ErrorCachingMinTTL": 10,
              "ErrorCode": 503,
            },
            Object {
              "ErrorCachingMinTTL": 10,
              "ErrorCode": 504,
            },
          ],
          "DefaultCacheBehavior": Object {
            "AllowedMethods": Array [
              "GET",
              "HEAD",
              "OPTIONS",
              "PUT",
              "PATCH",
              "POST",
              "DELETE",
            ],
            "CachePolicyId": "4135ea2d-6df8-44a3-9df3-4b5a84be39ad",
            "Compress": true,
            "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
            "TargetOriginId": "SupabasemeshCDNDistributionOrigin15B66A208",
            "ViewerProtocolPolicy": "redirect-to-https",
          },
          "Enabled": true,
          "HttpVersion": "http2and3",
          "IPV6Enabled": true,
          "Origins": Array [
            Object {
              "CustomOriginConfig": Object {
                "OriginProtocolPolicy": "http-only",
                "OriginSSLProtocols": Array [
                  "TLSv1.2",
                ],
              },
              "DomainName": Object {
                "Fn::GetAtt": Array [
                  "KongLoadBalancerD341ED7C",
                  "DNSName",
                ],
              },
              "Id": "SupabasemeshCDNDistributionOrigin15B66A208",
            },
          ],
          "WebACLId": Object {
            "Fn::GetAtt": Array [
              "CDNWebAcl7B4F8CB2",
              "Arn",
            ],
          },
        },
      },
      "Type": "AWS::CloudFront::Distribution",
    },
    "CDNWebAcl7B4F8CB2": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "DefaultAction": Object {
          "Allow": Object {},
        },
        "Description": "Web ACL for self-hosted Supabase",
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AWS::StackName",
              },
              "-CDN-WebAcl",
            ],
          ],
        },
        "Rules": Array [
          Object {
            "Name": "AWS-AWSManagedRulesAmazonIpReputationList",
            "OverrideAction": Object {
              "None": Object {},
            },
            "Priority": 0,
            "Statement": Object {
              "ManagedRuleGroupStatement": Object {
                "Name": "AWSManagedRulesAmazonIpReputationList",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": Object {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "AWS-AWSManagedRulesAmazonIpReputationList",
              "SampledRequestsEnabled": true,
            },
          },
          Object {
            "Name": "AWS-AWSManagedRulesKnownBadInputsRuleSet",
            "OverrideAction": Object {
              "None": Object {},
            },
            "Priority": 1,
            "Statement": Object {
              "ManagedRuleGroupStatement": Object {
                "Name": "AWSManagedRulesKnownBadInputsRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": Object {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "AWS-AWSManagedRulesKnownBadInputsRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
          Object {
            "Name": "AWS-AWSManagedRulesSQLiRuleSet",
            "OverrideAction": Object {
              "None": Object {},
            },
            "Priority": 2,
            "Statement": Object {
              "ManagedRuleGroupStatement": Object {
                "Name": "AWSManagedRulesSQLiRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": Object {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "AWS-AWSManagedRulesSQLiRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
          Object {
            "Name": "AWS-AWSManagedRulesBotControlRuleSet",
            "OverrideAction": Object {
              "None": Object {},
            },
            "Priority": 3,
            "Statement": Object {
              "ManagedRuleGroupStatement": Object {
                "Name": "AWSManagedRulesBotControlRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": Object {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "AWS-AWSManagedRulesBotControlRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
          Object {
            "Name": "AWS-AWSManagedRulesATPRuleSet",
            "OverrideAction": Object {
              "None": Object {},
            },
            "Priority": 4,
            "Statement": Object {
              "ManagedRuleGroupStatement": Object {
                "ExcludedRules": Array [
                  Object {
                    "Name": "SignalMissingCredential",
                  },
                ],
                "ManagedRuleGroupConfigs": Array [
                  Object {
                    "LoginPath": "/auth/v1/token",
                  },
                  Object {
                    "PayloadType": "JSON",
                  },
                  Object {
                    "UsernameField": Object {
                      "Identifier": "/email",
                    },
                  },
                  Object {
                    "PasswordField": Object {
                      "Identifier": "/password",
                    },
                  },
                ],
                "Name": "AWSManagedRulesATPRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": Object {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "AWS-AWSManagedRulesATPRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
        ],
        "Scope": "CLOUDFRONT",
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "CDNWebAclProviderframeworkonEvent0566E709",
            "Arn",
          ],
        },
        "VisibilityConfig": Object {
          "CloudWatchMetricsEnabled": true,
          "MetricName": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Ref": "AWS::StackName",
                },
                "-CDN-WebAcl",
              ],
            ],
          },
          "SampledRequestsEnabled": true,
        },
      },
      "Type": "Custom::WebACL",
      "UpdateReplacePolicy": "Delete",
    },
    "CDNWebAclProviderframeworkonEvent0566E709": Object {
      "DependsOn": Array [
        "CDNWebAclProviderframeworkonEventServiceRoleDefaultPolicy83D0FB7A",
        "CDNWebAclProviderframeworkonEventServiceRoleF03F76DB",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "e7c95e1a12d903d913ebdd526c735f1ac58b2024882a5562110221fe685ebe85.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (Supabase-mesh/CDN/WebAclProvider)",
        "Environment": Object {
          "Variables": Object {
            "USER_ON_EVENT_FUNCTION_ARN": Object {
              "Fn::GetAtt": Array [
                "CDNCreateWebAclFunction9B43907E",
                "Arn",
              ],
            },
          },
        },
        "Handler": "framework.onEvent",
        "Role": Object {
          "Fn::GetAtt": Array [
            "CDNWebAclProviderframeworkonEventServiceRoleF03F76DB",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CDNWebAclProviderframeworkonEventServiceRoleDefaultPolicy83D0FB7A": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "CDNCreateWebAclFunction9B43907E",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "CDNCreateWebAclFunction9B43907E",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CDNWebAclProviderframeworkonEventServiceRoleDefaultPolicy83D0FB7A",
        "Roles": Array [
          Object {
            "Ref": "CDNWebAclProviderframeworkonEventServiceRoleF03F76DB",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CDNWebAclProviderframeworkonEventServiceRoleF03F76DB": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudFrontManagedPrefixList4E30A88B": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "CloudFrontManagedPrefixListCustomResourcePolicy18F5EEC5",
      ],
      "Properties": Object {
        "Create": "{\\"service\\":\\"EC2\\",\\"action\\":\\"describeManagedPrefixLists\\",\\"parameters\\":{\\"Filters\\":[{\\"Name\\":\\"prefix-list-name\\",\\"Values\\":[\\"com.amazonaws.global.cloudfront.origin-facing\\"]}]},\\"physicalResourceId\\":{\\"responsePath\\":\\"PrefixLists.0.PrefixListId\\"}}",
        "InstallLatestAwsSdk": true,
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "AWS679f53fac002430cb0da5b7982bd22872D164C4C",
            "Arn",
          ],
        },
      },
      "Type": "Custom::ManagedPrefixList",
      "UpdateReplacePolicy": "Delete",
    },
    "CloudFrontManagedPrefixListCustomResourcePolicy18F5EEC5": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "ec2:DescribeManagedPrefixLists",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudFrontManagedPrefixListCustomResourcePolicy18F5EEC5",
        "Roles": Array [
          Object {
            "Ref": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "Cluster3DA9CCBA": Object {
      "Properties": Object {
        "CapacityProviders": Array [
          "FARGATE",
          "FARGATE_SPOT",
        ],
        "Cluster": Object {
          "Ref": "ClusterEB0386A7",
        },
        "DefaultCapacityProviderStrategy": Array [],
      },
      "Type": "AWS::ECS::ClusterCapacityProviderAssociations",
    },
    "ClusterDefaultServiceDiscoveryNamespaceC336F9B4": Object {
      "Properties": Object {
        "Name": "supabase.local",
        "Vpc": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::ServiceDiscovery::PrivateDnsNamespace",
    },
    "ClusterEB0386A7": Object {
      "Properties": Object {
        "ClusterSettings": Array [
          Object {
            "Name": "containerInsights",
            "Value": "disabled",
          },
        ],
      },
      "Type": "AWS::ECS::Cluster",
    },
    "DatabaseB269D8BB": Object {
      "DeletionPolicy": "Snapshot",
      "Properties": Object {
        "CopyTagsToSnapshot": true,
        "DBClusterParameterGroupName": Object {
          "Ref": "ParameterGroup5E32DECB",
        },
        "DBSubnetGroupName": Object {
          "Ref": "DatabaseSubnets56F17B9A",
        },
        "DatabaseName": "postgres",
        "Engine": "aurora-postgresql",
        "EngineVersion": "14.3",
        "MasterUserPassword": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{{resolve:secretsmanager:",
              Object {
                "Ref": "SupabasemeshDatabaseSecretC63CE6F66b2eb8af71bef5c6813259b78dc271d3",
              },
              ":SecretString:password::}}",
            ],
          ],
        },
        "MasterUsername": "supabase_admin",
        "Port": 5432,
        "StorageEncrypted": true,
        "VpcSecurityGroupIds": Array [
          Object {
            "Fn::GetAtt": Array [
              "DatabaseSecurityGroup5C91FDCB",
              "GroupId",
            ],
          },
        ],
      },
      "Type": "AWS::RDS::DBCluster",
      "UpdateReplacePolicy": "Snapshot",
    },
    "DatabaseDbScalingConfigureA53A665A": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "DatabaseDbScalingConfigureCustomResourcePolicy8F6D2C0B",
      ],
      "Properties": Object {
        "Create": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{\\"service\\":\\"RDS\\",\\"action\\":\\"modifyDBCluster\\",\\"parameters\\":{\\"DBClusterIdentifier\\":\\"",
              Object {
                "Ref": "DatabaseB269D8BB",
              },
              "\\",\\"ServerlessV2ScalingConfiguration\\":{\\"MinCapacity\\":0.5,\\"MaxCapacity\\":32}},\\"physicalResourceId\\":{\\"id\\":\\"",
              Object {
                "Ref": "DatabaseB269D8BB",
              },
              "\\"}}",
            ],
          ],
        },
        "InstallLatestAwsSdk": true,
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "AWS679f53fac002430cb0da5b7982bd22872D164C4C",
            "Arn",
          ],
        },
        "Update": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{\\"service\\":\\"RDS\\",\\"action\\":\\"modifyDBCluster\\",\\"parameters\\":{\\"DBClusterIdentifier\\":\\"",
              Object {
                "Ref": "DatabaseB269D8BB",
              },
              "\\",\\"ServerlessV2ScalingConfiguration\\":{\\"MinCapacity\\":0.5,\\"MaxCapacity\\":32}},\\"physicalResourceId\\":{\\"id\\":\\"",
              Object {
                "Ref": "DatabaseB269D8BB",
              },
              "\\"}}",
            ],
          ],
        },
      },
      "Type": "Custom::AuroraServerlessV2ScalingConfiguration",
      "UpdateReplacePolicy": "Delete",
    },
    "DatabaseDbScalingConfigureCustomResourcePolicy8F6D2C0B": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "rds:ModifyDBCluster",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "DatabaseDbScalingConfigureCustomResourcePolicy8F6D2C0B",
        "Roles": Array [
          Object {
            "Ref": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "DatabaseInit6CD697C3": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "DatabaseInstance1844F58FD",
      ],
      "Properties": Object {
        "Hostname": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Address",
          ],
        },
        "SecretId": Object {
          "Ref": "DatabaseSecretAttachmentE5D1B020",
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "DatabaseInitProviderframeworkonEventE5DC022A",
            "Arn",
          ],
        },
      },
      "Type": "Custom::SupabaseDatabaseInit",
      "UpdateReplacePolicy": "Delete",
    },
    "DatabaseInitFunctionC94D0413": Object {
      "DependsOn": Array [
        "DatabaseInitFunctionServiceRoleDefaultPolicyE8E6FF4E",
        "DatabaseInitFunctionServiceRole8CD61C4B",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "8596f13703aa5f15379180c66371178ebc06977f4f9242bc89ea139bb3b6ae5e.zip",
        },
        "Description": "Supabase - Database init function",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "DatabaseInitFunctionServiceRole8CD61C4B",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
        "Timeout": 60,
        "VpcConfig": Object {
          "SecurityGroupIds": Array [
            Object {
              "Fn::GetAtt": Array [
                "DatabaseInitFunctionSecurityGroupAC823144",
                "GroupId",
              ],
            },
          ],
          "SubnetIds": Array [
            Object {
              "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
            },
            Object {
              "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "DatabaseInitFunctionSecurityGroupAC823144": Object {
      "Properties": Object {
        "GroupDescription": "Automatic security group for Lambda Function SupabasemeshDatabaseInitFunctionCC7F15E7",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "DatabaseInitFunctionServiceRole8CD61C4B": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "DatabaseInitFunctionServiceRoleDefaultPolicyE8E6FF4E": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "DatabaseSecretAttachmentE5D1B020",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "DatabaseInitFunctionServiceRoleDefaultPolicyE8E6FF4E",
        "Roles": Array [
          Object {
            "Ref": "DatabaseInitFunctionServiceRole8CD61C4B",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "DatabaseInitProviderframeworkonEventE5DC022A": Object {
      "DependsOn": Array [
        "DatabaseInitProviderframeworkonEventServiceRoleDefaultPolicy7FB834D6",
        "DatabaseInitProviderframeworkonEventServiceRoleF32E57C9",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "e7c95e1a12d903d913ebdd526c735f1ac58b2024882a5562110221fe685ebe85.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (Supabase-mesh/Database/InitProvider)",
        "Environment": Object {
          "Variables": Object {
            "USER_ON_EVENT_FUNCTION_ARN": Object {
              "Fn::GetAtt": Array [
                "DatabaseInitFunctionC94D0413",
                "Arn",
              ],
            },
          },
        },
        "Handler": "framework.onEvent",
        "Role": Object {
          "Fn::GetAtt": Array [
            "DatabaseInitProviderframeworkonEventServiceRoleF32E57C9",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "DatabaseInitProviderframeworkonEventServiceRoleDefaultPolicy7FB834D6": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "DatabaseInitFunctionC94D0413",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "DatabaseInitFunctionC94D0413",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "DatabaseInitProviderframeworkonEventServiceRoleDefaultPolicy7FB834D6",
        "Roles": Array [
          Object {
            "Ref": "DatabaseInitProviderframeworkonEventServiceRoleF32E57C9",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "DatabaseInitProviderframeworkonEventServiceRoleF32E57C9": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "DatabaseInstance1844F58FD": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "DatabaseDbScalingConfigureCustomResourcePolicy8F6D2C0B",
        "DatabaseDbScalingConfigureA53A665A",
        "VPCPrivateSubnet1DefaultRouteAE1D6490",
        "VPCPrivateSubnet2DefaultRouteF4F5CFD2",
      ],
      "Properties": Object {
        "DBClusterIdentifier": Object {
          "Ref": "DatabaseB269D8BB",
        },
        "DBInstanceClass": "db.serverless",
        "DBSubnetGroupName": Object {
          "Ref": "DatabaseSubnets56F17B9A",
        },
        "EnablePerformanceInsights": true,
        "Engine": "aurora-postgresql",
        "EngineVersion": "14.3",
        "PerformanceInsightsRetentionPeriod": 7,
      },
      "Type": "AWS::RDS::DBInstance",
      "UpdateReplacePolicy": "Delete",
    },
    "DatabaseInstance2AA380DEE": Object {
      "Condition": "DatabaseMultiAzCondition82AA721B",
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "DatabaseDbScalingConfigureCustomResourcePolicy8F6D2C0B",
        "DatabaseDbScalingConfigureA53A665A",
        "VPCPrivateSubnet1DefaultRouteAE1D6490",
        "VPCPrivateSubnet2DefaultRouteF4F5CFD2",
      ],
      "Properties": Object {
        "DBClusterIdentifier": Object {
          "Ref": "DatabaseB269D8BB",
        },
        "DBInstanceClass": "db.serverless",
        "DBSubnetGroupName": Object {
          "Ref": "DatabaseSubnets56F17B9A",
        },
        "EnablePerformanceInsights": true,
        "Engine": "aurora-postgresql",
        "EngineVersion": "14.3",
        "PerformanceInsightsRetentionPeriod": 7,
      },
      "Type": "AWS::RDS::DBInstance",
      "UpdateReplacePolicy": "Delete",
    },
    "DatabaseRotationSecurityGroup8E1B7C66": Object {
      "Properties": Object {
        "GroupDescription": "Supabase-mesh/Database/RotationSecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "DatabaseSecretAttachmentE5D1B020": Object {
      "Properties": Object {
        "SecretId": Object {
          "Ref": "SupabasemeshDatabaseSecretC63CE6F66b2eb8af71bef5c6813259b78dc271d3",
        },
        "TargetId": Object {
          "Ref": "DatabaseB269D8BB",
        },
        "TargetType": "AWS::RDS::DBCluster",
      },
      "Type": "AWS::SecretsManager::SecretTargetAttachment",
    },
    "DatabaseSecretAttachmentPolicy5ACFE6CA": Object {
      "Properties": Object {
        "ResourcePolicy": Object {
          "Statement": Array [
            Object {
              "Action": "secretsmanager:DeleteSecret",
              "Effect": "Deny",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "SecretId": Object {
          "Ref": "DatabaseSecretAttachmentE5D1B020",
        },
      },
      "Type": "AWS::SecretsManager::ResourcePolicy",
    },
    "DatabaseSecretAttachmentRotation5592F5B2": Object {
      "Properties": Object {
        "HostedRotationLambda": Object {
          "ExcludeCharacters": "%+~\`#$&*()|[]{}:;<>?!'/@\\"\\\\=^",
          "RotationLambdaName": "SupabaseDatabaseSecretRotationFunction",
          "RotationType": "PostgreSQLSingleUser",
          "VpcSecurityGroupIds": Object {
            "Fn::GetAtt": Array [
              "DatabaseRotationSecurityGroup8E1B7C66",
              "GroupId",
            ],
          },
          "VpcSubnetIds": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
                },
                ",",
                Object {
                  "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
                },
              ],
            ],
          },
        },
        "RotationRules": Object {
          "AutomaticallyAfterDays": 30,
        },
        "SecretId": Object {
          "Ref": "DatabaseSecretAttachmentE5D1B020",
        },
      },
      "Type": "AWS::SecretsManager::RotationSchedule",
    },
    "DatabaseSecretChangeRule472D79D9": Object {
      "Properties": Object {
        "Description": "Supabase - Update parameter store, when DB secret rotated",
        "EventPattern": Object {
          "detail": Object {
            "additionalEventData": Object {
              "SecretId": Array [
                Object {
                  "Ref": "DatabaseSecretAttachmentE5D1B020",
                },
              ],
            },
            "eventName": Array [
              "RotationSucceeded",
            ],
          },
          "source": Array [
            "aws.secretsmanager",
          ],
        },
        "State": "ENABLED",
        "Targets": Array [
          Object {
            "Arn": Object {
              "Fn::GetAtt": Array [
                "DatabaseSyncSecretFunction60FEB86F",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "DatabaseSecretChangeRuleAllowEventRuleSupabasemeshDatabaseSyncSecretFunctionD493963A874BC4BD": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DatabaseSyncSecretFunction60FEB86F",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": Object {
          "Fn::GetAtt": Array [
            "DatabaseSecretChangeRule472D79D9",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DatabaseSecurityGroup5C91FDCB": Object {
      "Properties": Object {
        "GroupDescription": "RDS security group",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "DatabaseSecurityGroupfromSupabasemeshAuthSvcSecurityGroup3A89AA51IndirectPort91FF1B71": Object {
      "Properties": Object {
        "Description": "from SupabasemeshAuthSvcSecurityGroup3A89AA51:{IndirectPort}",
        "FromPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Port",
          ],
        },
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "DatabaseSecurityGroup5C91FDCB",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "AuthSvcSecurityGroup71415F29",
            "GroupId",
          ],
        },
        "ToPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "DatabaseSecurityGroupfromSupabasemeshDatabaseInitFunctionSecurityGroup41336EA6IndirectPort983B52F2": Object {
      "Properties": Object {
        "Description": "from SupabasemeshDatabaseInitFunctionSecurityGroup41336EA6:{IndirectPort}",
        "FromPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Port",
          ],
        },
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "DatabaseSecurityGroup5C91FDCB",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "DatabaseInitFunctionSecurityGroupAC823144",
            "GroupId",
          ],
        },
        "ToPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "DatabaseSecurityGroupfromSupabasemeshDatabaseRotationSecurityGroupD983A568IndirectPort3EC7F6E6": Object {
      "Properties": Object {
        "Description": "Lambda to rotate secrets",
        "FromPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Port",
          ],
        },
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "DatabaseSecurityGroup5C91FDCB",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "DatabaseRotationSecurityGroup8E1B7C66",
            "GroupId",
          ],
        },
        "ToPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "DatabaseSecurityGroupfromSupabasemeshMetaSvcSecurityGroup875AD61FIndirectPort787FDA9A": Object {
      "Properties": Object {
        "Description": "from SupabasemeshMetaSvcSecurityGroup875AD61F:{IndirectPort}",
        "FromPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Port",
          ],
        },
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "DatabaseSecurityGroup5C91FDCB",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "MetaSvcSecurityGroup28D90BB4",
            "GroupId",
          ],
        },
        "ToPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "DatabaseSecurityGroupfromSupabasemeshRealtimeSvcSecurityGroup45D6DE8CIndirectPort028542E5": Object {
      "Properties": Object {
        "Description": "from SupabasemeshRealtimeSvcSecurityGroup45D6DE8C:{IndirectPort}",
        "FromPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Port",
          ],
        },
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "DatabaseSecurityGroup5C91FDCB",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "RealtimeSvcSecurityGroup15A1991B",
            "GroupId",
          ],
        },
        "ToPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "DatabaseSecurityGroupfromSupabasemeshRestSvcSecurityGroup6ADE4775IndirectPortE30B2010": Object {
      "Properties": Object {
        "Description": "from SupabasemeshRestSvcSecurityGroup6ADE4775:{IndirectPort}",
        "FromPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Port",
          ],
        },
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "DatabaseSecurityGroup5C91FDCB",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "RestSvcSecurityGroup4F37982C",
            "GroupId",
          ],
        },
        "ToPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "DatabaseSecurityGroupfromSupabasemeshStorageSvcSecurityGroup5DC874CAIndirectPort61E96BB5": Object {
      "Properties": Object {
        "Description": "from SupabasemeshStorageSvcSecurityGroup5DC874CA:{IndirectPort}",
        "FromPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Port",
          ],
        },
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "DatabaseSecurityGroup5C91FDCB",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "StorageSvcSecurityGroup134E6883",
            "GroupId",
          ],
        },
        "ToPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "DatabaseSubnets56F17B9A": Object {
      "Properties": Object {
        "DBSubnetGroupDescription": "Subnets for Database database",
        "SubnetIds": Array [
          Object {
            "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
          },
          Object {
            "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
          },
        ],
      },
      "Type": "AWS::RDS::DBSubnetGroup",
    },
    "DatabaseSyncSecretFunction60FEB86F": Object {
      "DependsOn": Array [
        "DatabaseSyncSecretFunctionServiceRoleDefaultPolicy5F9B6AA1",
        "DatabaseSyncSecretFunctionServiceRole189FFC3D",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "592c9d675ff833cd183fb49d128d1d1f8202742d5997b530ef384abfbd890c93.zip",
        },
        "Description": "Supabase - Sync DB secret to parameter store",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "URL_PARAMETER_NAME": Object {
              "Ref": "DatabaseUrlParameter81075D88",
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "DatabaseSyncSecretFunctionServiceRole189FFC3D",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "DatabaseSyncSecretFunctionServiceRole189FFC3D": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "DatabaseSyncSecretFunctionServiceRoleDefaultPolicy5F9B6AA1": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "ssm:PutParameter",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "DatabaseUrlParameter81075D88",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": "ssm:PutParameter",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "DatabaseauthUrlParameter27067EF6",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "DatabaseSecretAttachmentE5D1B020",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "DatabaseSyncSecretFunctionServiceRoleDefaultPolicy5F9B6AA1",
        "Roles": Array [
          Object {
            "Ref": "DatabaseSyncSecretFunctionServiceRole189FFC3D",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "DatabaseUrlParameter81075D88": Object {
      "Properties": Object {
        "Description": "The standard connection PostgreSQL URI format.",
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/",
              Object {
                "Ref": "AWS::StackName",
              },
              "/Database/Url",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Fn::Join": Array [
            "",
            Array [
              "postgres://{{resolve:secretsmanager:",
              Object {
                "Ref": "DatabaseSecretAttachmentE5D1B020",
              },
              ":SecretString:username::}}:{{resolve:secretsmanager:",
              Object {
                "Ref": "DatabaseSecretAttachmentE5D1B020",
              },
              ":SecretString:password::}}@{{resolve:secretsmanager:",
              Object {
                "Ref": "DatabaseSecretAttachmentE5D1B020",
              },
              ":SecretString:host::}}:{{resolve:secretsmanager:",
              Object {
                "Ref": "DatabaseSecretAttachmentE5D1B020",
              },
              ":SecretString:port::}}/{{resolve:secretsmanager:",
              Object {
                "Ref": "DatabaseSecretAttachmentE5D1B020",
              },
              ":SecretString:dbname::}}",
            ],
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "DatabaseVirtualNodeA8FF296A": Object {
      "Properties": Object {
        "MeshName": Object {
          "Fn::GetAtt": Array [
            "Mesh73A573F6",
            "MeshName",
          ],
        },
        "Spec": Object {
          "Listeners": Array [
            Object {
              "PortMapping": Object {
                "Port": Object {
                  "Fn::GetAtt": Array [
                    "DatabaseB269D8BB",
                    "Endpoint.Port",
                  ],
                },
                "Protocol": "tcp",
              },
            },
          ],
          "ServiceDiscovery": Object {
            "DNS": Object {
              "Hostname": Object {
                "Fn::GetAtt": Array [
                  "DatabaseB269D8BB",
                  "Endpoint.Address",
                ],
              },
              "ResponseType": "ENDPOINTS",
            },
          },
        },
        "VirtualNodeName": "Database",
      },
      "Type": "AWS::AppMesh::VirtualNode",
    },
    "DatabaseVirtualService025456E2": Object {
      "Properties": Object {
        "MeshName": Object {
          "Fn::GetAtt": Array [
            "Mesh73A573F6",
            "MeshName",
          ],
        },
        "Spec": Object {
          "Provider": Object {
            "VirtualNode": Object {
              "VirtualNodeName": Object {
                "Fn::GetAtt": Array [
                  "DatabaseVirtualNodeA8FF296A",
                  "VirtualNodeName",
                ],
              },
            },
          },
        },
        "VirtualServiceName": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Address",
          ],
        },
      },
      "Type": "AWS::AppMesh::VirtualService",
    },
    "DatabaseauthUrlParameter27067EF6": Object {
      "Properties": Object {
        "Description": "The standard connection PostgreSQL URI format with \\"?search_path=auth\\".",
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/",
              Object {
                "Ref": "AWS::StackName",
              },
              "/Database/Url/search_path/auth",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Fn::Join": Array [
            "",
            Array [
              "postgres://{{resolve:secretsmanager:",
              Object {
                "Ref": "DatabaseSecretAttachmentE5D1B020",
              },
              ":SecretString:username::}}:{{resolve:secretsmanager:",
              Object {
                "Ref": "DatabaseSecretAttachmentE5D1B020",
              },
              ":SecretString:password::}}@{{resolve:secretsmanager:",
              Object {
                "Ref": "DatabaseSecretAttachmentE5D1B020",
              },
              ":SecretString:host::}}:{{resolve:secretsmanager:",
              Object {
                "Ref": "DatabaseSecretAttachmentE5D1B020",
              },
              ":SecretString:port::}}/{{resolve:secretsmanager:",
              Object {
                "Ref": "DatabaseSecretAttachmentE5D1B020",
              },
              ":SecretString:dbname::}}?search_path=auth",
            ],
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "FacebookClientIdD49EC273": Object {
      "Properties": Object {
        "Description": "The OAuth2 Client ID registered with the external provider.",
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/",
              Object {
                "Ref": "AWS::StackName",
              },
              "/Auth/External/Facebook/ClientId",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Ref": "FacebookClientIdParameterF8F9E3CB",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "FacebookSecret4142F291": Object {
      "Properties": Object {
        "Description": "The OAuth2 Client Secret provided by the external provider when you registered.",
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/",
              Object {
                "Ref": "AWS::StackName",
              },
              "/Auth/External/Facebook/Secret",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Ref": "FacebookSecretParameter0FEABC80",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "GitHubClientIdF139378A": Object {
      "Properties": Object {
        "Description": "The OAuth2 Client ID registered with the external provider.",
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/",
              Object {
                "Ref": "AWS::StackName",
              },
              "/Auth/External/GitHub/ClientId",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Ref": "GitHubClientIdParameterEB9B453C",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "GitHubSecret0C4A5322": Object {
      "Properties": Object {
        "Description": "The OAuth2 Client Secret provided by the external provider when you registered.",
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/",
              Object {
                "Ref": "AWS::StackName",
              },
              "/Auth/External/GitHub/Secret",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Ref": "GitHubSecretParameter60DD8371",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "GoogleClientIdF5AAE2C3": Object {
      "Properties": Object {
        "Description": "The OAuth2 Client ID registered with the external provider.",
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/",
              Object {
                "Ref": "AWS::StackName",
              },
              "/Auth/External/Google/ClientId",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Ref": "GoogleClientIdParameter10AB1CB7",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "GoogleSecret3B43D818": Object {
      "Properties": Object {
        "Description": "The OAuth2 Client Secret provided by the external provider when you registered.",
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/",
              Object {
                "Ref": "AWS::StackName",
              },
              "/Auth/External/Google/Secret",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Ref": "GoogleSecretParameterD567D187",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "KongForceDeployFunction5F4BDB5C": Object {
      "DependsOn": Array [
        "KongForceDeployFunctionServiceRoleDefaultPolicy9EF28809",
        "KongForceDeployFunctionServiceRole446657AE",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "8d678058f0eb8312a176152d7bdc2392d3a97980a0b4c6a5af633d405b11038b.zip",
        },
        "Description": "Supabase - Force deploy ECS service function",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "ECS_CLUSTER_NAME": Object {
              "Ref": "ClusterEB0386A7",
            },
            "ECS_SERVICE_NAME": Object {
              "Fn::GetAtt": Array [
                "KongSvcServiceE14A19D7",
                "Name",
              ],
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "KongForceDeployFunctionServiceRole446657AE",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "KongForceDeployFunctionServiceRole446657AE": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "KongForceDeployFunctionServiceRoleDefaultPolicy9EF28809": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "ecs:UpdateService",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "KongSvcServiceE14A19D7",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "KongForceDeployFunctionServiceRoleDefaultPolicy9EF28809",
        "Roles": Array [
          Object {
            "Ref": "KongForceDeployFunctionServiceRole446657AE",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "KongLoadBalancerD341ED7C": Object {
      "DependsOn": Array [
        "VPCPublicSubnet1DefaultRoute91CEF279",
        "VPCPublicSubnet2DefaultRouteB7481BBA",
      ],
      "Properties": Object {
        "LoadBalancerAttributes": Array [
          Object {
            "Key": "deletion_protection.enabled",
            "Value": "false",
          },
        ],
        "Scheme": "internet-facing",
        "Subnets": Array [
          Object {
            "Ref": "VPCPublicSubnet1SubnetB4246D30",
          },
          Object {
            "Ref": "VPCPublicSubnet2Subnet74179F39",
          },
        ],
        "Type": "network",
      },
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
    },
    "KongLoadBalancerListenerA03182E0": Object {
      "Properties": Object {
        "DefaultActions": Array [
          Object {
            "TargetGroupArn": Object {
              "Ref": "KongTargetGroupD0277B2A",
            },
            "Type": "forward",
          },
        ],
        "LoadBalancerArn": Object {
          "Ref": "KongLoadBalancerD341ED7C",
        },
        "Port": 80,
        "Protocol": "TCP",
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "KongLogs4BD50491": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "RetentionInDays": 30,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "KongSvcCloudmapServiceF8523DCA": Object {
      "Properties": Object {
        "DnsConfig": Object {
          "DnsRecords": Array [
            Object {
              "TTL": 10,
              "Type": "SRV",
            },
            Object {
              "TTL": 10,
              "Type": "A",
            },
          ],
          "NamespaceId": Object {
            "Fn::GetAtt": Array [
              "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
              "Id",
            ],
          },
          "RoutingPolicy": "MULTIVALUE",
        },
        "HealthCheckCustomConfig": Object {
          "FailureThreshold": 1,
        },
        "Name": "kong",
        "NamespaceId": Object {
          "Fn::GetAtt": Array [
            "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
            "Id",
          ],
        },
      },
      "Type": "AWS::ServiceDiscovery::Service",
    },
    "KongSvcSecurityGroupD458B522": Object {
      "Properties": Object {
        "GroupDescription": "Supabase-mesh/Kong/Svc/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": Object {
              "Fn::GetAtt": Array [
                "VPCB9E5F0B4",
                "CidrBlock",
              ],
            },
            "Description": "NLB healthcheck",
            "FromPort": 8100,
            "IpProtocol": "tcp",
            "ToPort": 8100,
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "KongSvcSecurityGroupfromIndirectPeer80002858A8A7": Object {
      "Properties": Object {
        "Description": "CloudFront",
        "FromPort": 8000,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "KongSvcSecurityGroupD458B522",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourcePrefixListId": Object {
          "Fn::GetAtt": Array [
            "CloudFrontManagedPrefixList4E30A88B",
            "PrefixLists.0.PrefixListId",
          ],
        },
        "ToPort": 8000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "KongSvcServiceE14A19D7": Object {
      "DependsOn": Array [
        "KongLoadBalancerListenerA03182E0",
      ],
      "Properties": Object {
        "Cluster": Object {
          "Ref": "ClusterEB0386A7",
        },
        "DeploymentConfiguration": Object {
          "DeploymentCircuitBreaker": Object {
            "Enable": true,
            "Rollback": true,
          },
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "DeploymentController": Object {
          "Type": "ECS",
        },
        "EnableECSManagedTags": true,
        "HealthCheckGracePeriodSeconds": 60,
        "LaunchType": "FARGATE",
        "LoadBalancers": Array [
          Object {
            "ContainerName": "app",
            "ContainerPort": 8000,
            "TargetGroupArn": Object {
              "Ref": "KongTargetGroupD0277B2A",
            },
          },
        ],
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "KongSvcSecurityGroupD458B522",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Array [
              Object {
                "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
              },
              Object {
                "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
              },
            ],
          },
        },
        "PropagateTags": "SERVICE",
        "ServiceRegistries": Array [
          Object {
            "ContainerName": "app",
            "ContainerPort": 8000,
            "RegistryArn": Object {
              "Fn::GetAtt": Array [
                "KongSvcCloudmapServiceF8523DCA",
                "Arn",
              ],
            },
          },
        ],
        "TaskDefinition": Object {
          "Ref": "KongTaskDefinitionAE44544D",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "KongSvcTaskCountTargetD123B28B": Object {
      "Properties": Object {
        "MaxCapacity": 20,
        "MinCapacity": 1,
        "ResourceId": Object {
          "Fn::Join": Array [
            "",
            Array [
              "service/",
              Object {
                "Ref": "ClusterEB0386A7",
              },
              "/",
              Object {
                "Fn::GetAtt": Array [
                  "KongSvcServiceE14A19D7",
                  "Name",
                ],
              },
            ],
          ],
        },
        "RoleARN": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":iam::",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService",
            ],
          ],
        },
        "ScalableDimension": "ecs:service:DesiredCount",
        "ServiceNamespace": "ecs",
      },
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
    },
    "KongSvcTaskCountTargetScaleOnCpu8A2BCD73": Object {
      "Properties": Object {
        "PolicyName": "SupabasemeshKongSvcTaskCountTargetScaleOnCpu36A8441F",
        "PolicyType": "TargetTrackingScaling",
        "ScalingTargetId": Object {
          "Ref": "KongSvcTaskCountTargetD123B28B",
        },
        "TargetTrackingScalingPolicyConfiguration": Object {
          "PredefinedMetricSpecification": Object {
            "PredefinedMetricType": "ECSServiceAverageCPUUtilization",
          },
          "ScaleInCooldown": 60,
          "ScaleOutCooldown": 60,
          "TargetValue": 50,
        },
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
    },
    "KongTargetGroupD0277B2A": Object {
      "Properties": Object {
        "HealthCheckIntervalSeconds": 10,
        "HealthCheckPort": "8100",
        "Port": 8000,
        "Protocol": "TCP",
        "TargetGroupAttributes": Array [
          Object {
            "Key": "deregistration_delay.timeout_seconds",
            "Value": "30",
          },
          Object {
            "Key": "preserve_client_ip.enabled",
            "Value": "true",
          },
        ],
        "TargetType": "ip",
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
    },
    "KongTaskDefinitionAE44544D": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "Cpu": 717,
            "DependsOn": Array [
              Object {
                "Condition": "HEALTHY",
                "ContainerName": "envoy",
              },
            ],
            "Environment": Array [
              Object {
                "Name": "KONG_DNS_ORDER",
                "Value": "LAST,A,CNAME",
              },
              Object {
                "Name": "KONG_PLUGINS",
                "Value": "request-transformer,cors,key-auth,acl",
              },
              Object {
                "Name": "KONG_STATUS_LISTEN",
                "Value": "0.0.0.0:8100",
              },
            ],
            "Essential": true,
            "HealthCheck": Object {
              "Command": Array [
                "CMD",
                "kong",
                "health",
              ],
              "Interval": 10,
              "Retries": 3,
              "Timeout": 10,
            },
            "Image": "public.ecr.aws/u3p7q2r8/kong:latest",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "KongLogs4BD50491",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "MemoryReservation": 1638,
            "Name": "app",
            "PortMappings": Array [
              Object {
                "ContainerPort": 8000,
                "Protocol": "tcp",
              },
              Object {
                "ContainerPort": 8100,
                "Protocol": "tcp",
              },
            ],
            "Secrets": Array [
              Object {
                "Name": "ANON_KEY",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "SupabaseJwtAnonKey90E80F90",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "SERVICE_KEY",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "SupabaseJwtServiceRoleKey94675B64",
                      },
                    ],
                  ],
                },
              },
            ],
            "Ulimits": Array [
              Object {
                "HardLimit": 65536,
                "Name": "nofile",
                "SoftLimit": 65536,
              },
            ],
          },
          Object {
            "Cpu": 205,
            "Environment": Array [
              Object {
                "Name": "APPMESH_VIRTUAL_NODE_NAME",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "mesh/",
                      Object {
                        "Fn::GetAtt": Array [
                          "Mesh73A573F6",
                          "MeshName",
                        ],
                      },
                      "/virtualNode/",
                      Object {
                        "Fn::GetAtt": Array [
                          "KongVirtualNodeFABCC391",
                          "VirtualNodeName",
                        ],
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "ENVOY_ADMIN_ACCESS_LOG_FILE",
                "Value": "/dev/null",
              },
              Object {
                "Name": "ENABLE_ENVOY_XRAY_TRACING",
                "Value": "1",
              },
              Object {
                "Name": "XRAY_SAMPLING_RATE",
                "Value": "1.00",
              },
            ],
            "Essential": true,
            "HealthCheck": Object {
              "Command": Array [
                "CMD-SHELL",
                "curl -s http://localhost:9901/server_info | grep state | grep -q LIVE",
              ],
              "Interval": 5,
              "Retries": 3,
              "StartPeriod": 10,
              "Timeout": 2,
            },
            "Image": "public.ecr.aws/appmesh/aws-appmesh-envoy:v1.22.2.1-prod",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "KongLogs4BD50491",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "MemoryReservation": 205,
            "Name": "envoy",
            "ReadonlyRootFilesystem": false,
            "Ulimits": Array [
              Object {
                "HardLimit": 1024000,
                "Name": "nofile",
                "SoftLimit": 1024000,
              },
            ],
            "User": "1337",
          },
          Object {
            "Cpu": 102,
            "Essential": true,
            "HealthCheck": Object {
              "Command": Array [
                "CMD",
                "/xray",
                "--version",
                "||",
                "exit 1",
              ],
              "Interval": 5,
              "Retries": 3,
              "StartPeriod": 10,
              "Timeout": 2,
            },
            "Image": "public.ecr.aws/xray/aws-xray-daemon:latest",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "KongLogs4BD50491",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "MemoryReservation": 205,
            "Name": "xray-daemon",
            "ReadonlyRootFilesystem": true,
            "User": "1337",
          },
        ],
        "Cpu": "1024",
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "KongTaskDefinitionExecutionRole2593435E",
            "Arn",
          ],
        },
        "Family": "SupabasemeshKongTaskDefinition6480530D",
        "Memory": "2048",
        "NetworkMode": "awsvpc",
        "ProxyConfiguration": Object {
          "ContainerName": "envoy",
          "ProxyConfigurationProperties": Array [
            Object {
              "Name": "IgnoredUID",
              "Value": "1337",
            },
            Object {
              "Name": "IgnoredGID",
              "Value": "1338",
            },
            Object {
              "Name": "AppPorts",
              "Value": "8000",
            },
            Object {
              "Name": "ProxyIngressPort",
              "Value": "15000",
            },
            Object {
              "Name": "ProxyEgressPort",
              "Value": "15001",
            },
            Object {
              "Name": "EgressIgnoredIPs",
              "Value": "169.254.170.2,169.254.169.254",
            },
          ],
          "Type": "APPMESH",
        },
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "RuntimePlatform": Object {
          "CpuArchitecture": "ARM64",
          "OperatingSystemFamily": "LINUX",
        },
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "KongTaskDefinitionTaskRole59341FD6",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "KongTaskDefinitionExecutionRole2593435E": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "KongTaskDefinitionExecutionRoleDefaultPolicyF6446340": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "KongLogs4BD50491",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "SupabaseJwtAnonKey90E80F90",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "SupabaseJwtServiceRoleKey94675B64",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "KongTaskDefinitionExecutionRoleDefaultPolicyF6446340",
        "Roles": Array [
          Object {
            "Ref": "KongTaskDefinitionExecutionRole2593435E",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "KongTaskDefinitionTaskRole59341FD6": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          "arn:aws:iam::aws:policy/AWSAppMeshEnvoyAccess",
          "arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess",
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "KongVirtualNodeFABCC391": Object {
      "Properties": Object {
        "MeshName": Object {
          "Fn::GetAtt": Array [
            "Mesh73A573F6",
            "MeshName",
          ],
        },
        "Spec": Object {
          "Backends": Array [
            Object {
              "VirtualService": Object {
                "VirtualServiceName": "auth.supabase.local",
              },
            },
            Object {
              "VirtualService": Object {
                "VirtualServiceName": "rest.supabase.local",
              },
            },
            Object {
              "VirtualService": Object {
                "VirtualServiceName": "realtime.supabase.local",
              },
            },
            Object {
              "VirtualService": Object {
                "VirtualServiceName": "storage.supabase.local",
              },
            },
            Object {
              "VirtualService": Object {
                "VirtualServiceName": "meta.supabase.local",
              },
            },
          ],
          "Listeners": Array [
            Object {
              "ConnectionPool": Object {
                "HTTP": Object {
                  "MaxConnections": 1024,
                  "MaxPendingRequests": 1024,
                },
              },
              "PortMapping": Object {
                "Port": 8000,
                "Protocol": "http",
              },
            },
          ],
          "Logging": Object {
            "AccessLog": Object {
              "File": Object {
                "Path": "/dev/stdout",
              },
            },
          },
          "ServiceDiscovery": Object {
            "AWSCloudMap": Object {
              "NamespaceName": "supabase.local",
              "ServiceName": Object {
                "Fn::GetAtt": Array [
                  "KongSvcCloudmapServiceF8523DCA",
                  "Name",
                ],
              },
            },
          },
        },
        "VirtualNodeName": "Kong",
      },
      "Type": "AWS::AppMesh::VirtualNode",
    },
    "KongVirtualService469BBDA1": Object {
      "Properties": Object {
        "MeshName": Object {
          "Fn::GetAtt": Array [
            "Mesh73A573F6",
            "MeshName",
          ],
        },
        "Spec": Object {
          "Provider": Object {
            "VirtualNode": Object {
              "VirtualNodeName": Object {
                "Fn::GetAtt": Array [
                  "KongVirtualNodeFABCC391",
                  "VirtualNodeName",
                ],
              },
            },
          },
        },
        "VirtualServiceName": "kong.supabase.local",
      },
      "Type": "AWS::AppMesh::VirtualService",
    },
    "Mesh73A573F6": Object {
      "Properties": Object {
        "MeshName": "Supabase-mesh",
        "Spec": Object {
          "EgressFilter": Object {
            "Type": "ALLOW_ALL",
          },
        },
      },
      "Type": "AWS::AppMesh::Mesh",
    },
    "MetaForceDeployFunction26B610DA": Object {
      "DependsOn": Array [
        "MetaForceDeployFunctionServiceRoleDefaultPolicy4B531C05",
        "MetaForceDeployFunctionServiceRole22BD4245",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "8d678058f0eb8312a176152d7bdc2392d3a97980a0b4c6a5af633d405b11038b.zip",
        },
        "Description": "Supabase - Force deploy ECS service function",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "ECS_CLUSTER_NAME": Object {
              "Ref": "ClusterEB0386A7",
            },
            "ECS_SERVICE_NAME": Object {
              "Fn::GetAtt": Array [
                "MetaSvcService58BFAF30",
                "Name",
              ],
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "MetaForceDeployFunctionServiceRole22BD4245",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "MetaForceDeployFunctionServiceRole22BD4245": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "MetaForceDeployFunctionServiceRoleDefaultPolicy4B531C05": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "ecs:UpdateService",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "MetaSvcService58BFAF30",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "MetaForceDeployFunctionServiceRoleDefaultPolicy4B531C05",
        "Roles": Array [
          Object {
            "Ref": "MetaForceDeployFunctionServiceRole22BD4245",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "MetaLogs80FD71C7": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "RetentionInDays": 30,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "MetaSvcCloudmapService5BBAEB97": Object {
      "Properties": Object {
        "DnsConfig": Object {
          "DnsRecords": Array [
            Object {
              "TTL": 10,
              "Type": "SRV",
            },
            Object {
              "TTL": 10,
              "Type": "A",
            },
          ],
          "NamespaceId": Object {
            "Fn::GetAtt": Array [
              "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
              "Id",
            ],
          },
          "RoutingPolicy": "MULTIVALUE",
        },
        "HealthCheckCustomConfig": Object {
          "FailureThreshold": 1,
        },
        "Name": "meta",
        "NamespaceId": Object {
          "Fn::GetAtt": Array [
            "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
            "Id",
          ],
        },
      },
      "Type": "AWS::ServiceDiscovery::Service",
    },
    "MetaSvcSecurityGroup28D90BB4": Object {
      "Properties": Object {
        "GroupDescription": "Supabase-mesh/Meta/Svc/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "MetaSvcSecurityGroupfromSupabasemeshKongSvcSecurityGroupDD4F76E980808785A734": Object {
      "Properties": Object {
        "Description": "from SupabasemeshKongSvcSecurityGroupDD4F76E9:8080",
        "FromPort": 8080,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "MetaSvcSecurityGroup28D90BB4",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "KongSvcSecurityGroupD458B522",
            "GroupId",
          ],
        },
        "ToPort": 8080,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "MetaSvcService58BFAF30": Object {
      "DependsOn": Array [
        "DatabaseInstance1844F58FD",
      ],
      "Properties": Object {
        "Cluster": Object {
          "Ref": "ClusterEB0386A7",
        },
        "DeploymentConfiguration": Object {
          "DeploymentCircuitBreaker": Object {
            "Enable": true,
            "Rollback": true,
          },
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "DeploymentController": Object {
          "Type": "ECS",
        },
        "EnableECSManagedTags": true,
        "LaunchType": "FARGATE",
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "MetaSvcSecurityGroup28D90BB4",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Array [
              Object {
                "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
              },
              Object {
                "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
              },
            ],
          },
        },
        "PropagateTags": "SERVICE",
        "ServiceRegistries": Array [
          Object {
            "ContainerName": "app",
            "ContainerPort": 8080,
            "RegistryArn": Object {
              "Fn::GetAtt": Array [
                "MetaSvcCloudmapService5BBAEB97",
                "Arn",
              ],
            },
          },
        ],
        "TaskDefinition": Object {
          "Ref": "MetaTaskDefinition286A1512",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "MetaSvcTaskCountTarget644CBD43": Object {
      "Properties": Object {
        "MaxCapacity": 20,
        "MinCapacity": 1,
        "ResourceId": Object {
          "Fn::Join": Array [
            "",
            Array [
              "service/",
              Object {
                "Ref": "ClusterEB0386A7",
              },
              "/",
              Object {
                "Fn::GetAtt": Array [
                  "MetaSvcService58BFAF30",
                  "Name",
                ],
              },
            ],
          ],
        },
        "RoleARN": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":iam::",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService",
            ],
          ],
        },
        "ScalableDimension": "ecs:service:DesiredCount",
        "ServiceNamespace": "ecs",
      },
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
    },
    "MetaSvcTaskCountTargetScaleOnCpuF6112AC5": Object {
      "Properties": Object {
        "PolicyName": "SupabasemeshMetaSvcTaskCountTargetScaleOnCpu4B313A73",
        "PolicyType": "TargetTrackingScaling",
        "ScalingTargetId": Object {
          "Ref": "MetaSvcTaskCountTarget644CBD43",
        },
        "TargetTrackingScalingPolicyConfiguration": Object {
          "PredefinedMetricSpecification": Object {
            "PredefinedMetricType": "ECSServiceAverageCPUUtilization",
          },
          "ScaleInCooldown": 60,
          "ScaleOutCooldown": 60,
          "TargetValue": 50,
        },
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
    },
    "MetaTaskDefinition286A1512": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "Cpu": 717,
            "DependsOn": Array [
              Object {
                "Condition": "HEALTHY",
                "ContainerName": "envoy",
              },
            ],
            "Environment": Array [
              Object {
                "Name": "PG_META_PORT",
                "Value": "8080",
              },
            ],
            "Essential": true,
            "Image": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "public.ecr.aws/t3w2s2c9/postgres-meta:",
                  Object {
                    "Ref": "PostgresMetaApiVersionParameter",
                  },
                ],
              ],
            },
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "MetaLogs80FD71C7",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "MemoryReservation": 1638,
            "Name": "app",
            "PortMappings": Array [
              Object {
                "ContainerPort": 8080,
                "Protocol": "tcp",
              },
            ],
            "Secrets": Array [
              Object {
                "Name": "PG_META_DB_HOST",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DatabaseSecretAttachmentE5D1B020",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "PG_META_DB_PORT",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DatabaseSecretAttachmentE5D1B020",
                      },
                      ":port::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "PG_META_DB_NAME",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DatabaseSecretAttachmentE5D1B020",
                      },
                      ":dbname::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "PG_META_DB_USER",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DatabaseSecretAttachmentE5D1B020",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "PG_META_DB_PASSWORD",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DatabaseSecretAttachmentE5D1B020",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
            "Ulimits": Array [
              Object {
                "HardLimit": 65536,
                "Name": "nofile",
                "SoftLimit": 65536,
              },
            ],
          },
          Object {
            "Cpu": 205,
            "Environment": Array [
              Object {
                "Name": "APPMESH_VIRTUAL_NODE_NAME",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "mesh/",
                      Object {
                        "Fn::GetAtt": Array [
                          "Mesh73A573F6",
                          "MeshName",
                        ],
                      },
                      "/virtualNode/",
                      Object {
                        "Fn::GetAtt": Array [
                          "MetaVirtualNode03248F16",
                          "VirtualNodeName",
                        ],
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "ENVOY_ADMIN_ACCESS_LOG_FILE",
                "Value": "/dev/null",
              },
              Object {
                "Name": "ENABLE_ENVOY_XRAY_TRACING",
                "Value": "1",
              },
              Object {
                "Name": "XRAY_SAMPLING_RATE",
                "Value": "1.00",
              },
            ],
            "Essential": true,
            "HealthCheck": Object {
              "Command": Array [
                "CMD-SHELL",
                "curl -s http://localhost:9901/server_info | grep state | grep -q LIVE",
              ],
              "Interval": 5,
              "Retries": 3,
              "StartPeriod": 10,
              "Timeout": 2,
            },
            "Image": "public.ecr.aws/appmesh/aws-appmesh-envoy:v1.22.2.1-prod",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "MetaLogs80FD71C7",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "MemoryReservation": 205,
            "Name": "envoy",
            "ReadonlyRootFilesystem": false,
            "Ulimits": Array [
              Object {
                "HardLimit": 1024000,
                "Name": "nofile",
                "SoftLimit": 1024000,
              },
            ],
            "User": "1337",
          },
          Object {
            "Cpu": 102,
            "Essential": true,
            "HealthCheck": Object {
              "Command": Array [
                "CMD",
                "/xray",
                "--version",
                "||",
                "exit 1",
              ],
              "Interval": 5,
              "Retries": 3,
              "StartPeriod": 10,
              "Timeout": 2,
            },
            "Image": "public.ecr.aws/xray/aws-xray-daemon:latest",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "MetaLogs80FD71C7",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "MemoryReservation": 205,
            "Name": "xray-daemon",
            "ReadonlyRootFilesystem": true,
            "User": "1337",
          },
        ],
        "Cpu": "1024",
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "MetaTaskDefinitionExecutionRole93D83399",
            "Arn",
          ],
        },
        "Family": "SupabasemeshMetaTaskDefinition6D4A10B8",
        "Memory": "2048",
        "NetworkMode": "awsvpc",
        "ProxyConfiguration": Object {
          "ContainerName": "envoy",
          "ProxyConfigurationProperties": Array [
            Object {
              "Name": "IgnoredUID",
              "Value": "1337",
            },
            Object {
              "Name": "IgnoredGID",
              "Value": "1338",
            },
            Object {
              "Name": "AppPorts",
              "Value": "8080",
            },
            Object {
              "Name": "ProxyIngressPort",
              "Value": "15000",
            },
            Object {
              "Name": "ProxyEgressPort",
              "Value": "15001",
            },
            Object {
              "Name": "EgressIgnoredIPs",
              "Value": "169.254.170.2,169.254.169.254",
            },
          ],
          "Type": "APPMESH",
        },
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "RuntimePlatform": Object {
          "CpuArchitecture": "ARM64",
          "OperatingSystemFamily": "LINUX",
        },
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "MetaTaskDefinitionTaskRole18CD498C",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "MetaTaskDefinitionExecutionRole93D83399": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "MetaTaskDefinitionExecutionRoleDefaultPolicy5A6F1F9C": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "MetaLogs80FD71C7",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "DatabaseSecretAttachmentE5D1B020",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "MetaTaskDefinitionExecutionRoleDefaultPolicy5A6F1F9C",
        "Roles": Array [
          Object {
            "Ref": "MetaTaskDefinitionExecutionRole93D83399",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "MetaTaskDefinitionTaskRole18CD498C": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          "arn:aws:iam::aws:policy/AWSAppMeshEnvoyAccess",
          "arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess",
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "MetaVirtualNode03248F16": Object {
      "Properties": Object {
        "MeshName": Object {
          "Fn::GetAtt": Array [
            "Mesh73A573F6",
            "MeshName",
          ],
        },
        "Spec": Object {
          "Backends": Array [
            Object {
              "VirtualService": Object {
                "VirtualServiceName": Object {
                  "Fn::GetAtt": Array [
                    "DatabaseB269D8BB",
                    "Endpoint.Address",
                  ],
                },
              },
            },
          ],
          "Listeners": Array [
            Object {
              "ConnectionPool": Object {
                "HTTP": Object {
                  "MaxConnections": 1024,
                  "MaxPendingRequests": 1024,
                },
              },
              "PortMapping": Object {
                "Port": 8080,
                "Protocol": "http",
              },
            },
          ],
          "Logging": Object {
            "AccessLog": Object {
              "File": Object {
                "Path": "/dev/stdout",
              },
            },
          },
          "ServiceDiscovery": Object {
            "AWSCloudMap": Object {
              "NamespaceName": "supabase.local",
              "ServiceName": Object {
                "Fn::GetAtt": Array [
                  "MetaSvcCloudmapService5BBAEB97",
                  "Name",
                ],
              },
            },
          },
        },
        "VirtualNodeName": "Meta",
      },
      "Type": "AWS::AppMesh::VirtualNode",
    },
    "MetaVirtualServiceD8836994": Object {
      "Properties": Object {
        "MeshName": Object {
          "Fn::GetAtt": Array [
            "Mesh73A573F6",
            "MeshName",
          ],
        },
        "Spec": Object {
          "Provider": Object {
            "VirtualNode": Object {
              "VirtualNodeName": Object {
                "Fn::GetAtt": Array [
                  "MetaVirtualNode03248F16",
                  "VirtualNodeName",
                ],
              },
            },
          },
        },
        "VirtualServiceName": "meta.supabase.local",
      },
      "Type": "AWS::AppMesh::VirtualService",
    },
    "ParameterGroup5E32DECB": Object {
      "Properties": Object {
        "Description": "Supabase parameter group for aurora-postgresql",
        "Family": "aurora-postgresql14",
        "Parameters": Object {
          "autovacuum_max_workers": "GREATEST({DBInstanceClassMemory/64371566592},2)",
          "max_logical_replication_workers": "4",
          "max_parallel_workers": "2",
          "max_replication_slots": "20",
          "max_slot_wal_keep_size": "1024",
          "max_wal_senders": "20",
          "rds.logical_replication": "1",
          "shared_preload_libraries": "pg_stat_statements, pgaudit, pg_cron",
        },
      },
      "Type": "AWS::RDS::DBClusterParameterGroup",
    },
    "RealtimeForceDeployFunctionFE2E409A": Object {
      "DependsOn": Array [
        "RealtimeForceDeployFunctionServiceRoleDefaultPolicyCD107644",
        "RealtimeForceDeployFunctionServiceRole6E959CD8",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "8d678058f0eb8312a176152d7bdc2392d3a97980a0b4c6a5af633d405b11038b.zip",
        },
        "Description": "Supabase - Force deploy ECS service function",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "ECS_CLUSTER_NAME": Object {
              "Ref": "ClusterEB0386A7",
            },
            "ECS_SERVICE_NAME": Object {
              "Fn::GetAtt": Array [
                "RealtimeSvcService05F54057",
                "Name",
              ],
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "RealtimeForceDeployFunctionServiceRole6E959CD8",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "RealtimeForceDeployFunctionServiceRole6E959CD8": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "RealtimeForceDeployFunctionServiceRoleDefaultPolicyCD107644": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "ecs:UpdateService",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "RealtimeSvcService05F54057",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "RealtimeForceDeployFunctionServiceRoleDefaultPolicyCD107644",
        "Roles": Array [
          Object {
            "Ref": "RealtimeForceDeployFunctionServiceRole6E959CD8",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "RealtimeLogs5C43159D": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "RetentionInDays": 30,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "RealtimeSvcCloudmapServiceF8CD5DF6": Object {
      "Properties": Object {
        "DnsConfig": Object {
          "DnsRecords": Array [
            Object {
              "TTL": 10,
              "Type": "SRV",
            },
            Object {
              "TTL": 10,
              "Type": "A",
            },
          ],
          "NamespaceId": Object {
            "Fn::GetAtt": Array [
              "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
              "Id",
            ],
          },
          "RoutingPolicy": "MULTIVALUE",
        },
        "HealthCheckCustomConfig": Object {
          "FailureThreshold": 1,
        },
        "Name": "realtime",
        "NamespaceId": Object {
          "Fn::GetAtt": Array [
            "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
            "Id",
          ],
        },
      },
      "Type": "AWS::ServiceDiscovery::Service",
    },
    "RealtimeSvcSecurityGroup15A1991B": Object {
      "Properties": Object {
        "GroupDescription": "Supabase-mesh/Realtime/Svc/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "RealtimeSvcSecurityGroupfromSupabasemeshKongSvcSecurityGroupDD4F76E9400059BB2F06": Object {
      "Properties": Object {
        "Description": "from SupabasemeshKongSvcSecurityGroupDD4F76E9:4000",
        "FromPort": 4000,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "RealtimeSvcSecurityGroup15A1991B",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "KongSvcSecurityGroupD458B522",
            "GroupId",
          ],
        },
        "ToPort": 4000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "RealtimeSvcService05F54057": Object {
      "DependsOn": Array [
        "DatabaseInstance1844F58FD",
      ],
      "Properties": Object {
        "Cluster": Object {
          "Ref": "ClusterEB0386A7",
        },
        "DeploymentConfiguration": Object {
          "DeploymentCircuitBreaker": Object {
            "Enable": true,
            "Rollback": true,
          },
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "DeploymentController": Object {
          "Type": "ECS",
        },
        "EnableECSManagedTags": true,
        "LaunchType": "FARGATE",
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "RealtimeSvcSecurityGroup15A1991B",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Array [
              Object {
                "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
              },
              Object {
                "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
              },
            ],
          },
        },
        "PropagateTags": "SERVICE",
        "ServiceRegistries": Array [
          Object {
            "ContainerName": "app",
            "ContainerPort": 4000,
            "RegistryArn": Object {
              "Fn::GetAtt": Array [
                "RealtimeSvcCloudmapServiceF8CD5DF6",
                "Arn",
              ],
            },
          },
        ],
        "TaskDefinition": Object {
          "Ref": "RealtimeTaskDefinition52361C2C",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "RealtimeTaskDefinition52361C2C": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "Command": Array [
              "bash",
              "-c",
              "./prod/rel/realtime/bin/realtime eval Realtime.Release.migrate && ./prod/rel/realtime/bin/realtime start",
            ],
            "Cpu": 717,
            "DependsOn": Array [
              Object {
                "Condition": "HEALTHY",
                "ContainerName": "envoy",
              },
            ],
            "Environment": Array [
              Object {
                "Name": "DB_SSL",
                "Value": "false",
              },
              Object {
                "Name": "PORT",
                "Value": "4000",
              },
              Object {
                "Name": "REPLICATION_MODE",
                "Value": "RLS",
              },
              Object {
                "Name": "REPLICATION_POLL_INTERVAL",
                "Value": "300",
              },
              Object {
                "Name": "SUBSCRIPTION_SYNC_INTERVAL",
                "Value": "60000",
              },
              Object {
                "Name": "SECURE_CHANNELS",
                "Value": "true",
              },
              Object {
                "Name": "SLOT_NAME",
                "Value": "realtime_rls",
              },
              Object {
                "Name": "TEMPORARY_SLOT",
                "Value": "true",
              },
              Object {
                "Name": "MAX_REPLICATION_LAG_MB",
                "Value": "1000",
              },
            ],
            "Essential": true,
            "Image": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "public.ecr.aws/t3w2s2c9/realtime:",
                  Object {
                    "Ref": "RealtimeApiVersionParameter",
                  },
                ],
              ],
            },
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "RealtimeLogs5C43159D",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "MemoryReservation": 1638,
            "Name": "app",
            "PortMappings": Array [
              Object {
                "ContainerPort": 4000,
                "Protocol": "tcp",
              },
            ],
            "Secrets": Array [
              Object {
                "Name": "JWT_SECRET",
                "ValueFrom": Object {
                  "Ref": "SupabaseJwtSecretFA404A75",
                },
              },
              Object {
                "Name": "DB_HOST",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DatabaseSecretAttachmentE5D1B020",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "DB_PORT",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DatabaseSecretAttachmentE5D1B020",
                      },
                      ":port::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "DB_NAME",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DatabaseSecretAttachmentE5D1B020",
                      },
                      ":dbname::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "DB_USER",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DatabaseSecretAttachmentE5D1B020",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "DB_PASSWORD",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DatabaseSecretAttachmentE5D1B020",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
            "Ulimits": Array [
              Object {
                "HardLimit": 65536,
                "Name": "nofile",
                "SoftLimit": 65536,
              },
            ],
          },
          Object {
            "Cpu": 205,
            "Environment": Array [
              Object {
                "Name": "APPMESH_VIRTUAL_NODE_NAME",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "mesh/",
                      Object {
                        "Fn::GetAtt": Array [
                          "Mesh73A573F6",
                          "MeshName",
                        ],
                      },
                      "/virtualNode/",
                      Object {
                        "Fn::GetAtt": Array [
                          "RealtimeVirtualNode58346FCC",
                          "VirtualNodeName",
                        ],
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "ENVOY_ADMIN_ACCESS_LOG_FILE",
                "Value": "/dev/null",
              },
              Object {
                "Name": "ENABLE_ENVOY_XRAY_TRACING",
                "Value": "1",
              },
              Object {
                "Name": "XRAY_SAMPLING_RATE",
                "Value": "1.00",
              },
            ],
            "Essential": true,
            "HealthCheck": Object {
              "Command": Array [
                "CMD-SHELL",
                "curl -s http://localhost:9901/server_info | grep state | grep -q LIVE",
              ],
              "Interval": 5,
              "Retries": 3,
              "StartPeriod": 10,
              "Timeout": 2,
            },
            "Image": "public.ecr.aws/appmesh/aws-appmesh-envoy:v1.22.2.1-prod",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "RealtimeLogs5C43159D",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "MemoryReservation": 205,
            "Name": "envoy",
            "ReadonlyRootFilesystem": false,
            "Ulimits": Array [
              Object {
                "HardLimit": 1024000,
                "Name": "nofile",
                "SoftLimit": 1024000,
              },
            ],
            "User": "1337",
          },
          Object {
            "Cpu": 102,
            "Essential": true,
            "HealthCheck": Object {
              "Command": Array [
                "CMD",
                "/xray",
                "--version",
                "||",
                "exit 1",
              ],
              "Interval": 5,
              "Retries": 3,
              "StartPeriod": 10,
              "Timeout": 2,
            },
            "Image": "public.ecr.aws/xray/aws-xray-daemon:latest",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "RealtimeLogs5C43159D",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "MemoryReservation": 205,
            "Name": "xray-daemon",
            "ReadonlyRootFilesystem": true,
            "User": "1337",
          },
        ],
        "Cpu": "1024",
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "RealtimeTaskDefinitionExecutionRoleCD260B29",
            "Arn",
          ],
        },
        "Family": "SupabasemeshRealtimeTaskDefinition1DF263D0",
        "Memory": "2048",
        "NetworkMode": "awsvpc",
        "ProxyConfiguration": Object {
          "ContainerName": "envoy",
          "ProxyConfigurationProperties": Array [
            Object {
              "Name": "IgnoredUID",
              "Value": "1337",
            },
            Object {
              "Name": "IgnoredGID",
              "Value": "1338",
            },
            Object {
              "Name": "AppPorts",
              "Value": "4000",
            },
            Object {
              "Name": "ProxyIngressPort",
              "Value": "15000",
            },
            Object {
              "Name": "ProxyEgressPort",
              "Value": "15001",
            },
            Object {
              "Name": "EgressIgnoredIPs",
              "Value": "169.254.170.2,169.254.169.254",
            },
          ],
          "Type": "APPMESH",
        },
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "RuntimePlatform": Object {
          "CpuArchitecture": "ARM64",
          "OperatingSystemFamily": "LINUX",
        },
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "RealtimeTaskDefinitionTaskRole8324A2B1",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "RealtimeTaskDefinitionExecutionRoleCD260B29": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "RealtimeTaskDefinitionExecutionRoleDefaultPolicyBD7C355B": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "RealtimeLogs5C43159D",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "SupabaseJwtSecretFA404A75",
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "DatabaseSecretAttachmentE5D1B020",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "RealtimeTaskDefinitionExecutionRoleDefaultPolicyBD7C355B",
        "Roles": Array [
          Object {
            "Ref": "RealtimeTaskDefinitionExecutionRoleCD260B29",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "RealtimeTaskDefinitionTaskRole8324A2B1": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          "arn:aws:iam::aws:policy/AWSAppMeshEnvoyAccess",
          "arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess",
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "RealtimeVirtualNode58346FCC": Object {
      "Properties": Object {
        "MeshName": Object {
          "Fn::GetAtt": Array [
            "Mesh73A573F6",
            "MeshName",
          ],
        },
        "Spec": Object {
          "Backends": Array [
            Object {
              "VirtualService": Object {
                "VirtualServiceName": Object {
                  "Fn::GetAtt": Array [
                    "DatabaseB269D8BB",
                    "Endpoint.Address",
                  ],
                },
              },
            },
          ],
          "Listeners": Array [
            Object {
              "ConnectionPool": Object {
                "HTTP": Object {
                  "MaxConnections": 1024,
                  "MaxPendingRequests": 1024,
                },
              },
              "PortMapping": Object {
                "Port": 4000,
                "Protocol": "http",
              },
            },
          ],
          "Logging": Object {
            "AccessLog": Object {
              "File": Object {
                "Path": "/dev/stdout",
              },
            },
          },
          "ServiceDiscovery": Object {
            "AWSCloudMap": Object {
              "NamespaceName": "supabase.local",
              "ServiceName": Object {
                "Fn::GetAtt": Array [
                  "RealtimeSvcCloudmapServiceF8CD5DF6",
                  "Name",
                ],
              },
            },
          },
        },
        "VirtualNodeName": "Realtime",
      },
      "Type": "AWS::AppMesh::VirtualNode",
    },
    "RealtimeVirtualService596BFBD0": Object {
      "Properties": Object {
        "MeshName": Object {
          "Fn::GetAtt": Array [
            "Mesh73A573F6",
            "MeshName",
          ],
        },
        "Spec": Object {
          "Provider": Object {
            "VirtualNode": Object {
              "VirtualNodeName": Object {
                "Fn::GetAtt": Array [
                  "RealtimeVirtualNode58346FCC",
                  "VirtualNodeName",
                ],
              },
            },
          },
        },
        "VirtualServiceName": "realtime.supabase.local",
      },
      "Type": "AWS::AppMesh::VirtualService",
    },
    "RestForceDeployFunction6022B502": Object {
      "DependsOn": Array [
        "RestForceDeployFunctionServiceRoleDefaultPolicyD312FEA0",
        "RestForceDeployFunctionServiceRole3E67F069",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "8d678058f0eb8312a176152d7bdc2392d3a97980a0b4c6a5af633d405b11038b.zip",
        },
        "Description": "Supabase - Force deploy ECS service function",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "ECS_CLUSTER_NAME": Object {
              "Ref": "ClusterEB0386A7",
            },
            "ECS_SERVICE_NAME": Object {
              "Fn::GetAtt": Array [
                "RestSvcServiceCEB7F559",
                "Name",
              ],
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "RestForceDeployFunctionServiceRole3E67F069",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "RestForceDeployFunctionServiceRole3E67F069": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "RestForceDeployFunctionServiceRoleDefaultPolicyD312FEA0": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "ecs:UpdateService",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "RestSvcServiceCEB7F559",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "RestForceDeployFunctionServiceRoleDefaultPolicyD312FEA0",
        "Roles": Array [
          Object {
            "Ref": "RestForceDeployFunctionServiceRole3E67F069",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "RestLogsE8B49088": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "RetentionInDays": 30,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "RestSvcCloudmapServiceC2707820": Object {
      "Properties": Object {
        "DnsConfig": Object {
          "DnsRecords": Array [
            Object {
              "TTL": 10,
              "Type": "SRV",
            },
            Object {
              "TTL": 10,
              "Type": "A",
            },
          ],
          "NamespaceId": Object {
            "Fn::GetAtt": Array [
              "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
              "Id",
            ],
          },
          "RoutingPolicy": "MULTIVALUE",
        },
        "HealthCheckCustomConfig": Object {
          "FailureThreshold": 1,
        },
        "Name": "rest",
        "NamespaceId": Object {
          "Fn::GetAtt": Array [
            "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
            "Id",
          ],
        },
      },
      "Type": "AWS::ServiceDiscovery::Service",
    },
    "RestSvcSecurityGroup4F37982C": Object {
      "Properties": Object {
        "GroupDescription": "Supabase-mesh/Rest/Svc/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "RestSvcSecurityGroupfromSupabasemeshAuthSvcSecurityGroup3A89AA513000D247FE04": Object {
      "Properties": Object {
        "Description": "from SupabasemeshAuthSvcSecurityGroup3A89AA51:3000",
        "FromPort": 3000,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "RestSvcSecurityGroup4F37982C",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "AuthSvcSecurityGroup71415F29",
            "GroupId",
          ],
        },
        "ToPort": 3000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "RestSvcSecurityGroupfromSupabasemeshKongSvcSecurityGroupDD4F76E930002268B678": Object {
      "Properties": Object {
        "Description": "from SupabasemeshKongSvcSecurityGroupDD4F76E9:3000",
        "FromPort": 3000,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "RestSvcSecurityGroup4F37982C",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "KongSvcSecurityGroupD458B522",
            "GroupId",
          ],
        },
        "ToPort": 3000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "RestSvcSecurityGroupfromSupabasemeshStorageSvcSecurityGroup5DC874CA30009011CD61": Object {
      "Properties": Object {
        "Description": "from SupabasemeshStorageSvcSecurityGroup5DC874CA:3000",
        "FromPort": 3000,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "RestSvcSecurityGroup4F37982C",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "StorageSvcSecurityGroup134E6883",
            "GroupId",
          ],
        },
        "ToPort": 3000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "RestSvcServiceCEB7F559": Object {
      "DependsOn": Array [
        "DatabaseInstance1844F58FD",
      ],
      "Properties": Object {
        "Cluster": Object {
          "Ref": "ClusterEB0386A7",
        },
        "DeploymentConfiguration": Object {
          "DeploymentCircuitBreaker": Object {
            "Enable": true,
            "Rollback": true,
          },
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "DeploymentController": Object {
          "Type": "ECS",
        },
        "EnableECSManagedTags": true,
        "LaunchType": "FARGATE",
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "RestSvcSecurityGroup4F37982C",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Array [
              Object {
                "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
              },
              Object {
                "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
              },
            ],
          },
        },
        "PropagateTags": "SERVICE",
        "ServiceRegistries": Array [
          Object {
            "ContainerName": "app",
            "ContainerPort": 3000,
            "RegistryArn": Object {
              "Fn::GetAtt": Array [
                "RestSvcCloudmapServiceC2707820",
                "Arn",
              ],
            },
          },
        ],
        "TaskDefinition": Object {
          "Ref": "RestTaskDefinition4EBA60E9",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "RestSvcTaskCountTarget16F159C2": Object {
      "Properties": Object {
        "MaxCapacity": 20,
        "MinCapacity": 1,
        "ResourceId": Object {
          "Fn::Join": Array [
            "",
            Array [
              "service/",
              Object {
                "Ref": "ClusterEB0386A7",
              },
              "/",
              Object {
                "Fn::GetAtt": Array [
                  "RestSvcServiceCEB7F559",
                  "Name",
                ],
              },
            ],
          ],
        },
        "RoleARN": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":iam::",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService",
            ],
          ],
        },
        "ScalableDimension": "ecs:service:DesiredCount",
        "ServiceNamespace": "ecs",
      },
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
    },
    "RestSvcTaskCountTargetScaleOnCpuB698E9D3": Object {
      "Properties": Object {
        "PolicyName": "SupabasemeshRestSvcTaskCountTargetScaleOnCpuB7AE2F75",
        "PolicyType": "TargetTrackingScaling",
        "ScalingTargetId": Object {
          "Ref": "RestSvcTaskCountTarget16F159C2",
        },
        "TargetTrackingScalingPolicyConfiguration": Object {
          "PredefinedMetricSpecification": Object {
            "PredefinedMetricType": "ECSServiceAverageCPUUtilization",
          },
          "ScaleInCooldown": 60,
          "ScaleOutCooldown": 60,
          "TargetValue": 50,
        },
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
    },
    "RestTaskDefinition4EBA60E9": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "Cpu": 717,
            "DependsOn": Array [
              Object {
                "Condition": "HEALTHY",
                "ContainerName": "envoy",
              },
            ],
            "Environment": Array [
              Object {
                "Name": "PGRST_DB_SCHEMAS",
                "Value": "public,storage,graphql_public",
              },
              Object {
                "Name": "PGRST_DB_ANON_ROLE",
                "Value": "anon",
              },
              Object {
                "Name": "PGRST_DB_USE_LEGACY_GUCS",
                "Value": "false",
              },
            ],
            "Essential": true,
            "Image": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "postgrest/postgrest:",
                  Object {
                    "Ref": "RestApiVersionParameter",
                  },
                ],
              ],
            },
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "RestLogsE8B49088",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "MemoryReservation": 1638,
            "Name": "app",
            "PortMappings": Array [
              Object {
                "ContainerPort": 3000,
                "Protocol": "tcp",
              },
            ],
            "Secrets": Array [
              Object {
                "Name": "PGRST_DB_URI",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "DatabaseUrlParameter81075D88",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "PGRST_JWT_SECRET",
                "ValueFrom": Object {
                  "Ref": "SupabaseJwtSecretFA404A75",
                },
              },
            ],
            "Ulimits": Array [
              Object {
                "HardLimit": 65536,
                "Name": "nofile",
                "SoftLimit": 65536,
              },
            ],
          },
          Object {
            "Cpu": 205,
            "Environment": Array [
              Object {
                "Name": "APPMESH_VIRTUAL_NODE_NAME",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "mesh/",
                      Object {
                        "Fn::GetAtt": Array [
                          "Mesh73A573F6",
                          "MeshName",
                        ],
                      },
                      "/virtualNode/",
                      Object {
                        "Fn::GetAtt": Array [
                          "RestVirtualNode2FA1B1DF",
                          "VirtualNodeName",
                        ],
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "ENVOY_ADMIN_ACCESS_LOG_FILE",
                "Value": "/dev/null",
              },
              Object {
                "Name": "ENABLE_ENVOY_XRAY_TRACING",
                "Value": "1",
              },
              Object {
                "Name": "XRAY_SAMPLING_RATE",
                "Value": "1.00",
              },
            ],
            "Essential": true,
            "HealthCheck": Object {
              "Command": Array [
                "CMD-SHELL",
                "curl -s http://localhost:9901/server_info | grep state | grep -q LIVE",
              ],
              "Interval": 5,
              "Retries": 3,
              "StartPeriod": 10,
              "Timeout": 2,
            },
            "Image": "public.ecr.aws/appmesh/aws-appmesh-envoy:v1.22.2.1-prod",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "RestLogsE8B49088",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "MemoryReservation": 205,
            "Name": "envoy",
            "ReadonlyRootFilesystem": false,
            "Ulimits": Array [
              Object {
                "HardLimit": 1024000,
                "Name": "nofile",
                "SoftLimit": 1024000,
              },
            ],
            "User": "1337",
          },
          Object {
            "Cpu": 102,
            "Essential": true,
            "HealthCheck": Object {
              "Command": Array [
                "CMD",
                "/xray",
                "--version",
                "||",
                "exit 1",
              ],
              "Interval": 5,
              "Retries": 3,
              "StartPeriod": 10,
              "Timeout": 2,
            },
            "Image": "public.ecr.aws/xray/aws-xray-daemon:latest",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "RestLogsE8B49088",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "MemoryReservation": 205,
            "Name": "xray-daemon",
            "ReadonlyRootFilesystem": true,
            "User": "1337",
          },
        ],
        "Cpu": "1024",
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "RestTaskDefinitionExecutionRole3F0CBE29",
            "Arn",
          ],
        },
        "Family": "SupabasemeshRestTaskDefinition8F5AAC3C",
        "Memory": "2048",
        "NetworkMode": "awsvpc",
        "ProxyConfiguration": Object {
          "ContainerName": "envoy",
          "ProxyConfigurationProperties": Array [
            Object {
              "Name": "IgnoredUID",
              "Value": "1337",
            },
            Object {
              "Name": "IgnoredGID",
              "Value": "1338",
            },
            Object {
              "Name": "AppPorts",
              "Value": "3000",
            },
            Object {
              "Name": "ProxyIngressPort",
              "Value": "15000",
            },
            Object {
              "Name": "ProxyEgressPort",
              "Value": "15001",
            },
            Object {
              "Name": "EgressIgnoredIPs",
              "Value": "169.254.170.2,169.254.169.254",
            },
          ],
          "Type": "APPMESH",
        },
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "RuntimePlatform": Object {
          "CpuArchitecture": "ARM64",
          "OperatingSystemFamily": "LINUX",
        },
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "RestTaskDefinitionTaskRole94551FBF",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "RestTaskDefinitionExecutionRole3F0CBE29": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "RestTaskDefinitionExecutionRoleDefaultPolicyB130F5B5": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "RestLogsE8B49088",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "DatabaseUrlParameter81075D88",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "SupabaseJwtSecretFA404A75",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "RestTaskDefinitionExecutionRoleDefaultPolicyB130F5B5",
        "Roles": Array [
          Object {
            "Ref": "RestTaskDefinitionExecutionRole3F0CBE29",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "RestTaskDefinitionTaskRole94551FBF": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          "arn:aws:iam::aws:policy/AWSAppMeshEnvoyAccess",
          "arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess",
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "RestVirtualNode2FA1B1DF": Object {
      "Properties": Object {
        "MeshName": Object {
          "Fn::GetAtt": Array [
            "Mesh73A573F6",
            "MeshName",
          ],
        },
        "Spec": Object {
          "Backends": Array [
            Object {
              "VirtualService": Object {
                "VirtualServiceName": Object {
                  "Fn::GetAtt": Array [
                    "DatabaseB269D8BB",
                    "Endpoint.Address",
                  ],
                },
              },
            },
          ],
          "Listeners": Array [
            Object {
              "ConnectionPool": Object {
                "HTTP": Object {
                  "MaxConnections": 1024,
                  "MaxPendingRequests": 1024,
                },
              },
              "PortMapping": Object {
                "Port": 3000,
                "Protocol": "http",
              },
            },
          ],
          "Logging": Object {
            "AccessLog": Object {
              "File": Object {
                "Path": "/dev/stdout",
              },
            },
          },
          "ServiceDiscovery": Object {
            "AWSCloudMap": Object {
              "NamespaceName": "supabase.local",
              "ServiceName": Object {
                "Fn::GetAtt": Array [
                  "RestSvcCloudmapServiceC2707820",
                  "Name",
                ],
              },
            },
          },
        },
        "VirtualNodeName": "Rest",
      },
      "Type": "AWS::AppMesh::VirtualNode",
    },
    "RestVirtualService75A9862D": Object {
      "Properties": Object {
        "MeshName": Object {
          "Fn::GetAtt": Array [
            "Mesh73A573F6",
            "MeshName",
          ],
        },
        "Spec": Object {
          "Provider": Object {
            "VirtualNode": Object {
              "VirtualNodeName": Object {
                "Fn::GetAtt": Array [
                  "RestVirtualNode2FA1B1DF",
                  "VirtualNodeName",
                ],
              },
            },
          },
        },
        "VirtualServiceName": "rest.supabase.local",
      },
      "Type": "AWS::AppMesh::VirtualService",
    },
    "StorageForceDeployFunction7B52931B": Object {
      "DependsOn": Array [
        "StorageForceDeployFunctionServiceRoleDefaultPolicyBA75E2CB",
        "StorageForceDeployFunctionServiceRoleA311B812",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "8d678058f0eb8312a176152d7bdc2392d3a97980a0b4c6a5af633d405b11038b.zip",
        },
        "Description": "Supabase - Force deploy ECS service function",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "ECS_CLUSTER_NAME": Object {
              "Ref": "ClusterEB0386A7",
            },
            "ECS_SERVICE_NAME": Object {
              "Fn::GetAtt": Array [
                "StorageSvcServiceA4DA327A",
                "Name",
              ],
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "StorageForceDeployFunctionServiceRoleA311B812",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "StorageForceDeployFunctionServiceRoleA311B812": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "StorageForceDeployFunctionServiceRoleDefaultPolicyBA75E2CB": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "ecs:UpdateService",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "StorageSvcServiceA4DA327A",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "StorageForceDeployFunctionServiceRoleDefaultPolicyBA75E2CB",
        "Roles": Array [
          Object {
            "Ref": "StorageForceDeployFunctionServiceRoleA311B812",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "StorageLogs2A2D4D26": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "RetentionInDays": 30,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "StorageSvcCloudmapServiceEC9FA74C": Object {
      "Properties": Object {
        "DnsConfig": Object {
          "DnsRecords": Array [
            Object {
              "TTL": 10,
              "Type": "SRV",
            },
            Object {
              "TTL": 10,
              "Type": "A",
            },
          ],
          "NamespaceId": Object {
            "Fn::GetAtt": Array [
              "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
              "Id",
            ],
          },
          "RoutingPolicy": "MULTIVALUE",
        },
        "HealthCheckCustomConfig": Object {
          "FailureThreshold": 1,
        },
        "Name": "storage",
        "NamespaceId": Object {
          "Fn::GetAtt": Array [
            "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
            "Id",
          ],
        },
      },
      "Type": "AWS::ServiceDiscovery::Service",
    },
    "StorageSvcSecurityGroup134E6883": Object {
      "Properties": Object {
        "GroupDescription": "Supabase-mesh/Storage/Svc/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "StorageSvcSecurityGroupfromSupabasemeshKongSvcSecurityGroupDD4F76E95000ADBA7079": Object {
      "Properties": Object {
        "Description": "from SupabasemeshKongSvcSecurityGroupDD4F76E9:5000",
        "FromPort": 5000,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "StorageSvcSecurityGroup134E6883",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "KongSvcSecurityGroupD458B522",
            "GroupId",
          ],
        },
        "ToPort": 5000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "StorageSvcServiceA4DA327A": Object {
      "DependsOn": Array [
        "DatabaseInstance1844F58FD",
      ],
      "Properties": Object {
        "Cluster": Object {
          "Ref": "ClusterEB0386A7",
        },
        "DeploymentConfiguration": Object {
          "DeploymentCircuitBreaker": Object {
            "Enable": true,
            "Rollback": true,
          },
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "DeploymentController": Object {
          "Type": "ECS",
        },
        "EnableECSManagedTags": true,
        "LaunchType": "FARGATE",
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "StorageSvcSecurityGroup134E6883",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Array [
              Object {
                "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
              },
              Object {
                "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
              },
            ],
          },
        },
        "PropagateTags": "SERVICE",
        "ServiceRegistries": Array [
          Object {
            "ContainerName": "app",
            "ContainerPort": 5000,
            "RegistryArn": Object {
              "Fn::GetAtt": Array [
                "StorageSvcCloudmapServiceEC9FA74C",
                "Arn",
              ],
            },
          },
        ],
        "TaskDefinition": Object {
          "Ref": "StorageTaskDefinition6B21D26E",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "StorageSvcTaskCountTarget6971484D": Object {
      "Properties": Object {
        "MaxCapacity": 20,
        "MinCapacity": 1,
        "ResourceId": Object {
          "Fn::Join": Array [
            "",
            Array [
              "service/",
              Object {
                "Ref": "ClusterEB0386A7",
              },
              "/",
              Object {
                "Fn::GetAtt": Array [
                  "StorageSvcServiceA4DA327A",
                  "Name",
                ],
              },
            ],
          ],
        },
        "RoleARN": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":iam::",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService",
            ],
          ],
        },
        "ScalableDimension": "ecs:service:DesiredCount",
        "ServiceNamespace": "ecs",
      },
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
    },
    "StorageSvcTaskCountTargetScaleOnCpu9FD330E2": Object {
      "Properties": Object {
        "PolicyName": "SupabasemeshStorageSvcTaskCountTargetScaleOnCpu358E9DE6",
        "PolicyType": "TargetTrackingScaling",
        "ScalingTargetId": Object {
          "Ref": "StorageSvcTaskCountTarget6971484D",
        },
        "TargetTrackingScalingPolicyConfiguration": Object {
          "PredefinedMetricSpecification": Object {
            "PredefinedMetricType": "ECSServiceAverageCPUUtilization",
          },
          "ScaleInCooldown": 60,
          "ScaleOutCooldown": 60,
          "TargetValue": 50,
        },
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
    },
    "StorageTaskDefinition6B21D26E": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "Cpu": 717,
            "DependsOn": Array [
              Object {
                "Condition": "HEALTHY",
                "ContainerName": "envoy",
              },
            ],
            "Environment": Array [
              Object {
                "Name": "POSTGREST_URL",
                "Value": "http://rest.supabase.local:3000",
              },
              Object {
                "Name": "PGOPTIONS",
                "Value": "-c search_path=storage,public",
              },
              Object {
                "Name": "FILE_SIZE_LIMIT",
                "Value": "52428800",
              },
              Object {
                "Name": "STORAGE_BACKEND",
                "Value": "s3",
              },
              Object {
                "Name": "TENANT_ID",
                "Value": "default",
              },
              Object {
                "Name": "REGION",
                "Value": Object {
                  "Ref": "AWS::Region",
                },
              },
              Object {
                "Name": "GLOBAL_S3_BUCKET",
                "Value": Object {
                  "Ref": "Bucket83908E77",
                },
              },
            ],
            "Essential": true,
            "Image": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "public.ecr.aws/t3w2s2c9/storage-api:",
                  Object {
                    "Ref": "StorageApiVersionParameter",
                  },
                ],
              ],
            },
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "StorageLogs2A2D4D26",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "MemoryReservation": 1638,
            "Name": "app",
            "PortMappings": Array [
              Object {
                "ContainerPort": 5000,
                "Protocol": "tcp",
              },
            ],
            "Secrets": Array [
              Object {
                "Name": "ANON_KEY",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "SupabaseJwtAnonKey90E80F90",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "SERVICE_KEY",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "SupabaseJwtServiceRoleKey94675B64",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "PGRST_JWT_SECRET",
                "ValueFrom": Object {
                  "Ref": "SupabaseJwtSecretFA404A75",
                },
              },
              Object {
                "Name": "DATABASE_URL",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "DatabaseUrlParameter81075D88",
                      },
                    ],
                  ],
                },
              },
            ],
            "Ulimits": Array [
              Object {
                "HardLimit": 65536,
                "Name": "nofile",
                "SoftLimit": 65536,
              },
            ],
          },
          Object {
            "Cpu": 205,
            "Environment": Array [
              Object {
                "Name": "APPMESH_VIRTUAL_NODE_NAME",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "mesh/",
                      Object {
                        "Fn::GetAtt": Array [
                          "Mesh73A573F6",
                          "MeshName",
                        ],
                      },
                      "/virtualNode/",
                      Object {
                        "Fn::GetAtt": Array [
                          "StorageVirtualNodeB19919D7",
                          "VirtualNodeName",
                        ],
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "ENVOY_ADMIN_ACCESS_LOG_FILE",
                "Value": "/dev/null",
              },
              Object {
                "Name": "ENABLE_ENVOY_XRAY_TRACING",
                "Value": "1",
              },
              Object {
                "Name": "XRAY_SAMPLING_RATE",
                "Value": "1.00",
              },
            ],
            "Essential": true,
            "HealthCheck": Object {
              "Command": Array [
                "CMD-SHELL",
                "curl -s http://localhost:9901/server_info | grep state | grep -q LIVE",
              ],
              "Interval": 5,
              "Retries": 3,
              "StartPeriod": 10,
              "Timeout": 2,
            },
            "Image": "public.ecr.aws/appmesh/aws-appmesh-envoy:v1.22.2.1-prod",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "StorageLogs2A2D4D26",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "MemoryReservation": 205,
            "Name": "envoy",
            "ReadonlyRootFilesystem": false,
            "Ulimits": Array [
              Object {
                "HardLimit": 1024000,
                "Name": "nofile",
                "SoftLimit": 1024000,
              },
            ],
            "User": "1337",
          },
          Object {
            "Cpu": 102,
            "Essential": true,
            "HealthCheck": Object {
              "Command": Array [
                "CMD",
                "/xray",
                "--version",
                "||",
                "exit 1",
              ],
              "Interval": 5,
              "Retries": 3,
              "StartPeriod": 10,
              "Timeout": 2,
            },
            "Image": "public.ecr.aws/xray/aws-xray-daemon:latest",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "StorageLogs2A2D4D26",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "MemoryReservation": 205,
            "Name": "xray-daemon",
            "ReadonlyRootFilesystem": true,
            "User": "1337",
          },
        ],
        "Cpu": "1024",
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "StorageTaskDefinitionExecutionRoleAEB5CF80",
            "Arn",
          ],
        },
        "Family": "SupabasemeshStorageTaskDefinitionE07C673C",
        "Memory": "2048",
        "NetworkMode": "awsvpc",
        "ProxyConfiguration": Object {
          "ContainerName": "envoy",
          "ProxyConfigurationProperties": Array [
            Object {
              "Name": "IgnoredUID",
              "Value": "1337",
            },
            Object {
              "Name": "IgnoredGID",
              "Value": "1338",
            },
            Object {
              "Name": "AppPorts",
              "Value": "5000",
            },
            Object {
              "Name": "ProxyIngressPort",
              "Value": "15000",
            },
            Object {
              "Name": "ProxyEgressPort",
              "Value": "15001",
            },
            Object {
              "Name": "EgressIgnoredIPs",
              "Value": "169.254.170.2,169.254.169.254",
            },
          ],
          "Type": "APPMESH",
        },
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "RuntimePlatform": Object {
          "CpuArchitecture": "X86_64",
          "OperatingSystemFamily": "LINUX",
        },
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "StorageTaskDefinitionTaskRole24C4C137",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "StorageTaskDefinitionExecutionRoleAEB5CF80": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "StorageTaskDefinitionExecutionRoleDefaultPolicy537D0826": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "StorageLogs2A2D4D26",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "SupabaseJwtAnonKey90E80F90",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "SupabaseJwtServiceRoleKey94675B64",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "SupabaseJwtSecretFA404A75",
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "DatabaseUrlParameter81075D88",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "StorageTaskDefinitionExecutionRoleDefaultPolicy537D0826",
        "Roles": Array [
          Object {
            "Ref": "StorageTaskDefinitionExecutionRoleAEB5CF80",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "StorageTaskDefinitionTaskRole24C4C137": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          "arn:aws:iam::aws:policy/AWSAppMeshEnvoyAccess",
          "arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess",
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "StorageTaskDefinitionTaskRoleDefaultPolicy3448147D": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "Bucket83908E77",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "Bucket83908E77",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "StorageTaskDefinitionTaskRoleDefaultPolicy3448147D",
        "Roles": Array [
          Object {
            "Ref": "StorageTaskDefinitionTaskRole24C4C137",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "StorageVirtualNodeB19919D7": Object {
      "Properties": Object {
        "MeshName": Object {
          "Fn::GetAtt": Array [
            "Mesh73A573F6",
            "MeshName",
          ],
        },
        "Spec": Object {
          "Backends": Array [
            Object {
              "VirtualService": Object {
                "VirtualServiceName": "rest.supabase.local",
              },
            },
            Object {
              "VirtualService": Object {
                "VirtualServiceName": Object {
                  "Fn::GetAtt": Array [
                    "DatabaseB269D8BB",
                    "Endpoint.Address",
                  ],
                },
              },
            },
          ],
          "Listeners": Array [
            Object {
              "ConnectionPool": Object {
                "HTTP": Object {
                  "MaxConnections": 1024,
                  "MaxPendingRequests": 1024,
                },
              },
              "PortMapping": Object {
                "Port": 5000,
                "Protocol": "http",
              },
            },
          ],
          "Logging": Object {
            "AccessLog": Object {
              "File": Object {
                "Path": "/dev/stdout",
              },
            },
          },
          "ServiceDiscovery": Object {
            "AWSCloudMap": Object {
              "NamespaceName": "supabase.local",
              "ServiceName": Object {
                "Fn::GetAtt": Array [
                  "StorageSvcCloudmapServiceEC9FA74C",
                  "Name",
                ],
              },
            },
          },
        },
        "VirtualNodeName": "Storage",
      },
      "Type": "AWS::AppMesh::VirtualNode",
    },
    "StorageVirtualServiceD9A2FDB1": Object {
      "Properties": Object {
        "MeshName": Object {
          "Fn::GetAtt": Array [
            "Mesh73A573F6",
            "MeshName",
          ],
        },
        "Spec": Object {
          "Provider": Object {
            "VirtualNode": Object {
              "VirtualNodeName": Object {
                "Fn::GetAtt": Array [
                  "StorageVirtualNodeB19919D7",
                  "VirtualNodeName",
                ],
              },
            },
          },
        },
        "VirtualServiceName": "storage.supabase.local",
      },
      "Type": "AWS::AppMesh::VirtualService",
    },
    "StudioClient100BA227": Object {
      "Properties": Object {
        "AllowedOAuthFlows": Array [
          "code",
        ],
        "AllowedOAuthFlowsUserPoolClient": true,
        "AllowedOAuthScopes": Array [
          "openid",
        ],
        "CallbackURLs": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "https://",
                Object {
                  "Fn::GetAtt": Array [
                    "StudioLoadBalancer143227F7",
                    "DNSName",
                  ],
                },
                "/oauth2/idpresponse",
              ],
            ],
          },
        ],
        "ExplicitAuthFlows": Array [
          "ALLOW_USER_PASSWORD_AUTH",
          "ALLOW_USER_SRP_AUTH",
          "ALLOW_REFRESH_TOKEN_AUTH",
        ],
        "GenerateSecret": true,
        "LogoutURLs": Array [
          "https://example.com",
        ],
        "SupportedIdentityProviders": Array [
          "COGNITO",
        ],
        "UserPoolId": Object {
          "Ref": "StudioUserPool94F50620",
        },
      },
      "Type": "AWS::Cognito::UserPoolClient",
    },
    "StudioForceDeployFunction3EEAC04D": Object {
      "DependsOn": Array [
        "StudioForceDeployFunctionServiceRoleDefaultPolicyDDE0ACDC",
        "StudioForceDeployFunctionServiceRole41FBB942",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "8d678058f0eb8312a176152d7bdc2392d3a97980a0b4c6a5af633d405b11038b.zip",
        },
        "Description": "Supabase - Force deploy ECS service function",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "ECS_CLUSTER_NAME": Object {
              "Ref": "ClusterEB0386A7",
            },
            "ECS_SERVICE_NAME": Object {
              "Fn::GetAtt": Array [
                "StudioSvcService57CD4A48",
                "Name",
              ],
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "StudioForceDeployFunctionServiceRole41FBB942",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "StudioForceDeployFunctionServiceRole41FBB942": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "StudioForceDeployFunctionServiceRoleDefaultPolicyDDE0ACDC": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "ecs:UpdateService",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "StudioSvcService57CD4A48",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "StudioForceDeployFunctionServiceRoleDefaultPolicyDDE0ACDC",
        "Roles": Array [
          Object {
            "Ref": "StudioForceDeployFunctionServiceRole41FBB942",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "StudioLoadBalancer143227F7": Object {
      "DependsOn": Array [
        "VPCPublicSubnet1DefaultRoute91CEF279",
        "VPCPublicSubnet2DefaultRouteB7481BBA",
      ],
      "Properties": Object {
        "LoadBalancerAttributes": Array [
          Object {
            "Key": "deletion_protection.enabled",
            "Value": "false",
          },
        ],
        "Scheme": "internet-facing",
        "SecurityGroups": Array [
          Object {
            "Fn::GetAtt": Array [
              "StudioLoadBalancerSecurityGroup73100F94",
              "GroupId",
            ],
          },
        ],
        "Subnets": Array [
          Object {
            "Ref": "VPCPublicSubnet1SubnetB4246D30",
          },
          Object {
            "Ref": "VPCPublicSubnet2Subnet74179F39",
          },
        ],
        "Type": "application",
      },
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
    },
    "StudioLoadBalancerListener522B10FC": Object {
      "Properties": Object {
        "Certificates": Object {
          "Fn::If": Array [
            "StudioHttpCondition14AD1D44",
            Object {
              "Ref": "AWS::NoValue",
            },
            Array [
              Object {
                "CertificateArn": Object {
                  "Ref": "StudioCertificateArnParameterEBA639E6",
                },
              },
            ],
          ],
        },
        "DefaultActions": Array [
          Object {
            "Order": Object {
              "Fn::If": Array [
                "StudioHttpCondition14AD1D44",
                1,
                2,
              ],
            },
            "TargetGroupArn": Object {
              "Ref": "StudioTargetGroupC1E0E03D",
            },
            "Type": "forward",
          },
          Object {
            "Fn::If": Array [
              "StudioHttpCondition14AD1D44",
              Object {
                "Ref": "AWS::NoValue",
              },
              Object {
                "AuthenticateCognitoConfig": Object {
                  "UserPoolArn": Object {
                    "Fn::GetAtt": Array [
                      "StudioUserPool94F50620",
                      "Arn",
                    ],
                  },
                  "UserPoolClientId": Object {
                    "Ref": "StudioClient100BA227",
                  },
                  "UserPoolDomain": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "supabase-studio-",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                      ],
                    ],
                  },
                },
                "Order": 1,
                "Type": "authenticate-cognito",
              },
            ],
          },
        ],
        "LoadBalancerArn": Object {
          "Ref": "StudioLoadBalancer143227F7",
        },
        "Port": Object {
          "Fn::If": Array [
            "StudioHttpCondition14AD1D44",
            80,
            443,
          ],
        },
        "Protocol": Object {
          "Fn::If": Array [
            "StudioHttpCondition14AD1D44",
            "HTTP",
            "HTTPS",
          ],
        },
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "StudioLoadBalancerSecurityGroup73100F94": Object {
      "Properties": Object {
        "GroupDescription": "Supabase-mesh/Studio/LoadBalancerSecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow from anyone on port 80",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80,
          },
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow from anyone on port 443",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "StudioLogs5268B2C5": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "RetentionInDays": 30,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "StudioSvcCloudmapServiceD5D25A54": Object {
      "Properties": Object {
        "DnsConfig": Object {
          "DnsRecords": Array [
            Object {
              "TTL": 10,
              "Type": "SRV",
            },
            Object {
              "TTL": 10,
              "Type": "A",
            },
          ],
          "NamespaceId": Object {
            "Fn::GetAtt": Array [
              "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
              "Id",
            ],
          },
          "RoutingPolicy": "MULTIVALUE",
        },
        "HealthCheckCustomConfig": Object {
          "FailureThreshold": 1,
        },
        "Name": "studio",
        "NamespaceId": Object {
          "Fn::GetAtt": Array [
            "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
            "Id",
          ],
        },
      },
      "Type": "AWS::ServiceDiscovery::Service",
    },
    "StudioSvcSecurityGroupC3E32D42": Object {
      "Properties": Object {
        "GroupDescription": "Supabase-mesh/Studio/Svc/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "StudioSvcSecurityGroupfromSupabasemeshStudioLoadBalancerSecurityGroup863FA7F330009A55B260": Object {
      "Properties": Object {
        "Description": "Load balancer to target",
        "FromPort": 3000,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "StudioSvcSecurityGroupC3E32D42",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "StudioLoadBalancerSecurityGroup73100F94",
            "GroupId",
          ],
        },
        "ToPort": 3000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "StudioSvcService57CD4A48": Object {
      "DependsOn": Array [
        "StudioLoadBalancerListener522B10FC",
      ],
      "Properties": Object {
        "Cluster": Object {
          "Ref": "ClusterEB0386A7",
        },
        "DeploymentConfiguration": Object {
          "DeploymentCircuitBreaker": Object {
            "Enable": true,
            "Rollback": true,
          },
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "DeploymentController": Object {
          "Type": "ECS",
        },
        "EnableECSManagedTags": true,
        "HealthCheckGracePeriodSeconds": 60,
        "LaunchType": "FARGATE",
        "LoadBalancers": Array [
          Object {
            "ContainerName": "app",
            "ContainerPort": 3000,
            "TargetGroupArn": Object {
              "Ref": "StudioTargetGroupC1E0E03D",
            },
          },
        ],
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "StudioSvcSecurityGroupC3E32D42",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Array [
              Object {
                "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
              },
              Object {
                "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
              },
            ],
          },
        },
        "PropagateTags": "SERVICE",
        "ServiceRegistries": Array [
          Object {
            "ContainerName": "app",
            "ContainerPort": 3000,
            "RegistryArn": Object {
              "Fn::GetAtt": Array [
                "StudioSvcCloudmapServiceD5D25A54",
                "Arn",
              ],
            },
          },
        ],
        "TaskDefinition": Object {
          "Ref": "StudioTaskDefinitionFEEA269A",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "StudioSvcTaskCountTarget992D589A": Object {
      "Properties": Object {
        "MaxCapacity": 20,
        "MinCapacity": 1,
        "ResourceId": Object {
          "Fn::Join": Array [
            "",
            Array [
              "service/",
              Object {
                "Ref": "ClusterEB0386A7",
              },
              "/",
              Object {
                "Fn::GetAtt": Array [
                  "StudioSvcService57CD4A48",
                  "Name",
                ],
              },
            ],
          ],
        },
        "RoleARN": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":iam::",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService",
            ],
          ],
        },
        "ScalableDimension": "ecs:service:DesiredCount",
        "ServiceNamespace": "ecs",
      },
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
    },
    "StudioSvcTaskCountTargetScaleOnCpuF08DFD58": Object {
      "Properties": Object {
        "PolicyName": "SupabasemeshStudioSvcTaskCountTargetScaleOnCpu60B92C93",
        "PolicyType": "TargetTrackingScaling",
        "ScalingTargetId": Object {
          "Ref": "StudioSvcTaskCountTarget992D589A",
        },
        "TargetTrackingScalingPolicyConfiguration": Object {
          "PredefinedMetricSpecification": Object {
            "PredefinedMetricType": "ECSServiceAverageCPUUtilization",
          },
          "ScaleInCooldown": 60,
          "ScaleOutCooldown": 60,
          "TargetValue": 50,
        },
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
    },
    "StudioTargetGroupC1E0E03D": Object {
      "Properties": Object {
        "HealthCheckIntervalSeconds": 10,
        "HealthCheckTimeoutSeconds": 5,
        "Port": 3000,
        "Protocol": "HTTP",
        "TargetGroupAttributes": Array [
          Object {
            "Key": "deregistration_delay.timeout_seconds",
            "Value": "30",
          },
          Object {
            "Key": "stickiness.enabled",
            "Value": "false",
          },
        ],
        "TargetType": "ip",
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
    },
    "StudioTaskDefinitionExecutionRoleBBC69CFE": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "StudioTaskDefinitionExecutionRoleDefaultPolicy1DF00583": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "StudioLogs5268B2C5",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "DatabaseSecretAttachmentE5D1B020",
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "SupabaseJwtAnonKey90E80F90",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "SupabaseJwtServiceRoleKey94675B64",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "StudioTaskDefinitionExecutionRoleDefaultPolicy1DF00583",
        "Roles": Array [
          Object {
            "Ref": "StudioTaskDefinitionExecutionRoleBBC69CFE",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "StudioTaskDefinitionFEEA269A": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "Environment": Array [
              Object {
                "Name": "STUDIO_PG_META_URL",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "https://",
                      Object {
                        "Fn::GetAtt": Array [
                          "CDNDistributionD4FAE585",
                          "DomainName",
                        ],
                      },
                      "/pg",
                    ],
                  ],
                },
              },
              Object {
                "Name": "SUPABASE_URL",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "https://",
                      Object {
                        "Fn::GetAtt": Array [
                          "CDNDistributionD4FAE585",
                          "DomainName",
                        ],
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "SUPABASE_REST_URL",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "https://",
                      Object {
                        "Fn::GetAtt": Array [
                          "CDNDistributionD4FAE585",
                          "DomainName",
                        ],
                      },
                      "/rest/v1/",
                    ],
                  ],
                },
              },
            ],
            "Essential": true,
            "Image": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "public.ecr.aws/t3w2s2c9/studio:",
                  Object {
                    "Ref": "StudioVersionParameter",
                  },
                ],
              ],
            },
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "StudioLogs5268B2C5",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "Name": "app",
            "PortMappings": Array [
              Object {
                "ContainerPort": 3000,
                "Protocol": "tcp",
              },
            ],
            "Secrets": Array [
              Object {
                "Name": "POSTGRES_PASSWORD",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DatabaseSecretAttachmentE5D1B020",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "SUPABASE_ANON_KEY",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "SupabaseJwtAnonKey90E80F90",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "SUPABASE_SERVICE_KEY",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "SupabaseJwtServiceRoleKey94675B64",
                      },
                    ],
                  ],
                },
              },
            ],
            "Ulimits": Array [
              Object {
                "HardLimit": 65536,
                "Name": "nofile",
                "SoftLimit": 65536,
              },
            ],
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "StudioTaskDefinitionExecutionRoleBBC69CFE",
            "Arn",
          ],
        },
        "Family": "SupabasemeshStudioTaskDefinition0FEA30C7",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "RuntimePlatform": Object {
          "CpuArchitecture": "ARM64",
          "OperatingSystemFamily": "LINUX",
        },
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "StudioTaskDefinitionTaskRole4FE9D685",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "StudioTaskDefinitionTaskRole4FE9D685": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "StudioUserPool94F50620": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "AccountRecoverySetting": Object {
          "RecoveryMechanisms": Array [
            Object {
              "Name": "verified_phone_number",
              "Priority": 1,
            },
            Object {
              "Name": "verified_email",
              "Priority": 2,
            },
          ],
        },
        "AdminCreateUserConfig": Object {
          "AllowAdminCreateUserOnly": true,
        },
        "AutoVerifiedAttributes": Array [
          "email",
        ],
        "EmailVerificationMessage": "The verification code to your new account is {####}",
        "EmailVerificationSubject": "Verify your new account",
        "SmsVerificationMessage": "The verification code to your new account is {####}",
        "UserPoolName": "SupabaseStudio-UserPool",
        "UsernameAttributes": Array [
          "email",
        ],
        "VerificationMessageTemplate": Object {
          "DefaultEmailOption": "CONFIRM_WITH_CODE",
          "EmailMessage": "The verification code to your new account is {####}",
          "EmailSubject": "Verify your new account",
          "SmsMessage": "The verification code to your new account is {####}",
        },
      },
      "Type": "AWS::Cognito::UserPool",
      "UpdateReplacePolicy": "Delete",
    },
    "StudioUserPoolDomain83E076DB": Object {
      "Properties": Object {
        "Domain": Object {
          "Fn::Join": Array [
            "",
            Array [
              "supabase-studio-",
              Object {
                "Ref": "AWS::AccountId",
              },
            ],
          ],
        },
        "UserPoolId": Object {
          "Ref": "StudioUserPool94F50620",
        },
      },
      "Type": "AWS::Cognito::UserPoolDomain",
    },
    "SupabaseJwtAnonKey90E80F90": Object {
      "Properties": Object {
        "Description": "This key is safe to use in a browser if you have enabled Row Level Security for your tables and configured policies.",
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/",
              Object {
                "Ref": "AWS::StackName",
              },
              "/JWT/anon",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Fn::GetAtt": Array [
            "SupabaseJwtAnonRole874E82F9",
            "Token",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "SupabaseJwtAnonRole874E82F9": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "ExpiresIn": "10y",
        "Issuer": "supabase",
        "Payload": Object {
          "role": "anon",
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "SupabaseJwtProviderframeworkonEventABA31464",
            "Arn",
          ],
        },
      },
      "Type": "Custom::SupabaseApiRole",
      "UpdateReplacePolicy": "Delete",
    },
    "SupabaseJwtCreateApiRoleFunction40C9BEBC": Object {
      "DependsOn": Array [
        "SupabaseJwtCreateApiRoleFunctionServiceRoleDefaultPolicyF86CBBD8",
        "SupabaseJwtCreateApiRoleFunctionServiceRoleBB9B11C4",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "711810d3f57d7256b05963e398fa514d237d4766e38bf8be79e548f5e0bf2f53.zip",
        },
        "Description": "Supabase - Create API role & API key",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "JWT_SECRET_ARN": Object {
              "Ref": "SupabaseJwtSecretFA404A75",
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "SupabaseJwtCreateApiRoleFunctionServiceRoleBB9B11C4",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "SupabaseJwtCreateApiRoleFunctionServiceRoleBB9B11C4": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SupabaseJwtCreateApiRoleFunctionServiceRoleDefaultPolicyF86CBBD8": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "SupabaseJwtSecretFA404A75",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SupabaseJwtCreateApiRoleFunctionServiceRoleDefaultPolicyF86CBBD8",
        "Roles": Array [
          Object {
            "Ref": "SupabaseJwtCreateApiRoleFunctionServiceRoleBB9B11C4",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SupabaseJwtProviderframeworkonEventABA31464": Object {
      "DependsOn": Array [
        "SupabaseJwtProviderframeworkonEventServiceRoleDefaultPolicyBFD1DEC9",
        "SupabaseJwtProviderframeworkonEventServiceRole62754416",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "e7c95e1a12d903d913ebdd526c735f1ac58b2024882a5562110221fe685ebe85.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (Supabase-mesh/SupabaseJwt/Provider)",
        "Environment": Object {
          "Variables": Object {
            "USER_ON_EVENT_FUNCTION_ARN": Object {
              "Fn::GetAtt": Array [
                "SupabaseJwtCreateApiRoleFunction40C9BEBC",
                "Arn",
              ],
            },
          },
        },
        "Handler": "framework.onEvent",
        "Role": Object {
          "Fn::GetAtt": Array [
            "SupabaseJwtProviderframeworkonEventServiceRole62754416",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "SupabaseJwtProviderframeworkonEventServiceRole62754416": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SupabaseJwtProviderframeworkonEventServiceRoleDefaultPolicyBFD1DEC9": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "SupabaseJwtCreateApiRoleFunction40C9BEBC",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "SupabaseJwtCreateApiRoleFunction40C9BEBC",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SupabaseJwtProviderframeworkonEventServiceRoleDefaultPolicyBFD1DEC9",
        "Roles": Array [
          Object {
            "Ref": "SupabaseJwtProviderframeworkonEventServiceRole62754416",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SupabaseJwtSecretFA404A75": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "Description": "Supabase - Json Web Token Secret",
        "GenerateSecretString": Object {
          "ExcludePunctuation": true,
          "PasswordLength": 64,
        },
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "SupabaseJwtServiceRole36CFC81F": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "ExpiresIn": "10y",
        "Issuer": "supabase",
        "Payload": Object {
          "role": "service_role",
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "SupabaseJwtProviderframeworkonEventABA31464",
            "Arn",
          ],
        },
      },
      "Type": "Custom::SupabaseApiRole",
      "UpdateReplacePolicy": "Delete",
    },
    "SupabaseJwtServiceRoleKey94675B64": Object {
      "Properties": Object {
        "Description": "This key has the ability to bypass Row Level Security. Never share it publicly.",
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/",
              Object {
                "Ref": "AWS::StackName",
              },
              "/JWT/service_role",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Fn::GetAtt": Array [
            "SupabaseJwtServiceRole36CFC81F",
            "Token",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "SupabaseMailAccessKeyA6348E49": Object {
      "Properties": Object {
        "UserName": Object {
          "Ref": "SupabaseMailUser6287674D",
        },
      },
      "Type": "AWS::IAM::AccessKey",
    },
    "SupabaseMailGenSmtpPasswordFunction1BD23362": Object {
      "DependsOn": Array [
        "SupabaseMailGenSmtpPasswordFunctionServiceRoleDefaultPolicyE69CB8D3",
        "SupabaseMailGenSmtpPasswordFunctionServiceRole0A78DBF3",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "bed229ed30972eb5b99c1adea2197ac5c694cd661895bb420af5f1d4054ba060.zip",
        },
        "Description": "Supabase - Generate SMTP Password Function",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "SupabaseMailGenSmtpPasswordFunctionServiceRole0A78DBF3",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "SupabaseMailGenSmtpPasswordFunctionServiceRole0A78DBF3": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SupabaseMailGenSmtpPasswordFunctionServiceRoleDefaultPolicyE69CB8D3": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "secretsmanager:PutSecretValue",
                "secretsmanager:UpdateSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "SupabaseMailSecret777E0288",
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "SupabaseMailSecret777E0288",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SupabaseMailGenSmtpPasswordFunctionServiceRoleDefaultPolicyE69CB8D3",
        "Roles": Array [
          Object {
            "Ref": "SupabaseMailGenSmtpPasswordFunctionServiceRole0A78DBF3",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SupabaseMailGenSmtpPasswordProviderframeworkonEvent3038CFFF": Object {
      "DependsOn": Array [
        "SupabaseMailGenSmtpPasswordProviderframeworkonEventServiceRoleDefaultPolicy28275DA1",
        "SupabaseMailGenSmtpPasswordProviderframeworkonEventServiceRole4F5FF7D5",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "e7c95e1a12d903d913ebdd526c735f1ac58b2024882a5562110221fe685ebe85.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (Supabase-mesh/SupabaseMail/GenSmtpPasswordProvider)",
        "Environment": Object {
          "Variables": Object {
            "USER_ON_EVENT_FUNCTION_ARN": Object {
              "Fn::GetAtt": Array [
                "SupabaseMailGenSmtpPasswordFunction1BD23362",
                "Arn",
              ],
            },
          },
        },
        "Handler": "framework.onEvent",
        "Role": Object {
          "Fn::GetAtt": Array [
            "SupabaseMailGenSmtpPasswordProviderframeworkonEventServiceRole4F5FF7D5",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "SupabaseMailGenSmtpPasswordProviderframeworkonEventServiceRole4F5FF7D5": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SupabaseMailGenSmtpPasswordProviderframeworkonEventServiceRoleDefaultPolicy28275DA1": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "SupabaseMailGenSmtpPasswordFunction1BD23362",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "SupabaseMailGenSmtpPasswordFunction1BD23362",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SupabaseMailGenSmtpPasswordProviderframeworkonEventServiceRoleDefaultPolicy28275DA1",
        "Roles": Array [
          Object {
            "Ref": "SupabaseMailGenSmtpPasswordProviderframeworkonEventServiceRole4F5FF7D5",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SupabaseMailPolicy575C9DA2": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "ses:SendRawEmail",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SendEmailPolicy",
        "Users": Array [
          Object {
            "Ref": "SupabaseMailUser6287674D",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SupabaseMailSecret777E0288": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "Description": "Supabase - SES SMTP Secret",
        "SecretString": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{\\"access_key\\":\\"",
              Object {
                "Ref": "SupabaseMailAccessKeyA6348E49",
              },
              "\\",\\"secret_access_key\\":\\"",
              Object {
                "Fn::GetAtt": Array [
                  "SupabaseMailAccessKeyA6348E49",
                  "SecretAccessKey",
                ],
              },
              "\\"}",
            ],
          ],
        },
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "SupabaseMailSmtpPassword3227537A": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "Region": Object {
          "Ref": "SesRegionParameter",
        },
        "SecretId": Object {
          "Ref": "SupabaseMailSecret777E0288",
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "SupabaseMailGenSmtpPasswordProviderframeworkonEvent3038CFFF",
            "Arn",
          ],
        },
      },
      "Type": "Custom::SmtpPassword",
      "UpdateReplacePolicy": "Delete",
    },
    "SupabaseMailUser6287674D": Object {
      "Type": "AWS::IAM::User",
    },
    "SupabaseMailVirtualNode6D9ABCE1": Object {
      "Properties": Object {
        "MeshName": Object {
          "Fn::GetAtt": Array [
            "Mesh73A573F6",
            "MeshName",
          ],
        },
        "Spec": Object {
          "Listeners": Array [
            Object {
              "PortMapping": Object {
                "Port": 465,
                "Protocol": "tcp",
              },
            },
          ],
          "ServiceDiscovery": Object {
            "DNS": Object {
              "Hostname": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "email-smtp.",
                    Object {
                      "Ref": "SesRegionParameter",
                    },
                    ".amazonaws.com",
                  ],
                ],
              },
              "ResponseType": "ENDPOINTS",
            },
          },
        },
        "VirtualNodeName": "AmazonSES",
      },
      "Type": "AWS::AppMesh::VirtualNode",
    },
    "SupabaseMailVirtualService6FFA81D4": Object {
      "Properties": Object {
        "MeshName": Object {
          "Fn::GetAtt": Array [
            "Mesh73A573F6",
            "MeshName",
          ],
        },
        "Spec": Object {
          "Provider": Object {
            "VirtualNode": Object {
              "VirtualNodeName": Object {
                "Fn::GetAtt": Array [
                  "SupabaseMailVirtualNode6D9ABCE1",
                  "VirtualNodeName",
                ],
              },
            },
          },
        },
        "VirtualServiceName": Object {
          "Fn::Join": Array [
            "",
            Array [
              "email-smtp.",
              Object {
                "Ref": "SesRegionParameter",
              },
              ".amazonaws.com",
            ],
          ],
        },
      },
      "Type": "AWS::AppMesh::VirtualService",
    },
    "SupabasemeshDatabaseSecretC63CE6F66b2eb8af71bef5c6813259b78dc271d3": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "Description": Object {
          "Fn::Join": Array [
            "",
            Array [
              "Generated by the CDK for stack: ",
              Object {
                "Ref": "AWS::StackName",
              },
            ],
          ],
        },
        "GenerateSecretString": Object {
          "ExcludeCharacters": "%+~\`#$&*()|[]{}:;<>?!'/@\\"\\\\=^",
          "GenerateStringKey": "password",
          "PasswordLength": 30,
          "SecretStringTemplate": "{\\"username\\":\\"supabase_admin\\"}",
        },
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "TwitterClientId11873110": Object {
      "Properties": Object {
        "Description": "The OAuth2 Client ID registered with the external provider.",
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/",
              Object {
                "Ref": "AWS::StackName",
              },
              "/Auth/External/Twitter/ClientId",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Ref": "TwitterClientIdParameterE2950332",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "TwitterSecretA36121D0": Object {
      "Properties": Object {
        "Description": "The OAuth2 Client Secret provided by the external provider when you registered.",
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/",
              Object {
                "Ref": "AWS::StackName",
              },
              "/Auth/External/Twitter/Secret",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Ref": "TwitterSecretParameter548D162D",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "VPCB9E5F0B4": Object {
      "Properties": Object {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Supabase-mesh/VPC",
          },
        ],
      },
      "Type": "AWS::EC2::VPC",
    },
    "VPCIGWB7E252D3": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Supabase-mesh/VPC",
          },
        ],
      },
      "Type": "AWS::EC2::InternetGateway",
    },
    "VPCPrivateSubnet1DefaultRouteAE1D6490": Object {
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": Object {
          "Ref": "VPCPublicSubnet1NATGatewayE0556630",
        },
        "RouteTableId": Object {
          "Ref": "VPCPrivateSubnet1RouteTableBE8A6027",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VPCPrivateSubnet1RouteTableAssociation347902D1": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VPCPrivateSubnet1RouteTableBE8A6027",
        },
        "SubnetId": Object {
          "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VPCPrivateSubnet1RouteTableBE8A6027": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Supabase-mesh/VPC/PrivateSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VPCPrivateSubnet1Subnet8BCA10E0": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            0,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.128.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          Object {
            "Key": "Name",
            "Value": "Supabase-mesh/VPC/PrivateSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VPCPrivateSubnet2DefaultRouteF4F5CFD2": Object {
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": Object {
          "Ref": "VPCPublicSubnet1NATGatewayE0556630",
        },
        "RouteTableId": Object {
          "Ref": "VPCPrivateSubnet2RouteTable0A19E10E",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VPCPrivateSubnet2RouteTable0A19E10E": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Supabase-mesh/VPC/PrivateSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VPCPrivateSubnet2RouteTableAssociation0C73D413": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VPCPrivateSubnet2RouteTable0A19E10E",
        },
        "SubnetId": Object {
          "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VPCPrivateSubnet2SubnetCFCDAA7A": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            1,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.192.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          Object {
            "Key": "Name",
            "Value": "Supabase-mesh/VPC/PrivateSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VPCPublicSubnet1DefaultRoute91CEF279": Object {
      "DependsOn": Array [
        "VPCVPCGW99B986DC",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "VPCIGWB7E252D3",
        },
        "RouteTableId": Object {
          "Ref": "VPCPublicSubnet1RouteTableFEE4B781",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VPCPublicSubnet1EIP6AD938E8": Object {
      "Properties": Object {
        "Domain": "vpc",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Supabase-mesh/VPC/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::EIP",
    },
    "VPCPublicSubnet1NATGatewayE0556630": Object {
      "Properties": Object {
        "AllocationId": Object {
          "Fn::GetAtt": Array [
            "VPCPublicSubnet1EIP6AD938E8",
            "AllocationId",
          ],
        },
        "SubnetId": Object {
          "Ref": "VPCPublicSubnet1SubnetB4246D30",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Supabase-mesh/VPC/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::NatGateway",
    },
    "VPCPublicSubnet1RouteTableAssociation0B0896DC": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VPCPublicSubnet1RouteTableFEE4B781",
        },
        "SubnetId": Object {
          "Ref": "VPCPublicSubnet1SubnetB4246D30",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VPCPublicSubnet1RouteTableFEE4B781": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Supabase-mesh/VPC/PublicSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VPCPublicSubnet1SubnetB4246D30": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            0,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.0.0/18",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "Supabase-mesh/VPC/PublicSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VPCPublicSubnet2DefaultRouteB7481BBA": Object {
      "DependsOn": Array [
        "VPCVPCGW99B986DC",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "VPCIGWB7E252D3",
        },
        "RouteTableId": Object {
          "Ref": "VPCPublicSubnet2RouteTable6F1A15F1",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VPCPublicSubnet2RouteTable6F1A15F1": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Supabase-mesh/VPC/PublicSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VPCPublicSubnet2RouteTableAssociation5A808732": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VPCPublicSubnet2RouteTable6F1A15F1",
        },
        "SubnetId": Object {
          "Ref": "VPCPublicSubnet2Subnet74179F39",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VPCPublicSubnet2Subnet74179F39": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            1,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.64.0/18",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "Supabase-mesh/VPC/PublicSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VPCVPCGW99B986DC": Object {
      "Properties": Object {
        "InternetGatewayId": Object {
          "Ref": "VPCIGWB7E252D3",
        },
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::VPCGatewayAttachment",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
  "Transform": "AWS::SecretsManager-2020-07-23",
}
`;

exports[`Snapshot 3`] = `
Object {
  "Conditions": Object {
    "DatabaseMultiAzCondition82AA721B": Object {
      "Fn::Equals": Array [
        Object {
          "Ref": "DatabaseMultiAz04923704",
        },
        "true",
      ],
    },
    "StudioHttpCondition14AD1D44": Object {
      "Fn::Equals": Array [
        Object {
          "Ref": "StudioCertificateArnParameterEBA639E6",
        },
        "arn:aws:acm:us-west-2:123456789012:certificate/no-cert-it-is-not-secure-to-use-http",
      ],
    },
  },
  "Description": "Self-hosted Supabase on AWS",
  "Metadata": Object {
    "AWS::CloudFormation::Interface": Object {
      "ParameterGroups": Array [
        Object {
          "Label": Object {
            "default": "Supabase - Auth Settings",
          },
          "Parameters": Array [
            "DisableSignupParameter",
            "SiteUrlParameter",
            "RedirectUrlsParameter",
            "JwtExpiryLimitParameter",
            "PasswordMinLengthParameter",
          ],
        },
        Object {
          "Label": Object {
            "default": "Supabase - Auth E-mail Settings",
          },
          "Parameters": Array [
            "SmtpAdminEmailParameter",
            "SmtpSenderNameParameter",
          ],
        },
        Object {
          "Label": Object {
            "default": "Platform Settings",
          },
          "Parameters": Array [
            "SesRegionParameter",
            "DatabaseMultiAz04923704",
          ],
        },
        Object {
          "Label": Object {
            "default": "Supabase - API Versions",
          },
          "Parameters": Array [
            "AuthApiVersionParameter",
            "RestApiVersionParameter",
            "RealtimeApiVersionParameter",
            "StorageApiVersionParameter",
            "PostgresMetaApiVersionParameter",
          ],
        },
        Object {
          "Label": Object {
            "default": "Supabase - Studio Settings",
          },
          "Parameters": Array [
            "StudioVersionParameter",
            "StudioCertificateArnParameterEBA639E6",
          ],
        },
        Object {
          "Label": Object {
            "default": "Supabase - External Auth Provider - Google",
          },
          "Parameters": Array [
            "GoogleEnabledParameterC8D211C0",
            "GoogleClientIdParameter10AB1CB7",
            "GoogleSecretParameterD567D187",
          ],
        },
        Object {
          "Label": Object {
            "default": "Supabase - External Auth Provider - Facebook",
          },
          "Parameters": Array [
            "FacebookEnabledParameter04E6667E",
            "FacebookClientIdParameterF8F9E3CB",
            "FacebookSecretParameter0FEABC80",
          ],
        },
        Object {
          "Label": Object {
            "default": "Supabase - External Auth Provider - Twitter",
          },
          "Parameters": Array [
            "TwitterEnabledParameter355D114D",
            "TwitterClientIdParameterE2950332",
            "TwitterSecretParameter548D162D",
          ],
        },
        Object {
          "Label": Object {
            "default": "Supabase - External Auth Provider - GitHub",
          },
          "Parameters": Array [
            "GitHubEnabledParameter04C9B675",
            "GitHubClientIdParameterEB9B453C",
            "GitHubSecretParameter60DD8371",
          ],
        },
      ],
      "ParameterLabels": Object {
        "AuthApiVersionParameter": Object {
          "default": "Auth API Version - GoTrue",
        },
        "DatabaseMultiAz04923704": Object {
          "default": "Database Multi-AZ",
        },
        "DisableSignupParameter": Object {
          "default": "Disable User Signups",
        },
        "FacebookClientIdParameterF8F9E3CB": Object {
          "default": "Facebook Client ID",
        },
        "FacebookEnabledParameter04E6667E": Object {
          "default": "Facebook Enabled",
        },
        "FacebookSecretParameter0FEABC80": Object {
          "default": "Facebook Client Secret",
        },
        "GitHubClientIdParameterEB9B453C": Object {
          "default": "GitHub Client ID",
        },
        "GitHubEnabledParameter04C9B675": Object {
          "default": "GitHub Enabled",
        },
        "GitHubSecretParameter60DD8371": Object {
          "default": "GitHub Client Secret",
        },
        "GoogleClientIdParameter10AB1CB7": Object {
          "default": "Google Client ID",
        },
        "GoogleEnabledParameterC8D211C0": Object {
          "default": "Google Enabled",
        },
        "GoogleSecretParameterD567D187": Object {
          "default": "Google Client Secret",
        },
        "JwtExpiryLimitParameter": Object {
          "default": "JWT expiry limit",
        },
        "PasswordMinLengthParameter": Object {
          "default": "Min password length",
        },
        "PostgresMetaApiVersionParameter": Object {
          "default": "Postgres Meta API Version",
        },
        "RealtimeApiVersionParameter": Object {
          "default": "Realtime API Version",
        },
        "RedirectUrlsParameter": Object {
          "default": "Redirect URLs",
        },
        "RestApiVersionParameter": Object {
          "default": "Rest API Version - PostgREST",
        },
        "SesRegionParameter": Object {
          "default": "Amazon SES Region",
        },
        "SiteUrlParameter": Object {
          "default": "Site URL",
        },
        "SmtpAdminEmailParameter": Object {
          "default": "SMTP Admin Email Address",
        },
        "SmtpSenderNameParameter": Object {
          "default": "SMTP Sender Name",
        },
        "StorageApiVersionParameter": Object {
          "default": "Storage API Version",
        },
        "StudioCertificateArnParameterEBA639E6": Object {
          "default": "ACM Certificate ARN",
        },
        "StudioVersionParameter": Object {
          "default": "Supabase Studio Version",
        },
        "TwitterClientIdParameterE2950332": Object {
          "default": "Twitter Client ID",
        },
        "TwitterEnabledParameter355D114D": Object {
          "default": "Twitter Enabled",
        },
        "TwitterSecretParameter548D162D": Object {
          "default": "Twitter Client Secret",
        },
      },
    },
  },
  "Outputs": Object {
    "ExportApiKey": Object {
      "Export": Object {
        "Name": "ApiKey",
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "SupabaseJwtAnonRole874E82F9",
          "Token",
        ],
      },
    },
    "ExportUrl": Object {
      "Export": Object {
        "Name": "Url",
      },
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "https://",
            Object {
              "Fn::GetAtt": Array [
                "CDNDistributionD4FAE585",
                "DomainName",
              ],
            },
          ],
        ],
      },
    },
    "StudioUrl": Object {
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "http://",
            Object {
              "Fn::GetAtt": Array [
                "StudioLoadBalancer143227F7",
                "DNSName",
              ],
            },
          ],
        ],
      },
    },
    "StudioUserPool": Object {
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "https://",
            Object {
              "Ref": "AWS::Region",
            },
            ".console.aws.amazon.com/cognito/v2/idp/user-pools/",
            Object {
              "Ref": "StudioUserPool94F50620",
            },
            "/users",
          ],
        ],
      },
    },
  },
  "Parameters": Object {
    "AuthApiVersionParameter": Object {
      "AllowedPattern": "^(v[0-9]+.[0-9]+.[0-9]+(.w)*)|latest$",
      "Default": "v2.15.5",
      "Description": "Docker image tag - https://gallery.ecr.aws/t3w2s2c9/gotrue",
      "Type": "String",
    },
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "DatabaseMultiAz04923704": Object {
      "AllowedValues": Array [
        "true",
        "false",
      ],
      "Default": "false",
      "Description": "Create a replica at another AZ",
      "Type": "String",
    },
    "DisableSignupParameter": Object {
      "AllowedValues": Array [
        "true",
        "false",
      ],
      "Default": "false",
      "Description": "When signup is disabled the only way to create new users is through invites. Defaults to false, all signups enabled.",
      "Type": "String",
    },
    "FacebookClientIdParameterF8F9E3CB": Object {
      "Default": "replace-with-your-client-id",
      "Description": "The OAuth2 Client ID registered with the external provider.",
      "Type": "String",
    },
    "FacebookEnabledParameter04E6667E": Object {
      "AllowedValues": Array [
        "true",
        "false",
      ],
      "Default": "false",
      "Description": "Whether this external provider is enabled or not",
      "Type": "String",
    },
    "FacebookSecretParameter0FEABC80": Object {
      "Default": "replace-with-your-client-secret",
      "Description": "The OAuth2 Client Secret provided by the external provider when you registered.",
      "NoEcho": true,
      "Type": "String",
    },
    "GitHubClientIdParameterEB9B453C": Object {
      "Default": "replace-with-your-client-id",
      "Description": "The OAuth2 Client ID registered with the external provider.",
      "Type": "String",
    },
    "GitHubEnabledParameter04C9B675": Object {
      "AllowedValues": Array [
        "true",
        "false",
      ],
      "Default": "false",
      "Description": "Whether this external provider is enabled or not",
      "Type": "String",
    },
    "GitHubSecretParameter60DD8371": Object {
      "Default": "replace-with-your-client-secret",
      "Description": "The OAuth2 Client Secret provided by the external provider when you registered.",
      "NoEcho": true,
      "Type": "String",
    },
    "GoogleClientIdParameter10AB1CB7": Object {
      "Default": "replace-with-your-client-id",
      "Description": "The OAuth2 Client ID registered with the external provider.",
      "Type": "String",
    },
    "GoogleEnabledParameterC8D211C0": Object {
      "AllowedValues": Array [
        "true",
        "false",
      ],
      "Default": "false",
      "Description": "Whether this external provider is enabled or not",
      "Type": "String",
    },
    "GoogleSecretParameterD567D187": Object {
      "Default": "replace-with-your-client-secret",
      "Description": "The OAuth2 Client Secret provided by the external provider when you registered.",
      "NoEcho": true,
      "Type": "String",
    },
    "JwtExpiryLimitParameter": Object {
      "Default": 3600,
      "Description": "How long tokens are valid for. Defaults to 3600 (1 hour), maximum 604,800 seconds (one week).",
      "MaxValue": 604800,
      "MinValue": 300,
      "Type": "Number",
    },
    "PasswordMinLengthParameter": Object {
      "Default": "16",
      "Description": "When signup is disabled the only way to create new users is through invites. Defaults to false, all signups enabled.",
      "MaxValue": 128,
      "MinValue": 8,
      "Type": "Number",
    },
    "PostgresMetaApiVersionParameter": Object {
      "AllowedPattern": "^(v[0-9]+.[0-9]+.[0-9]+(.w)*)|latest$",
      "Default": "v0.44.0",
      "Description": "Docker image tag - https://gallery.ecr.aws/t3w2s2c9/postgres-meta",
      "Type": "String",
    },
    "RealtimeApiVersionParameter": Object {
      "AllowedPattern": "^(v[0-9]+.[0-9]+.[0-9]+(.w)*)|latest$",
      "Default": "v0.24.2",
      "Description": "Docker image tag - https://gallery.ecr.aws/t3w2s2c9/realtime",
      "Type": "String",
    },
    "RedirectUrlsParameter": Object {
      "Default": "",
      "Description": "URLs that auth providers are permitted to redirect to post authentication",
      "Type": "String",
    },
    "RestApiVersionParameter": Object {
      "Default": "v9.0.1.20220802",
      "Description": "Docker image tag - https://hub.docker.com/r/postgrest/postgrest/tags",
      "Type": "String",
    },
    "SesRegionParameter": Object {
      "AllowedValues": Array [
        "us-east-1",
        "us-east-2",
        "us-west-1",
        "us-west-2",
        "ap-south-1",
        "ap-northeast-1",
        "ap-northeast-2",
        "ap-northeast-3",
        "ap-southeast-1",
        "ap-southeast-2",
        "ca-central-1",
        "eu-central-1",
        "eu-west-1",
        "eu-west-2",
        "eu-west-3",
        "eu-north-1",
        "sa-east-1",
      ],
      "Default": "us-west-2",
      "Description": "Use Amazon SES as SMTP server. You must choose a region.",
      "Type": "String",
    },
    "SiteUrlParameter": Object {
      "Default": "http://localhost:3000",
      "Description": "The base URL your site is located at. Currently used in combination with other settings to construct URLs used in emails.",
      "Type": "String",
    },
    "SmtpAdminEmailParameter": Object {
      "AllowedPattern": "^[\\\\x20-\\\\x45]?[\\\\w-\\\\+]+(\\\\.[\\\\w]+)*@[\\\\w-]+(\\\\.[\\\\w]+)*(\\\\.[a-z]{2,})$",
      "ConstraintDescription": "must be a valid email address",
      "Default": "noreply@supabase.example.com",
      "Description": "The From e-mail address for all emails sent. If you want test e-mail, you can use Amazon WorkMail",
      "Type": "String",
    },
    "SmtpSenderNameParameter": Object {
      "Default": "Supabase",
      "Description": "The From email sender name for all emails sent.",
      "Type": "String",
    },
    "StorageApiVersionParameter": Object {
      "AllowedPattern": "^(v[0-9]+.[0-9]+.[0-9]+(.w)*)|latest$",
      "Default": "v0.20.0",
      "Description": "Docker image tag - https://gallery.ecr.aws/t3w2s2c9/storage-api",
      "Type": "String",
    },
    "StudioCertificateArnParameterEBA639E6": Object {
      "AllowedPattern": "^arn:aws:acm:[\\\\w-]+:[0-9]{12}:certificate/[\\\\w-]{36}$",
      "Default": "arn:aws:acm:us-west-2:123456789012:certificate/no-cert-it-is-not-secure-to-use-http",
      "Description": "ACM Certificate ARN for Supabase studio",
      "Type": "String",
    },
    "StudioVersionParameter": Object {
      "AllowedPattern": "^(v[0-9]+.[0-9]+.[0-9]+(.w)*)|latest$",
      "Default": "latest",
      "Description": "Docker image tag - https://gallery.ecr.aws/t3w2s2c9/studio",
      "Type": "String",
    },
    "TwitterClientIdParameterE2950332": Object {
      "Default": "replace-with-your-client-id",
      "Description": "The OAuth2 Client ID registered with the external provider.",
      "Type": "String",
    },
    "TwitterEnabledParameter355D114D": Object {
      "AllowedValues": Array [
        "true",
        "false",
      ],
      "Default": "false",
      "Description": "Whether this external provider is enabled or not",
      "Type": "String",
    },
    "TwitterSecretParameter548D162D": Object {
      "Default": "replace-with-your-client-secret",
      "Description": "The OAuth2 Client Secret provided by the external provider when you registered.",
      "NoEcho": true,
      "Type": "String",
    },
  },
  "Resources": Object {
    "AWS679f53fac002430cb0da5b7982bd22872D164C4C": Object {
      "DependsOn": Array [
        "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "6dbd112fe448437b3438da4382c72fccbb7d2ee1543db222620d7447fffebc50.zip",
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 120,
      },
      "Type": "AWS::Lambda::Function",
    },
    "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "AuthForceDeployFunction40B32C4E": Object {
      "DependsOn": Array [
        "AuthForceDeployFunctionServiceRoleDefaultPolicyD04AD932",
        "AuthForceDeployFunctionServiceRole1EF67253",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "8d678058f0eb8312a176152d7bdc2392d3a97980a0b4c6a5af633d405b11038b.zip",
        },
        "Description": "Supabase - Force deploy ECS service function",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "ECS_CLUSTER_NAME": Object {
              "Ref": "ClusterEB0386A7",
            },
            "ECS_SERVICE_NAME": Object {
              "Fn::GetAtt": Array [
                "AuthSvcServiceDAF53F1D",
                "Name",
              ],
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "AuthForceDeployFunctionServiceRole1EF67253",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "AuthForceDeployFunctionServiceRole1EF67253": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "AuthForceDeployFunctionServiceRoleDefaultPolicyD04AD932": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "ecs:UpdateService",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "AuthSvcServiceDAF53F1D",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "AuthForceDeployFunctionServiceRoleDefaultPolicyD04AD932",
        "Roles": Array [
          Object {
            "Ref": "AuthForceDeployFunctionServiceRole1EF67253",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "AuthLogs940C0551": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "RetentionInDays": 30,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "AuthParameterChangeAllowEventRuleSupabasegraphqlAuthForceDeployFunctionE6BE2CFF5637B148": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "AuthForceDeployFunction40B32C4E",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": Object {
          "Fn::GetAtt": Array [
            "AuthParameterChangeED794F9C",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "AuthParameterChangeED794F9C": Object {
      "Properties": Object {
        "Description": "Supabase - Force deploy Auth, when parameters changed",
        "EventPattern": Object {
          "detail": Object {
            "name": Array [
              Object {
                "prefix": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "/",
                      Object {
                        "Ref": "AWS::StackName",
                      },
                      "/Auth/",
                    ],
                  ],
                },
              },
            ],
            "operation": Array [
              "Update",
            ],
          },
          "detail-type": Array [
            "Parameter Store Change",
          ],
          "source": Array [
            "aws.ssm",
          ],
        },
        "State": "ENABLED",
        "Targets": Array [
          Object {
            "Arn": Object {
              "Fn::GetAtt": Array [
                "AuthForceDeployFunction40B32C4E",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "AuthSvcCloudmapService85C22E54": Object {
      "Properties": Object {
        "DnsConfig": Object {
          "DnsRecords": Array [
            Object {
              "TTL": 10,
              "Type": "SRV",
            },
            Object {
              "TTL": 10,
              "Type": "A",
            },
          ],
          "NamespaceId": Object {
            "Fn::GetAtt": Array [
              "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
              "Id",
            ],
          },
          "RoutingPolicy": "MULTIVALUE",
        },
        "HealthCheckCustomConfig": Object {
          "FailureThreshold": 1,
        },
        "Name": "auth",
        "NamespaceId": Object {
          "Fn::GetAtt": Array [
            "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
            "Id",
          ],
        },
      },
      "Type": "AWS::ServiceDiscovery::Service",
    },
    "AuthSvcSecurityGroup71415F29": Object {
      "Properties": Object {
        "GroupDescription": "Supabase-graphql/Auth/Svc/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "AuthSvcSecurityGroupfromSupabasegraphqlKongSvcSecurityGroup65C63AF499991938E8C8": Object {
      "Properties": Object {
        "Description": "from SupabasegraphqlKongSvcSecurityGroup65C63AF4:9999",
        "FromPort": 9999,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "AuthSvcSecurityGroup71415F29",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "KongSvcSecurityGroupD458B522",
            "GroupId",
          ],
        },
        "ToPort": 9999,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "AuthSvcServiceDAF53F1D": Object {
      "DependsOn": Array [
        "DatabaseInstance1844F58FD",
      ],
      "Properties": Object {
        "Cluster": Object {
          "Ref": "ClusterEB0386A7",
        },
        "DeploymentConfiguration": Object {
          "DeploymentCircuitBreaker": Object {
            "Enable": true,
            "Rollback": true,
          },
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "DeploymentController": Object {
          "Type": "ECS",
        },
        "EnableECSManagedTags": true,
        "LaunchType": "FARGATE",
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "AuthSvcSecurityGroup71415F29",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Array [
              Object {
                "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
              },
              Object {
                "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
              },
            ],
          },
        },
        "PropagateTags": "SERVICE",
        "ServiceRegistries": Array [
          Object {
            "ContainerName": "app",
            "ContainerPort": 9999,
            "RegistryArn": Object {
              "Fn::GetAtt": Array [
                "AuthSvcCloudmapService85C22E54",
                "Arn",
              ],
            },
          },
        ],
        "TaskDefinition": Object {
          "Ref": "AuthTaskDefinitionDBEE261E",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "AuthSvcTaskCountTarget3EF5C75D": Object {
      "Properties": Object {
        "MaxCapacity": 20,
        "MinCapacity": 1,
        "ResourceId": Object {
          "Fn::Join": Array [
            "",
            Array [
              "service/",
              Object {
                "Ref": "ClusterEB0386A7",
              },
              "/",
              Object {
                "Fn::GetAtt": Array [
                  "AuthSvcServiceDAF53F1D",
                  "Name",
                ],
              },
            ],
          ],
        },
        "RoleARN": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":iam::",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService",
            ],
          ],
        },
        "ScalableDimension": "ecs:service:DesiredCount",
        "ServiceNamespace": "ecs",
      },
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
    },
    "AuthSvcTaskCountTargetScaleOnCpuABE2CBF4": Object {
      "Properties": Object {
        "PolicyName": "SupabasegraphqlAuthSvcTaskCountTargetScaleOnCpu37E65F50",
        "PolicyType": "TargetTrackingScaling",
        "ScalingTargetId": Object {
          "Ref": "AuthSvcTaskCountTarget3EF5C75D",
        },
        "TargetTrackingScalingPolicyConfiguration": Object {
          "PredefinedMetricSpecification": Object {
            "PredefinedMetricType": "ECSServiceAverageCPUUtilization",
          },
          "ScaleInCooldown": 60,
          "ScaleOutCooldown": 60,
          "TargetValue": 50,
        },
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
    },
    "AuthTaskDefinitionDBEE261E": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "Environment": Array [
              Object {
                "Name": "GOTRUE_SITE_URL",
                "Value": Object {
                  "Ref": "SiteUrlParameter",
                },
              },
              Object {
                "Name": "GOTRUE_URI_ALLOW_LIST",
                "Value": Object {
                  "Ref": "RedirectUrlsParameter",
                },
              },
              Object {
                "Name": "GOTRUE_DISABLE_SIGNUP",
                "Value": Object {
                  "Ref": "DisableSignupParameter",
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_EMAIL_ENABLED",
                "Value": "true",
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_PHONE_ENABLED",
                "Value": "false",
              },
              Object {
                "Name": "GOTRUE_RATE_LIMIT_EMAIL_SENT",
                "Value": "3600",
              },
              Object {
                "Name": "GOTRUE_PASSWORD_MIN_LENGTH",
                "Value": Object {
                  "Ref": "PasswordMinLengthParameter",
                },
              },
              Object {
                "Name": "GOTRUE_API_HOST",
                "Value": "0.0.0.0",
              },
              Object {
                "Name": "GOTRUE_API_PORT",
                "Value": "9999",
              },
              Object {
                "Name": "GOTRUE_DB_DRIVER",
                "Value": "postgres",
              },
              Object {
                "Name": "GOTRUE_JWT_EXP",
                "Value": Object {
                  "Ref": "JwtExpiryLimitParameter",
                },
              },
              Object {
                "Name": "GOTRUE_JWT_AUD",
                "Value": "authenticated",
              },
              Object {
                "Name": "GOTRUE_JWT_ADMIN_ROLES",
                "Value": "service_role",
              },
              Object {
                "Name": "GOTRUE_JWT_DEFAULT_GROUP_NAME",
                "Value": "authenticated",
              },
              Object {
                "Name": "GOTRUE_SMTP_ADMIN_EMAIL",
                "Value": Object {
                  "Ref": "SmtpAdminEmailParameter",
                },
              },
              Object {
                "Name": "GOTRUE_SMTP_HOST",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "email-smtp.",
                      Object {
                        "Ref": "SesRegionParameter",
                      },
                      ".amazonaws.com",
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_SMTP_PORT",
                "Value": "465",
              },
              Object {
                "Name": "GOTRUE_SMTP_SENDER_NAME",
                "Value": Object {
                  "Ref": "SmtpSenderNameParameter",
                },
              },
              Object {
                "Name": "GOTRUE_MAILER_AUTOCONFIRM",
                "Value": "false",
              },
              Object {
                "Name": "GOTRUE_MAILER_URLPATHS_INVITE",
                "Value": "/auth/v1/verify",
              },
              Object {
                "Name": "GOTRUE_MAILER_URLPATHS_CONFIRMATION",
                "Value": "/auth/v1/verify",
              },
              Object {
                "Name": "GOTRUE_MAILER_URLPATHS_RECOVERY",
                "Value": "/auth/v1/verify",
              },
              Object {
                "Name": "GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE",
                "Value": "/auth/v1/verify",
              },
              Object {
                "Name": "GOTRUE_SMS_AUTOCONFIRM",
                "Value": "true",
              },
              Object {
                "Name": "API_EXTERNAL_URL",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "https://",
                      Object {
                        "Fn::GetAtt": Array [
                          "CDNDistributionD4FAE585",
                          "DomainName",
                        ],
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_GOOGLE_ENABLED",
                "Value": Object {
                  "Ref": "GoogleEnabledParameterC8D211C0",
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_GOOGLE_REDIRECT_URI",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "https://",
                      Object {
                        "Fn::GetAtt": Array [
                          "CDNDistributionD4FAE585",
                          "DomainName",
                        ],
                      },
                      "/auth/v1/callback",
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_FACEBOOK_ENABLED",
                "Value": Object {
                  "Ref": "FacebookEnabledParameter04E6667E",
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_FACEBOOK_REDIRECT_URI",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "https://",
                      Object {
                        "Fn::GetAtt": Array [
                          "CDNDistributionD4FAE585",
                          "DomainName",
                        ],
                      },
                      "/auth/v1/callback",
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_TWITTER_ENABLED",
                "Value": Object {
                  "Ref": "TwitterEnabledParameter355D114D",
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_TWITTER_REDIRECT_URI",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "https://",
                      Object {
                        "Fn::GetAtt": Array [
                          "CDNDistributionD4FAE585",
                          "DomainName",
                        ],
                      },
                      "/auth/v1/callback",
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_GITHUB_ENABLED",
                "Value": Object {
                  "Ref": "GitHubEnabledParameter04C9B675",
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_GITHUB_REDIRECT_URI",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "https://",
                      Object {
                        "Fn::GetAtt": Array [
                          "CDNDistributionD4FAE585",
                          "DomainName",
                        ],
                      },
                      "/auth/v1/callback",
                    ],
                  ],
                },
              },
            ],
            "Essential": true,
            "Image": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "public.ecr.aws/t3w2s2c9/gotrue:",
                  Object {
                    "Ref": "AuthApiVersionParameter",
                  },
                ],
              ],
            },
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "AuthLogs940C0551",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "Name": "app",
            "PortMappings": Array [
              Object {
                "ContainerPort": 9999,
                "Protocol": "tcp",
              },
            ],
            "Secrets": Array [
              Object {
                "Name": "GOTRUE_DB_DATABASE_URL",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "DatabaseauthUrlParameter27067EF6",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_JWT_SECRET",
                "ValueFrom": Object {
                  "Ref": "SupabaseJwtSecretFA404A75",
                },
              },
              Object {
                "Name": "GOTRUE_SMTP_USER",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "SupabaseMailSecret777E0288",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_SMTP_PASS",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "SupabaseMailSecret777E0288",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_GOOGLE_CLIENT_ID",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "GoogleClientIdF5AAE2C3",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_GOOGLE_SECRET",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "GoogleSecret3B43D818",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_FACEBOOK_CLIENT_ID",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "FacebookClientIdD49EC273",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_FACEBOOK_SECRET",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "FacebookSecret4142F291",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_TWITTER_CLIENT_ID",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "TwitterClientId11873110",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_TWITTER_SECRET",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "TwitterSecretA36121D0",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_GITHUB_CLIENT_ID",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "GitHubClientIdF139378A",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "GOTRUE_EXTERNAL_GITHUB_SECRET",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "GitHubSecret0C4A5322",
                      },
                    ],
                  ],
                },
              },
            ],
            "Ulimits": Array [
              Object {
                "HardLimit": 65536,
                "Name": "nofile",
                "SoftLimit": 65536,
              },
            ],
          },
        ],
        "Cpu": "1024",
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "AuthTaskDefinitionExecutionRole8B68B008",
            "Arn",
          ],
        },
        "Family": "SupabasegraphqlAuthTaskDefinition7270C36D",
        "Memory": "2048",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "RuntimePlatform": Object {
          "CpuArchitecture": "ARM64",
          "OperatingSystemFamily": "LINUX",
        },
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "AuthTaskDefinitionTaskRole0174181B",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "AuthTaskDefinitionExecutionRole8B68B008": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "AuthTaskDefinitionExecutionRoleDefaultPolicy2A4B4627": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "AuthLogs940C0551",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "DatabaseauthUrlParameter27067EF6",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "SupabaseJwtSecretFA404A75",
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "SupabaseMailSecret777E0288",
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "GoogleClientIdF5AAE2C3",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "GoogleSecret3B43D818",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "FacebookClientIdD49EC273",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "FacebookSecret4142F291",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "TwitterClientId11873110",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "TwitterSecretA36121D0",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "GitHubClientIdF139378A",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "GitHubSecret0C4A5322",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "AuthTaskDefinitionExecutionRoleDefaultPolicy2A4B4627",
        "Roles": Array [
          Object {
            "Ref": "AuthTaskDefinitionExecutionRole8B68B008",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "AuthTaskDefinitionTaskRole0174181B": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "Bucket83908E77": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
    },
    "CDNCreateWebAclFunction9B43907E": Object {
      "DependsOn": Array [
        "CDNCreateWebAclFunctionServiceRoleDefaultPolicyA68E2DE5",
        "CDNCreateWebAclFunctionServiceRole84967C6A",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "25e1868549f0ea6f4ff053e267112cab3e36f35158a348198200ba74ee8f96ac.zip",
        },
        "Description": "Supabase - Create WAF Web ACL function",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "CDNCreateWebAclFunctionServiceRole84967C6A",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
        "Timeout": 15,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CDNCreateWebAclFunctionServiceRole84967C6A": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CDNCreateWebAclFunctionServiceRoleDefaultPolicyA68E2DE5": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "wafv2:DeleteWebACL",
                "wafv2:GetWebACL",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":wafv2:us-east-1:",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":global/webacl/",
                    Object {
                      "Ref": "AWS::StackName",
                    },
                    "-*/*",
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "wafv2:CreateWebACL",
                "wafv2:UpdateWebACL",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":wafv2:us-east-1:",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":global/webacl/",
                      Object {
                        "Ref": "AWS::StackName",
                      },
                      "-*/*",
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":wafv2:us-east-1:",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":global/ipset/*/*",
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":wafv2:us-east-1:",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":global/managedruleset/*/*",
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":wafv2:us-east-1:",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":global/regexpatternset/*/*",
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":wafv2:us-east-1:",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":global/rulegroup/*/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CDNCreateWebAclFunctionServiceRoleDefaultPolicyA68E2DE5",
        "Roles": Array [
          Object {
            "Ref": "CDNCreateWebAclFunctionServiceRole84967C6A",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CDNDistributionD4FAE585": Object {
      "Properties": Object {
        "DistributionConfig": Object {
          "CacheBehaviors": Array [
            Object {
              "AllowedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
              "CachedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
              ],
              "Compress": true,
              "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
              "PathPattern": "*.css",
              "TargetOriginId": "SupabasegraphqlCDNDistributionOrigin1EA069F20",
              "ViewerProtocolPolicy": "redirect-to-https",
            },
            Object {
              "AllowedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
              "CachedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
              ],
              "Compress": true,
              "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
              "PathPattern": "*.png",
              "TargetOriginId": "SupabasegraphqlCDNDistributionOrigin1EA069F20",
              "ViewerProtocolPolicy": "redirect-to-https",
            },
            Object {
              "AllowedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
              "CachedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
              ],
              "Compress": true,
              "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
              "PathPattern": "*.jpg",
              "TargetOriginId": "SupabasegraphqlCDNDistributionOrigin1EA069F20",
              "ViewerProtocolPolicy": "redirect-to-https",
            },
            Object {
              "AllowedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
              "CachedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
              ],
              "Compress": true,
              "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
              "PathPattern": "*.jpeg",
              "TargetOriginId": "SupabasegraphqlCDNDistributionOrigin1EA069F20",
              "ViewerProtocolPolicy": "redirect-to-https",
            },
            Object {
              "AllowedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
              "CachedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
              ],
              "Compress": true,
              "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
              "PathPattern": "*.svg",
              "TargetOriginId": "SupabasegraphqlCDNDistributionOrigin1EA069F20",
              "ViewerProtocolPolicy": "redirect-to-https",
            },
            Object {
              "AllowedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
              "CachedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
              ],
              "Compress": true,
              "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
              "PathPattern": "*.woff",
              "TargetOriginId": "SupabasegraphqlCDNDistributionOrigin1EA069F20",
              "ViewerProtocolPolicy": "redirect-to-https",
            },
            Object {
              "AllowedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
              "CachedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
              ],
              "Compress": true,
              "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
              "PathPattern": "*.woff2",
              "TargetOriginId": "SupabasegraphqlCDNDistributionOrigin1EA069F20",
              "ViewerProtocolPolicy": "redirect-to-https",
            },
            Object {
              "AllowedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
              "CachedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
              ],
              "Compress": true,
              "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
              "PathPattern": "*.js",
              "TargetOriginId": "SupabasegraphqlCDNDistributionOrigin1EA069F20",
              "ViewerProtocolPolicy": "redirect-to-https",
            },
          ],
          "Comment": "Supabase - CDN",
          "CustomErrorResponses": Array [
            Object {
              "ErrorCachingMinTTL": 10,
              "ErrorCode": 500,
            },
            Object {
              "ErrorCachingMinTTL": 10,
              "ErrorCode": 501,
            },
            Object {
              "ErrorCachingMinTTL": 10,
              "ErrorCode": 502,
            },
            Object {
              "ErrorCachingMinTTL": 10,
              "ErrorCode": 503,
            },
            Object {
              "ErrorCachingMinTTL": 10,
              "ErrorCode": 504,
            },
          ],
          "DefaultCacheBehavior": Object {
            "AllowedMethods": Array [
              "GET",
              "HEAD",
              "OPTIONS",
              "PUT",
              "PATCH",
              "POST",
              "DELETE",
            ],
            "CachePolicyId": "4135ea2d-6df8-44a3-9df3-4b5a84be39ad",
            "Compress": true,
            "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
            "TargetOriginId": "SupabasegraphqlCDNDistributionOrigin1EA069F20",
            "ViewerProtocolPolicy": "redirect-to-https",
          },
          "Enabled": true,
          "HttpVersion": "http2and3",
          "IPV6Enabled": true,
          "Origins": Array [
            Object {
              "CustomOriginConfig": Object {
                "OriginProtocolPolicy": "http-only",
                "OriginSSLProtocols": Array [
                  "TLSv1.2",
                ],
              },
              "DomainName": Object {
                "Fn::GetAtt": Array [
                  "KongLoadBalancerD341ED7C",
                  "DNSName",
                ],
              },
              "Id": "SupabasegraphqlCDNDistributionOrigin1EA069F20",
            },
          ],
          "WebACLId": Object {
            "Fn::GetAtt": Array [
              "CDNWebAcl7B4F8CB2",
              "Arn",
            ],
          },
        },
      },
      "Type": "AWS::CloudFront::Distribution",
    },
    "CDNWebAcl7B4F8CB2": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "DefaultAction": Object {
          "Allow": Object {},
        },
        "Description": "Web ACL for self-hosted Supabase",
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AWS::StackName",
              },
              "-CDN-WebAcl",
            ],
          ],
        },
        "Rules": Array [
          Object {
            "Name": "AWS-AWSManagedRulesAmazonIpReputationList",
            "OverrideAction": Object {
              "None": Object {},
            },
            "Priority": 0,
            "Statement": Object {
              "ManagedRuleGroupStatement": Object {
                "Name": "AWSManagedRulesAmazonIpReputationList",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": Object {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "AWS-AWSManagedRulesAmazonIpReputationList",
              "SampledRequestsEnabled": true,
            },
          },
          Object {
            "Name": "AWS-AWSManagedRulesKnownBadInputsRuleSet",
            "OverrideAction": Object {
              "None": Object {},
            },
            "Priority": 1,
            "Statement": Object {
              "ManagedRuleGroupStatement": Object {
                "Name": "AWSManagedRulesKnownBadInputsRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": Object {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "AWS-AWSManagedRulesKnownBadInputsRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
          Object {
            "Name": "AWS-AWSManagedRulesSQLiRuleSet",
            "OverrideAction": Object {
              "None": Object {},
            },
            "Priority": 2,
            "Statement": Object {
              "ManagedRuleGroupStatement": Object {
                "Name": "AWSManagedRulesSQLiRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": Object {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "AWS-AWSManagedRulesSQLiRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
          Object {
            "Name": "AWS-AWSManagedRulesBotControlRuleSet",
            "OverrideAction": Object {
              "None": Object {},
            },
            "Priority": 3,
            "Statement": Object {
              "ManagedRuleGroupStatement": Object {
                "Name": "AWSManagedRulesBotControlRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": Object {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "AWS-AWSManagedRulesBotControlRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
          Object {
            "Name": "AWS-AWSManagedRulesATPRuleSet",
            "OverrideAction": Object {
              "None": Object {},
            },
            "Priority": 4,
            "Statement": Object {
              "ManagedRuleGroupStatement": Object {
                "ExcludedRules": Array [
                  Object {
                    "Name": "SignalMissingCredential",
                  },
                ],
                "ManagedRuleGroupConfigs": Array [
                  Object {
                    "LoginPath": "/auth/v1/token",
                  },
                  Object {
                    "PayloadType": "JSON",
                  },
                  Object {
                    "UsernameField": Object {
                      "Identifier": "/email",
                    },
                  },
                  Object {
                    "PasswordField": Object {
                      "Identifier": "/password",
                    },
                  },
                ],
                "Name": "AWSManagedRulesATPRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": Object {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "AWS-AWSManagedRulesATPRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
        ],
        "Scope": "CLOUDFRONT",
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "CDNWebAclProviderframeworkonEvent0566E709",
            "Arn",
          ],
        },
        "VisibilityConfig": Object {
          "CloudWatchMetricsEnabled": true,
          "MetricName": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Ref": "AWS::StackName",
                },
                "-CDN-WebAcl",
              ],
            ],
          },
          "SampledRequestsEnabled": true,
        },
      },
      "Type": "Custom::WebACL",
      "UpdateReplacePolicy": "Delete",
    },
    "CDNWebAclProviderframeworkonEvent0566E709": Object {
      "DependsOn": Array [
        "CDNWebAclProviderframeworkonEventServiceRoleDefaultPolicy83D0FB7A",
        "CDNWebAclProviderframeworkonEventServiceRoleF03F76DB",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "e7c95e1a12d903d913ebdd526c735f1ac58b2024882a5562110221fe685ebe85.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (Supabase-graphql/CDN/WebAclProvider)",
        "Environment": Object {
          "Variables": Object {
            "USER_ON_EVENT_FUNCTION_ARN": Object {
              "Fn::GetAtt": Array [
                "CDNCreateWebAclFunction9B43907E",
                "Arn",
              ],
            },
          },
        },
        "Handler": "framework.onEvent",
        "Role": Object {
          "Fn::GetAtt": Array [
            "CDNWebAclProviderframeworkonEventServiceRoleF03F76DB",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CDNWebAclProviderframeworkonEventServiceRoleDefaultPolicy83D0FB7A": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "CDNCreateWebAclFunction9B43907E",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "CDNCreateWebAclFunction9B43907E",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CDNWebAclProviderframeworkonEventServiceRoleDefaultPolicy83D0FB7A",
        "Roles": Array [
          Object {
            "Ref": "CDNWebAclProviderframeworkonEventServiceRoleF03F76DB",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CDNWebAclProviderframeworkonEventServiceRoleF03F76DB": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudFrontManagedPrefixList4E30A88B": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "CloudFrontManagedPrefixListCustomResourcePolicy18F5EEC5",
      ],
      "Properties": Object {
        "Create": "{\\"service\\":\\"EC2\\",\\"action\\":\\"describeManagedPrefixLists\\",\\"parameters\\":{\\"Filters\\":[{\\"Name\\":\\"prefix-list-name\\",\\"Values\\":[\\"com.amazonaws.global.cloudfront.origin-facing\\"]}]},\\"physicalResourceId\\":{\\"responsePath\\":\\"PrefixLists.0.PrefixListId\\"}}",
        "InstallLatestAwsSdk": true,
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "AWS679f53fac002430cb0da5b7982bd22872D164C4C",
            "Arn",
          ],
        },
      },
      "Type": "Custom::ManagedPrefixList",
      "UpdateReplacePolicy": "Delete",
    },
    "CloudFrontManagedPrefixListCustomResourcePolicy18F5EEC5": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "ec2:DescribeManagedPrefixLists",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudFrontManagedPrefixListCustomResourcePolicy18F5EEC5",
        "Roles": Array [
          Object {
            "Ref": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "Cluster3DA9CCBA": Object {
      "Properties": Object {
        "CapacityProviders": Array [
          "FARGATE",
          "FARGATE_SPOT",
        ],
        "Cluster": Object {
          "Ref": "ClusterEB0386A7",
        },
        "DefaultCapacityProviderStrategy": Array [],
      },
      "Type": "AWS::ECS::ClusterCapacityProviderAssociations",
    },
    "ClusterDefaultServiceDiscoveryNamespaceC336F9B4": Object {
      "Properties": Object {
        "Name": "supabase.local",
        "Vpc": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::ServiceDiscovery::PrivateDnsNamespace",
    },
    "ClusterEB0386A7": Object {
      "Properties": Object {
        "ClusterSettings": Array [
          Object {
            "Name": "containerInsights",
            "Value": "disabled",
          },
        ],
      },
      "Type": "AWS::ECS::Cluster",
    },
    "DatabaseB269D8BB": Object {
      "DeletionPolicy": "Snapshot",
      "Properties": Object {
        "CopyTagsToSnapshot": true,
        "DBClusterParameterGroupName": Object {
          "Ref": "ParameterGroup5E32DECB",
        },
        "DBSubnetGroupName": Object {
          "Ref": "DatabaseSubnets56F17B9A",
        },
        "DatabaseName": "postgres",
        "Engine": "aurora-postgresql",
        "EngineVersion": "14.3",
        "MasterUserPassword": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{{resolve:secretsmanager:",
              Object {
                "Ref": "SupabasegraphqlDatabaseSecret4D5D66886b2eb8af71bef5c6813259b78dc271d3",
              },
              ":SecretString:password::}}",
            ],
          ],
        },
        "MasterUsername": "supabase_admin",
        "Port": 5432,
        "StorageEncrypted": true,
        "VpcSecurityGroupIds": Array [
          Object {
            "Fn::GetAtt": Array [
              "DatabaseSecurityGroup5C91FDCB",
              "GroupId",
            ],
          },
        ],
      },
      "Type": "AWS::RDS::DBCluster",
      "UpdateReplacePolicy": "Snapshot",
    },
    "DatabaseDbScalingConfigureA53A665A": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "DatabaseDbScalingConfigureCustomResourcePolicy8F6D2C0B",
      ],
      "Properties": Object {
        "Create": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{\\"service\\":\\"RDS\\",\\"action\\":\\"modifyDBCluster\\",\\"parameters\\":{\\"DBClusterIdentifier\\":\\"",
              Object {
                "Ref": "DatabaseB269D8BB",
              },
              "\\",\\"ServerlessV2ScalingConfiguration\\":{\\"MinCapacity\\":0.5,\\"MaxCapacity\\":32}},\\"physicalResourceId\\":{\\"id\\":\\"",
              Object {
                "Ref": "DatabaseB269D8BB",
              },
              "\\"}}",
            ],
          ],
        },
        "InstallLatestAwsSdk": true,
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "AWS679f53fac002430cb0da5b7982bd22872D164C4C",
            "Arn",
          ],
        },
        "Update": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{\\"service\\":\\"RDS\\",\\"action\\":\\"modifyDBCluster\\",\\"parameters\\":{\\"DBClusterIdentifier\\":\\"",
              Object {
                "Ref": "DatabaseB269D8BB",
              },
              "\\",\\"ServerlessV2ScalingConfiguration\\":{\\"MinCapacity\\":0.5,\\"MaxCapacity\\":32}},\\"physicalResourceId\\":{\\"id\\":\\"",
              Object {
                "Ref": "DatabaseB269D8BB",
              },
              "\\"}}",
            ],
          ],
        },
      },
      "Type": "Custom::AuroraServerlessV2ScalingConfiguration",
      "UpdateReplacePolicy": "Delete",
    },
    "DatabaseDbScalingConfigureCustomResourcePolicy8F6D2C0B": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "rds:ModifyDBCluster",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "DatabaseDbScalingConfigureCustomResourcePolicy8F6D2C0B",
        "Roles": Array [
          Object {
            "Ref": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "DatabaseInit6CD697C3": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "DatabaseInstance1844F58FD",
      ],
      "Properties": Object {
        "Hostname": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Address",
          ],
        },
        "SecretId": Object {
          "Ref": "DatabaseSecretAttachmentE5D1B020",
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "DatabaseInitProviderframeworkonEventE5DC022A",
            "Arn",
          ],
        },
      },
      "Type": "Custom::SupabaseDatabaseInit",
      "UpdateReplacePolicy": "Delete",
    },
    "DatabaseInitFunctionC94D0413": Object {
      "DependsOn": Array [
        "DatabaseInitFunctionServiceRoleDefaultPolicyE8E6FF4E",
        "DatabaseInitFunctionServiceRole8CD61C4B",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "8596f13703aa5f15379180c66371178ebc06977f4f9242bc89ea139bb3b6ae5e.zip",
        },
        "Description": "Supabase - Database init function",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "DatabaseInitFunctionServiceRole8CD61C4B",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
        "Timeout": 60,
        "VpcConfig": Object {
          "SecurityGroupIds": Array [
            Object {
              "Fn::GetAtt": Array [
                "DatabaseInitFunctionSecurityGroupAC823144",
                "GroupId",
              ],
            },
          ],
          "SubnetIds": Array [
            Object {
              "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
            },
            Object {
              "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "DatabaseInitFunctionSecurityGroupAC823144": Object {
      "Properties": Object {
        "GroupDescription": "Automatic security group for Lambda Function SupabasegraphqlDatabaseInitFunction8324DC10",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "DatabaseInitFunctionServiceRole8CD61C4B": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "DatabaseInitFunctionServiceRoleDefaultPolicyE8E6FF4E": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "DatabaseSecretAttachmentE5D1B020",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "DatabaseInitFunctionServiceRoleDefaultPolicyE8E6FF4E",
        "Roles": Array [
          Object {
            "Ref": "DatabaseInitFunctionServiceRole8CD61C4B",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "DatabaseInitProviderframeworkonEventE5DC022A": Object {
      "DependsOn": Array [
        "DatabaseInitProviderframeworkonEventServiceRoleDefaultPolicy7FB834D6",
        "DatabaseInitProviderframeworkonEventServiceRoleF32E57C9",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "e7c95e1a12d903d913ebdd526c735f1ac58b2024882a5562110221fe685ebe85.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (Supabase-graphql/Database/InitProvider)",
        "Environment": Object {
          "Variables": Object {
            "USER_ON_EVENT_FUNCTION_ARN": Object {
              "Fn::GetAtt": Array [
                "DatabaseInitFunctionC94D0413",
                "Arn",
              ],
            },
          },
        },
        "Handler": "framework.onEvent",
        "Role": Object {
          "Fn::GetAtt": Array [
            "DatabaseInitProviderframeworkonEventServiceRoleF32E57C9",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "DatabaseInitProviderframeworkonEventServiceRoleDefaultPolicy7FB834D6": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "DatabaseInitFunctionC94D0413",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "DatabaseInitFunctionC94D0413",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "DatabaseInitProviderframeworkonEventServiceRoleDefaultPolicy7FB834D6",
        "Roles": Array [
          Object {
            "Ref": "DatabaseInitProviderframeworkonEventServiceRoleF32E57C9",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "DatabaseInitProviderframeworkonEventServiceRoleF32E57C9": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "DatabaseInstance1844F58FD": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "DatabaseDbScalingConfigureCustomResourcePolicy8F6D2C0B",
        "DatabaseDbScalingConfigureA53A665A",
        "VPCPrivateSubnet1DefaultRouteAE1D6490",
        "VPCPrivateSubnet2DefaultRouteF4F5CFD2",
      ],
      "Properties": Object {
        "DBClusterIdentifier": Object {
          "Ref": "DatabaseB269D8BB",
        },
        "DBInstanceClass": "db.serverless",
        "DBSubnetGroupName": Object {
          "Ref": "DatabaseSubnets56F17B9A",
        },
        "EnablePerformanceInsights": true,
        "Engine": "aurora-postgresql",
        "EngineVersion": "14.3",
        "PerformanceInsightsRetentionPeriod": 7,
      },
      "Type": "AWS::RDS::DBInstance",
      "UpdateReplacePolicy": "Delete",
    },
    "DatabaseInstance2AA380DEE": Object {
      "Condition": "DatabaseMultiAzCondition82AA721B",
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "DatabaseDbScalingConfigureCustomResourcePolicy8F6D2C0B",
        "DatabaseDbScalingConfigureA53A665A",
        "VPCPrivateSubnet1DefaultRouteAE1D6490",
        "VPCPrivateSubnet2DefaultRouteF4F5CFD2",
      ],
      "Properties": Object {
        "DBClusterIdentifier": Object {
          "Ref": "DatabaseB269D8BB",
        },
        "DBInstanceClass": "db.serverless",
        "DBSubnetGroupName": Object {
          "Ref": "DatabaseSubnets56F17B9A",
        },
        "EnablePerformanceInsights": true,
        "Engine": "aurora-postgresql",
        "EngineVersion": "14.3",
        "PerformanceInsightsRetentionPeriod": 7,
      },
      "Type": "AWS::RDS::DBInstance",
      "UpdateReplacePolicy": "Delete",
    },
    "DatabaseRotationSecurityGroup8E1B7C66": Object {
      "Properties": Object {
        "GroupDescription": "Supabase-graphql/Database/RotationSecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "DatabaseSecretAttachmentE5D1B020": Object {
      "Properties": Object {
        "SecretId": Object {
          "Ref": "SupabasegraphqlDatabaseSecret4D5D66886b2eb8af71bef5c6813259b78dc271d3",
        },
        "TargetId": Object {
          "Ref": "DatabaseB269D8BB",
        },
        "TargetType": "AWS::RDS::DBCluster",
      },
      "Type": "AWS::SecretsManager::SecretTargetAttachment",
    },
    "DatabaseSecretAttachmentPolicy5ACFE6CA": Object {
      "Properties": Object {
        "ResourcePolicy": Object {
          "Statement": Array [
            Object {
              "Action": "secretsmanager:DeleteSecret",
              "Effect": "Deny",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "SecretId": Object {
          "Ref": "DatabaseSecretAttachmentE5D1B020",
        },
      },
      "Type": "AWS::SecretsManager::ResourcePolicy",
    },
    "DatabaseSecretAttachmentRotation5592F5B2": Object {
      "Properties": Object {
        "HostedRotationLambda": Object {
          "ExcludeCharacters": "%+~\`#$&*()|[]{}:;<>?!'/@\\"\\\\=^",
          "RotationLambdaName": "SupabaseDatabaseSecretRotationFunction",
          "RotationType": "PostgreSQLSingleUser",
          "VpcSecurityGroupIds": Object {
            "Fn::GetAtt": Array [
              "DatabaseRotationSecurityGroup8E1B7C66",
              "GroupId",
            ],
          },
          "VpcSubnetIds": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
                },
                ",",
                Object {
                  "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
                },
              ],
            ],
          },
        },
        "RotationRules": Object {
          "AutomaticallyAfterDays": 30,
        },
        "SecretId": Object {
          "Ref": "DatabaseSecretAttachmentE5D1B020",
        },
      },
      "Type": "AWS::SecretsManager::RotationSchedule",
    },
    "DatabaseSecretChangeRule472D79D9": Object {
      "Properties": Object {
        "Description": "Supabase - Update parameter store, when DB secret rotated",
        "EventPattern": Object {
          "detail": Object {
            "additionalEventData": Object {
              "SecretId": Array [
                Object {
                  "Ref": "DatabaseSecretAttachmentE5D1B020",
                },
              ],
            },
            "eventName": Array [
              "RotationSucceeded",
            ],
          },
          "source": Array [
            "aws.secretsmanager",
          ],
        },
        "State": "ENABLED",
        "Targets": Array [
          Object {
            "Arn": Object {
              "Fn::GetAtt": Array [
                "DatabaseSyncSecretFunction60FEB86F",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "DatabaseSecretChangeRuleAllowEventRuleSupabasegraphqlDatabaseSyncSecretFunction990255FF81AE1FF9": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DatabaseSyncSecretFunction60FEB86F",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": Object {
          "Fn::GetAtt": Array [
            "DatabaseSecretChangeRule472D79D9",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DatabaseSecurityGroup5C91FDCB": Object {
      "Properties": Object {
        "GroupDescription": "RDS security group",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "DatabaseSecurityGroupfromSupabasegraphqlAuthSvcSecurityGroup340606E2IndirectPort10029689": Object {
      "Properties": Object {
        "Description": "from SupabasegraphqlAuthSvcSecurityGroup340606E2:{IndirectPort}",
        "FromPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Port",
          ],
        },
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "DatabaseSecurityGroup5C91FDCB",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "AuthSvcSecurityGroup71415F29",
            "GroupId",
          ],
        },
        "ToPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "DatabaseSecurityGroupfromSupabasegraphqlDatabaseInitFunctionSecurityGroupCDD39207IndirectPortFFF85005": Object {
      "Properties": Object {
        "Description": "from SupabasegraphqlDatabaseInitFunctionSecurityGroupCDD39207:{IndirectPort}",
        "FromPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Port",
          ],
        },
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "DatabaseSecurityGroup5C91FDCB",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "DatabaseInitFunctionSecurityGroupAC823144",
            "GroupId",
          ],
        },
        "ToPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "DatabaseSecurityGroupfromSupabasegraphqlDatabaseRotationSecurityGroup4F30148AIndirectPort80572281": Object {
      "Properties": Object {
        "Description": "Lambda to rotate secrets",
        "FromPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Port",
          ],
        },
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "DatabaseSecurityGroup5C91FDCB",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "DatabaseRotationSecurityGroup8E1B7C66",
            "GroupId",
          ],
        },
        "ToPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "DatabaseSecurityGroupfromSupabasegraphqlGraphQLSvcSecurityGroup43041940IndirectPortB0C4E464": Object {
      "Properties": Object {
        "Description": "from SupabasegraphqlGraphQLSvcSecurityGroup43041940:{IndirectPort}",
        "FromPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Port",
          ],
        },
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "DatabaseSecurityGroup5C91FDCB",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "GraphQLSvcSecurityGroupE9953241",
            "GroupId",
          ],
        },
        "ToPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "DatabaseSecurityGroupfromSupabasegraphqlMetaSvcSecurityGroupAA57A518IndirectPort656E1ECC": Object {
      "Properties": Object {
        "Description": "from SupabasegraphqlMetaSvcSecurityGroupAA57A518:{IndirectPort}",
        "FromPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Port",
          ],
        },
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "DatabaseSecurityGroup5C91FDCB",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "MetaSvcSecurityGroup28D90BB4",
            "GroupId",
          ],
        },
        "ToPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "DatabaseSecurityGroupfromSupabasegraphqlRealtimeSvcSecurityGroup58358C8CIndirectPort6BCE088D": Object {
      "Properties": Object {
        "Description": "from SupabasegraphqlRealtimeSvcSecurityGroup58358C8C:{IndirectPort}",
        "FromPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Port",
          ],
        },
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "DatabaseSecurityGroup5C91FDCB",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "RealtimeSvcSecurityGroup15A1991B",
            "GroupId",
          ],
        },
        "ToPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "DatabaseSecurityGroupfromSupabasegraphqlRestSvcSecurityGroupA5385D73IndirectPort11EDD31D": Object {
      "Properties": Object {
        "Description": "from SupabasegraphqlRestSvcSecurityGroupA5385D73:{IndirectPort}",
        "FromPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Port",
          ],
        },
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "DatabaseSecurityGroup5C91FDCB",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "RestSvcSecurityGroup4F37982C",
            "GroupId",
          ],
        },
        "ToPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "DatabaseSecurityGroupfromSupabasegraphqlStorageSvcSecurityGroup634A37C8IndirectPort8C618100": Object {
      "Properties": Object {
        "Description": "from SupabasegraphqlStorageSvcSecurityGroup634A37C8:{IndirectPort}",
        "FromPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Port",
          ],
        },
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "DatabaseSecurityGroup5C91FDCB",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "StorageSvcSecurityGroup134E6883",
            "GroupId",
          ],
        },
        "ToPort": Object {
          "Fn::GetAtt": Array [
            "DatabaseB269D8BB",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "DatabaseSubnets56F17B9A": Object {
      "Properties": Object {
        "DBSubnetGroupDescription": "Subnets for Database database",
        "SubnetIds": Array [
          Object {
            "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
          },
          Object {
            "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
          },
        ],
      },
      "Type": "AWS::RDS::DBSubnetGroup",
    },
    "DatabaseSyncSecretFunction60FEB86F": Object {
      "DependsOn": Array [
        "DatabaseSyncSecretFunctionServiceRoleDefaultPolicy5F9B6AA1",
        "DatabaseSyncSecretFunctionServiceRole189FFC3D",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "592c9d675ff833cd183fb49d128d1d1f8202742d5997b530ef384abfbd890c93.zip",
        },
        "Description": "Supabase - Sync DB secret to parameter store",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "URL_PARAMETER_NAME": Object {
              "Ref": "DatabaseUrlParameter81075D88",
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "DatabaseSyncSecretFunctionServiceRole189FFC3D",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "DatabaseSyncSecretFunctionServiceRole189FFC3D": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "DatabaseSyncSecretFunctionServiceRoleDefaultPolicy5F9B6AA1": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "ssm:PutParameter",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "DatabaseUrlParameter81075D88",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": "ssm:PutParameter",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "DatabaseauthUrlParameter27067EF6",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "DatabaseSecretAttachmentE5D1B020",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "DatabaseSyncSecretFunctionServiceRoleDefaultPolicy5F9B6AA1",
        "Roles": Array [
          Object {
            "Ref": "DatabaseSyncSecretFunctionServiceRole189FFC3D",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "DatabaseUrlParameter81075D88": Object {
      "Properties": Object {
        "Description": "The standard connection PostgreSQL URI format.",
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/",
              Object {
                "Ref": "AWS::StackName",
              },
              "/Database/Url",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Fn::Join": Array [
            "",
            Array [
              "postgres://{{resolve:secretsmanager:",
              Object {
                "Ref": "DatabaseSecretAttachmentE5D1B020",
              },
              ":SecretString:username::}}:{{resolve:secretsmanager:",
              Object {
                "Ref": "DatabaseSecretAttachmentE5D1B020",
              },
              ":SecretString:password::}}@{{resolve:secretsmanager:",
              Object {
                "Ref": "DatabaseSecretAttachmentE5D1B020",
              },
              ":SecretString:host::}}:{{resolve:secretsmanager:",
              Object {
                "Ref": "DatabaseSecretAttachmentE5D1B020",
              },
              ":SecretString:port::}}/{{resolve:secretsmanager:",
              Object {
                "Ref": "DatabaseSecretAttachmentE5D1B020",
              },
              ":SecretString:dbname::}}",
            ],
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "DatabaseauthUrlParameter27067EF6": Object {
      "Properties": Object {
        "Description": "The standard connection PostgreSQL URI format with \\"?search_path=auth\\".",
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/",
              Object {
                "Ref": "AWS::StackName",
              },
              "/Database/Url/search_path/auth",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Fn::Join": Array [
            "",
            Array [
              "postgres://{{resolve:secretsmanager:",
              Object {
                "Ref": "DatabaseSecretAttachmentE5D1B020",
              },
              ":SecretString:username::}}:{{resolve:secretsmanager:",
              Object {
                "Ref": "DatabaseSecretAttachmentE5D1B020",
              },
              ":SecretString:password::}}@{{resolve:secretsmanager:",
              Object {
                "Ref": "DatabaseSecretAttachmentE5D1B020",
              },
              ":SecretString:host::}}:{{resolve:secretsmanager:",
              Object {
                "Ref": "DatabaseSecretAttachmentE5D1B020",
              },
              ":SecretString:port::}}/{{resolve:secretsmanager:",
              Object {
                "Ref": "DatabaseSecretAttachmentE5D1B020",
              },
              ":SecretString:dbname::}}?search_path=auth",
            ],
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "FacebookClientIdD49EC273": Object {
      "Properties": Object {
        "Description": "The OAuth2 Client ID registered with the external provider.",
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/",
              Object {
                "Ref": "AWS::StackName",
              },
              "/Auth/External/Facebook/ClientId",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Ref": "FacebookClientIdParameterF8F9E3CB",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "FacebookSecret4142F291": Object {
      "Properties": Object {
        "Description": "The OAuth2 Client Secret provided by the external provider when you registered.",
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/",
              Object {
                "Ref": "AWS::StackName",
              },
              "/Auth/External/Facebook/Secret",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Ref": "FacebookSecretParameter0FEABC80",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "GitHubClientIdF139378A": Object {
      "Properties": Object {
        "Description": "The OAuth2 Client ID registered with the external provider.",
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/",
              Object {
                "Ref": "AWS::StackName",
              },
              "/Auth/External/GitHub/ClientId",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Ref": "GitHubClientIdParameterEB9B453C",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "GitHubSecret0C4A5322": Object {
      "Properties": Object {
        "Description": "The OAuth2 Client Secret provided by the external provider when you registered.",
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/",
              Object {
                "Ref": "AWS::StackName",
              },
              "/Auth/External/GitHub/Secret",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Ref": "GitHubSecretParameter60DD8371",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "GoogleClientIdF5AAE2C3": Object {
      "Properties": Object {
        "Description": "The OAuth2 Client ID registered with the external provider.",
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/",
              Object {
                "Ref": "AWS::StackName",
              },
              "/Auth/External/Google/ClientId",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Ref": "GoogleClientIdParameter10AB1CB7",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "GoogleSecret3B43D818": Object {
      "Properties": Object {
        "Description": "The OAuth2 Client Secret provided by the external provider when you registered.",
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/",
              Object {
                "Ref": "AWS::StackName",
              },
              "/Auth/External/Google/Secret",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Ref": "GoogleSecretParameterD567D187",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "GraphQLForceDeployFunction73A535D2": Object {
      "DependsOn": Array [
        "GraphQLForceDeployFunctionServiceRoleDefaultPolicyA35F4C15",
        "GraphQLForceDeployFunctionServiceRole6A4D2B60",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "8d678058f0eb8312a176152d7bdc2392d3a97980a0b4c6a5af633d405b11038b.zip",
        },
        "Description": "Supabase - Force deploy ECS service function",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "ECS_CLUSTER_NAME": Object {
              "Ref": "ClusterEB0386A7",
            },
            "ECS_SERVICE_NAME": Object {
              "Fn::GetAtt": Array [
                "GraphQLSvcService25FCACDF",
                "Name",
              ],
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "GraphQLForceDeployFunctionServiceRole6A4D2B60",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "GraphQLForceDeployFunctionServiceRole6A4D2B60": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "GraphQLForceDeployFunctionServiceRoleDefaultPolicyA35F4C15": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "ecs:UpdateService",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "GraphQLSvcService25FCACDF",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "GraphQLForceDeployFunctionServiceRoleDefaultPolicyA35F4C15",
        "Roles": Array [
          Object {
            "Ref": "GraphQLForceDeployFunctionServiceRole6A4D2B60",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "GraphQLLogsAACD57ED": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "RetentionInDays": 30,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "GraphQLSvcCloudmapService7A27F6DE": Object {
      "Properties": Object {
        "DnsConfig": Object {
          "DnsRecords": Array [
            Object {
              "TTL": 10,
              "Type": "SRV",
            },
            Object {
              "TTL": 10,
              "Type": "A",
            },
          ],
          "NamespaceId": Object {
            "Fn::GetAtt": Array [
              "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
              "Id",
            ],
          },
          "RoutingPolicy": "MULTIVALUE",
        },
        "HealthCheckCustomConfig": Object {
          "FailureThreshold": 1,
        },
        "Name": "graphql",
        "NamespaceId": Object {
          "Fn::GetAtt": Array [
            "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
            "Id",
          ],
        },
      },
      "Type": "AWS::ServiceDiscovery::Service",
    },
    "GraphQLSvcSecurityGroupE9953241": Object {
      "Properties": Object {
        "GroupDescription": "Supabase-graphql/GraphQL/Svc/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "GraphQLSvcSecurityGroupfromSupabasegraphqlKongSvcSecurityGroup65C63AF45000C194287F": Object {
      "Properties": Object {
        "Description": "from SupabasegraphqlKongSvcSecurityGroup65C63AF4:5000",
        "FromPort": 5000,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "GraphQLSvcSecurityGroupE9953241",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "KongSvcSecurityGroupD458B522",
            "GroupId",
          ],
        },
        "ToPort": 5000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "GraphQLSvcService25FCACDF": Object {
      "DependsOn": Array [
        "DatabaseInstance1844F58FD",
      ],
      "Properties": Object {
        "Cluster": Object {
          "Ref": "ClusterEB0386A7",
        },
        "DeploymentConfiguration": Object {
          "DeploymentCircuitBreaker": Object {
            "Enable": true,
            "Rollback": true,
          },
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "DeploymentController": Object {
          "Type": "ECS",
        },
        "EnableECSManagedTags": true,
        "LaunchType": "FARGATE",
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "GraphQLSvcSecurityGroupE9953241",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Array [
              Object {
                "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
              },
              Object {
                "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
              },
            ],
          },
        },
        "PropagateTags": "SERVICE",
        "ServiceRegistries": Array [
          Object {
            "ContainerName": "app",
            "ContainerPort": 5000,
            "RegistryArn": Object {
              "Fn::GetAtt": Array [
                "GraphQLSvcCloudmapService7A27F6DE",
                "Arn",
              ],
            },
          },
        ],
        "TaskDefinition": Object {
          "Ref": "GraphQLTaskDefinition38339BB3",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "GraphQLSvcTaskCountTarget97AE0A00": Object {
      "Properties": Object {
        "MaxCapacity": 20,
        "MinCapacity": 1,
        "ResourceId": Object {
          "Fn::Join": Array [
            "",
            Array [
              "service/",
              Object {
                "Ref": "ClusterEB0386A7",
              },
              "/",
              Object {
                "Fn::GetAtt": Array [
                  "GraphQLSvcService25FCACDF",
                  "Name",
                ],
              },
            ],
          ],
        },
        "RoleARN": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":iam::",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService",
            ],
          ],
        },
        "ScalableDimension": "ecs:service:DesiredCount",
        "ServiceNamespace": "ecs",
      },
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
    },
    "GraphQLSvcTaskCountTargetScaleOnCpu55E0A853": Object {
      "Properties": Object {
        "PolicyName": "SupabasegraphqlGraphQLSvcTaskCountTargetScaleOnCpu36BF4020",
        "PolicyType": "TargetTrackingScaling",
        "ScalingTargetId": Object {
          "Ref": "GraphQLSvcTaskCountTarget97AE0A00",
        },
        "TargetTrackingScalingPolicyConfiguration": Object {
          "PredefinedMetricSpecification": Object {
            "PredefinedMetricType": "ECSServiceAverageCPUUtilization",
          },
          "ScaleInCooldown": 60,
          "ScaleOutCooldown": 60,
          "TargetValue": 50,
        },
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
    },
    "GraphQLTaskDefinition38339BB3": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "Environment": Array [
              Object {
                "Name": "PG_IGNORE_RBAC",
                "Value": "0",
              },
              Object {
                "Name": "ENABLE_XRAY_TRACING",
                "Value": "1",
              },
            ],
            "Essential": true,
            "Image": "public.ecr.aws/u3p7q2r8/postgraphile:latest",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "GraphQLLogsAACD57ED",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "Name": "app",
            "PortMappings": Array [
              Object {
                "ContainerPort": 5000,
                "Protocol": "tcp",
              },
            ],
            "Secrets": Array [
              Object {
                "Name": "DATABASE_URL",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "DatabaseUrlParameter81075D88",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "JWT_SECRET",
                "ValueFrom": Object {
                  "Ref": "SupabaseJwtSecretFA404A75",
                },
              },
            ],
            "Ulimits": Array [
              Object {
                "HardLimit": 65536,
                "Name": "nofile",
                "SoftLimit": 65536,
              },
            ],
          },
        ],
        "Cpu": "1024",
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "GraphQLTaskDefinitionExecutionRole5AE89FC5",
            "Arn",
          ],
        },
        "Family": "SupabasegraphqlGraphQLTaskDefinitionA7FED208",
        "Memory": "2048",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "RuntimePlatform": Object {
          "CpuArchitecture": "ARM64",
          "OperatingSystemFamily": "LINUX",
        },
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "GraphQLTaskDefinitionTaskRole513F3843",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "GraphQLTaskDefinitionExecutionRole5AE89FC5": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "GraphQLTaskDefinitionExecutionRoleDefaultPolicyA11AB8A4": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "GraphQLLogsAACD57ED",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "DatabaseUrlParameter81075D88",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "SupabaseJwtSecretFA404A75",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "GraphQLTaskDefinitionExecutionRoleDefaultPolicyA11AB8A4",
        "Roles": Array [
          Object {
            "Ref": "GraphQLTaskDefinitionExecutionRole5AE89FC5",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "GraphQLTaskDefinitionTaskRole513F3843": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "KongForceDeployFunction5F4BDB5C": Object {
      "DependsOn": Array [
        "KongForceDeployFunctionServiceRoleDefaultPolicy9EF28809",
        "KongForceDeployFunctionServiceRole446657AE",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "8d678058f0eb8312a176152d7bdc2392d3a97980a0b4c6a5af633d405b11038b.zip",
        },
        "Description": "Supabase - Force deploy ECS service function",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "ECS_CLUSTER_NAME": Object {
              "Ref": "ClusterEB0386A7",
            },
            "ECS_SERVICE_NAME": Object {
              "Fn::GetAtt": Array [
                "KongSvcServiceE14A19D7",
                "Name",
              ],
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "KongForceDeployFunctionServiceRole446657AE",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "KongForceDeployFunctionServiceRole446657AE": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "KongForceDeployFunctionServiceRoleDefaultPolicy9EF28809": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "ecs:UpdateService",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "KongSvcServiceE14A19D7",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "KongForceDeployFunctionServiceRoleDefaultPolicy9EF28809",
        "Roles": Array [
          Object {
            "Ref": "KongForceDeployFunctionServiceRole446657AE",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "KongLoadBalancerD341ED7C": Object {
      "DependsOn": Array [
        "VPCPublicSubnet1DefaultRoute91CEF279",
        "VPCPublicSubnet2DefaultRouteB7481BBA",
      ],
      "Properties": Object {
        "LoadBalancerAttributes": Array [
          Object {
            "Key": "deletion_protection.enabled",
            "Value": "false",
          },
        ],
        "Scheme": "internet-facing",
        "Subnets": Array [
          Object {
            "Ref": "VPCPublicSubnet1SubnetB4246D30",
          },
          Object {
            "Ref": "VPCPublicSubnet2Subnet74179F39",
          },
        ],
        "Type": "network",
      },
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
    },
    "KongLoadBalancerListenerA03182E0": Object {
      "Properties": Object {
        "DefaultActions": Array [
          Object {
            "TargetGroupArn": Object {
              "Ref": "KongTargetGroupD0277B2A",
            },
            "Type": "forward",
          },
        ],
        "LoadBalancerArn": Object {
          "Ref": "KongLoadBalancerD341ED7C",
        },
        "Port": 80,
        "Protocol": "TCP",
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "KongLogs4BD50491": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "RetentionInDays": 30,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "KongSvcCloudmapServiceF8523DCA": Object {
      "Properties": Object {
        "DnsConfig": Object {
          "DnsRecords": Array [
            Object {
              "TTL": 10,
              "Type": "SRV",
            },
            Object {
              "TTL": 10,
              "Type": "A",
            },
          ],
          "NamespaceId": Object {
            "Fn::GetAtt": Array [
              "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
              "Id",
            ],
          },
          "RoutingPolicy": "MULTIVALUE",
        },
        "HealthCheckCustomConfig": Object {
          "FailureThreshold": 1,
        },
        "Name": "kong",
        "NamespaceId": Object {
          "Fn::GetAtt": Array [
            "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
            "Id",
          ],
        },
      },
      "Type": "AWS::ServiceDiscovery::Service",
    },
    "KongSvcSecurityGroupD458B522": Object {
      "Properties": Object {
        "GroupDescription": "Supabase-graphql/Kong/Svc/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": Object {
              "Fn::GetAtt": Array [
                "VPCB9E5F0B4",
                "CidrBlock",
              ],
            },
            "Description": "NLB healthcheck",
            "FromPort": 8100,
            "IpProtocol": "tcp",
            "ToPort": 8100,
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "KongSvcSecurityGroupfromIndirectPeer80002858A8A7": Object {
      "Properties": Object {
        "Description": "CloudFront",
        "FromPort": 8000,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "KongSvcSecurityGroupD458B522",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourcePrefixListId": Object {
          "Fn::GetAtt": Array [
            "CloudFrontManagedPrefixList4E30A88B",
            "PrefixLists.0.PrefixListId",
          ],
        },
        "ToPort": 8000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "KongSvcServiceE14A19D7": Object {
      "DependsOn": Array [
        "KongLoadBalancerListenerA03182E0",
      ],
      "Properties": Object {
        "Cluster": Object {
          "Ref": "ClusterEB0386A7",
        },
        "DeploymentConfiguration": Object {
          "DeploymentCircuitBreaker": Object {
            "Enable": true,
            "Rollback": true,
          },
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "DeploymentController": Object {
          "Type": "ECS",
        },
        "EnableECSManagedTags": true,
        "HealthCheckGracePeriodSeconds": 60,
        "LaunchType": "FARGATE",
        "LoadBalancers": Array [
          Object {
            "ContainerName": "app",
            "ContainerPort": 8000,
            "TargetGroupArn": Object {
              "Ref": "KongTargetGroupD0277B2A",
            },
          },
        ],
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "KongSvcSecurityGroupD458B522",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Array [
              Object {
                "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
              },
              Object {
                "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
              },
            ],
          },
        },
        "PropagateTags": "SERVICE",
        "ServiceRegistries": Array [
          Object {
            "ContainerName": "app",
            "ContainerPort": 8000,
            "RegistryArn": Object {
              "Fn::GetAtt": Array [
                "KongSvcCloudmapServiceF8523DCA",
                "Arn",
              ],
            },
          },
        ],
        "TaskDefinition": Object {
          "Ref": "KongTaskDefinitionAE44544D",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "KongSvcTaskCountTargetD123B28B": Object {
      "Properties": Object {
        "MaxCapacity": 20,
        "MinCapacity": 1,
        "ResourceId": Object {
          "Fn::Join": Array [
            "",
            Array [
              "service/",
              Object {
                "Ref": "ClusterEB0386A7",
              },
              "/",
              Object {
                "Fn::GetAtt": Array [
                  "KongSvcServiceE14A19D7",
                  "Name",
                ],
              },
            ],
          ],
        },
        "RoleARN": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":iam::",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService",
            ],
          ],
        },
        "ScalableDimension": "ecs:service:DesiredCount",
        "ServiceNamespace": "ecs",
      },
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
    },
    "KongSvcTaskCountTargetScaleOnCpu8A2BCD73": Object {
      "Properties": Object {
        "PolicyName": "SupabasegraphqlKongSvcTaskCountTargetScaleOnCpu29B35B2B",
        "PolicyType": "TargetTrackingScaling",
        "ScalingTargetId": Object {
          "Ref": "KongSvcTaskCountTargetD123B28B",
        },
        "TargetTrackingScalingPolicyConfiguration": Object {
          "PredefinedMetricSpecification": Object {
            "PredefinedMetricType": "ECSServiceAverageCPUUtilization",
          },
          "ScaleInCooldown": 60,
          "ScaleOutCooldown": 60,
          "TargetValue": 50,
        },
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
    },
    "KongTargetGroupD0277B2A": Object {
      "Properties": Object {
        "HealthCheckIntervalSeconds": 10,
        "HealthCheckPort": "8100",
        "Port": 8000,
        "Protocol": "TCP",
        "TargetGroupAttributes": Array [
          Object {
            "Key": "deregistration_delay.timeout_seconds",
            "Value": "30",
          },
          Object {
            "Key": "preserve_client_ip.enabled",
            "Value": "true",
          },
        ],
        "TargetType": "ip",
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
    },
    "KongTaskDefinitionAE44544D": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "Environment": Array [
              Object {
                "Name": "KONG_DNS_ORDER",
                "Value": "LAST,A,CNAME",
              },
              Object {
                "Name": "KONG_PLUGINS",
                "Value": "request-transformer,cors,key-auth,acl",
              },
              Object {
                "Name": "KONG_STATUS_LISTEN",
                "Value": "0.0.0.0:8100",
              },
              Object {
                "Name": "SUPABASE_GRAPHQL_URL",
                "Value": "http://graphql.supabase.local:5000/graphql",
              },
            ],
            "Essential": true,
            "HealthCheck": Object {
              "Command": Array [
                "CMD",
                "kong",
                "health",
              ],
              "Interval": 10,
              "Retries": 3,
              "Timeout": 10,
            },
            "Image": "public.ecr.aws/u3p7q2r8/kong:latest",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "KongLogs4BD50491",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "Name": "app",
            "PortMappings": Array [
              Object {
                "ContainerPort": 8000,
                "Protocol": "tcp",
              },
              Object {
                "ContainerPort": 8100,
                "Protocol": "tcp",
              },
            ],
            "Secrets": Array [
              Object {
                "Name": "ANON_KEY",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "SupabaseJwtAnonKey90E80F90",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "SERVICE_KEY",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "SupabaseJwtServiceRoleKey94675B64",
                      },
                    ],
                  ],
                },
              },
            ],
            "Ulimits": Array [
              Object {
                "HardLimit": 65536,
                "Name": "nofile",
                "SoftLimit": 65536,
              },
            ],
          },
        ],
        "Cpu": "1024",
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "KongTaskDefinitionExecutionRole2593435E",
            "Arn",
          ],
        },
        "Family": "SupabasegraphqlKongTaskDefinition2D122B27",
        "Memory": "2048",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "RuntimePlatform": Object {
          "CpuArchitecture": "ARM64",
          "OperatingSystemFamily": "LINUX",
        },
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "KongTaskDefinitionTaskRole59341FD6",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "KongTaskDefinitionExecutionRole2593435E": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "KongTaskDefinitionExecutionRoleDefaultPolicyF6446340": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "KongLogs4BD50491",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "SupabaseJwtAnonKey90E80F90",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "SupabaseJwtServiceRoleKey94675B64",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "KongTaskDefinitionExecutionRoleDefaultPolicyF6446340",
        "Roles": Array [
          Object {
            "Ref": "KongTaskDefinitionExecutionRole2593435E",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "KongTaskDefinitionTaskRole59341FD6": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "MetaForceDeployFunction26B610DA": Object {
      "DependsOn": Array [
        "MetaForceDeployFunctionServiceRoleDefaultPolicy4B531C05",
        "MetaForceDeployFunctionServiceRole22BD4245",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "8d678058f0eb8312a176152d7bdc2392d3a97980a0b4c6a5af633d405b11038b.zip",
        },
        "Description": "Supabase - Force deploy ECS service function",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "ECS_CLUSTER_NAME": Object {
              "Ref": "ClusterEB0386A7",
            },
            "ECS_SERVICE_NAME": Object {
              "Fn::GetAtt": Array [
                "MetaSvcService58BFAF30",
                "Name",
              ],
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "MetaForceDeployFunctionServiceRole22BD4245",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "MetaForceDeployFunctionServiceRole22BD4245": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "MetaForceDeployFunctionServiceRoleDefaultPolicy4B531C05": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "ecs:UpdateService",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "MetaSvcService58BFAF30",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "MetaForceDeployFunctionServiceRoleDefaultPolicy4B531C05",
        "Roles": Array [
          Object {
            "Ref": "MetaForceDeployFunctionServiceRole22BD4245",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "MetaLogs80FD71C7": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "RetentionInDays": 30,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "MetaSvcCloudmapService5BBAEB97": Object {
      "Properties": Object {
        "DnsConfig": Object {
          "DnsRecords": Array [
            Object {
              "TTL": 10,
              "Type": "SRV",
            },
            Object {
              "TTL": 10,
              "Type": "A",
            },
          ],
          "NamespaceId": Object {
            "Fn::GetAtt": Array [
              "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
              "Id",
            ],
          },
          "RoutingPolicy": "MULTIVALUE",
        },
        "HealthCheckCustomConfig": Object {
          "FailureThreshold": 1,
        },
        "Name": "meta",
        "NamespaceId": Object {
          "Fn::GetAtt": Array [
            "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
            "Id",
          ],
        },
      },
      "Type": "AWS::ServiceDiscovery::Service",
    },
    "MetaSvcSecurityGroup28D90BB4": Object {
      "Properties": Object {
        "GroupDescription": "Supabase-graphql/Meta/Svc/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "MetaSvcSecurityGroupfromSupabasegraphqlKongSvcSecurityGroup65C63AF480800B35AA6B": Object {
      "Properties": Object {
        "Description": "from SupabasegraphqlKongSvcSecurityGroup65C63AF4:8080",
        "FromPort": 8080,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "MetaSvcSecurityGroup28D90BB4",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "KongSvcSecurityGroupD458B522",
            "GroupId",
          ],
        },
        "ToPort": 8080,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "MetaSvcService58BFAF30": Object {
      "DependsOn": Array [
        "DatabaseInstance1844F58FD",
      ],
      "Properties": Object {
        "Cluster": Object {
          "Ref": "ClusterEB0386A7",
        },
        "DeploymentConfiguration": Object {
          "DeploymentCircuitBreaker": Object {
            "Enable": true,
            "Rollback": true,
          },
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "DeploymentController": Object {
          "Type": "ECS",
        },
        "EnableECSManagedTags": true,
        "LaunchType": "FARGATE",
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "MetaSvcSecurityGroup28D90BB4",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Array [
              Object {
                "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
              },
              Object {
                "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
              },
            ],
          },
        },
        "PropagateTags": "SERVICE",
        "ServiceRegistries": Array [
          Object {
            "ContainerName": "app",
            "ContainerPort": 8080,
            "RegistryArn": Object {
              "Fn::GetAtt": Array [
                "MetaSvcCloudmapService5BBAEB97",
                "Arn",
              ],
            },
          },
        ],
        "TaskDefinition": Object {
          "Ref": "MetaTaskDefinition286A1512",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "MetaSvcTaskCountTarget644CBD43": Object {
      "Properties": Object {
        "MaxCapacity": 20,
        "MinCapacity": 1,
        "ResourceId": Object {
          "Fn::Join": Array [
            "",
            Array [
              "service/",
              Object {
                "Ref": "ClusterEB0386A7",
              },
              "/",
              Object {
                "Fn::GetAtt": Array [
                  "MetaSvcService58BFAF30",
                  "Name",
                ],
              },
            ],
          ],
        },
        "RoleARN": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":iam::",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService",
            ],
          ],
        },
        "ScalableDimension": "ecs:service:DesiredCount",
        "ServiceNamespace": "ecs",
      },
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
    },
    "MetaSvcTaskCountTargetScaleOnCpuF6112AC5": Object {
      "Properties": Object {
        "PolicyName": "SupabasegraphqlMetaSvcTaskCountTargetScaleOnCpu92AABF78",
        "PolicyType": "TargetTrackingScaling",
        "ScalingTargetId": Object {
          "Ref": "MetaSvcTaskCountTarget644CBD43",
        },
        "TargetTrackingScalingPolicyConfiguration": Object {
          "PredefinedMetricSpecification": Object {
            "PredefinedMetricType": "ECSServiceAverageCPUUtilization",
          },
          "ScaleInCooldown": 60,
          "ScaleOutCooldown": 60,
          "TargetValue": 50,
        },
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
    },
    "MetaTaskDefinition286A1512": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "Environment": Array [
              Object {
                "Name": "PG_META_PORT",
                "Value": "8080",
              },
            ],
            "Essential": true,
            "Image": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "public.ecr.aws/t3w2s2c9/postgres-meta:",
                  Object {
                    "Ref": "PostgresMetaApiVersionParameter",
                  },
                ],
              ],
            },
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "MetaLogs80FD71C7",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "Name": "app",
            "PortMappings": Array [
              Object {
                "ContainerPort": 8080,
                "Protocol": "tcp",
              },
            ],
            "Secrets": Array [
              Object {
                "Name": "PG_META_DB_HOST",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DatabaseSecretAttachmentE5D1B020",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "PG_META_DB_PORT",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DatabaseSecretAttachmentE5D1B020",
                      },
                      ":port::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "PG_META_DB_NAME",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DatabaseSecretAttachmentE5D1B020",
                      },
                      ":dbname::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "PG_META_DB_USER",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DatabaseSecretAttachmentE5D1B020",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "PG_META_DB_PASSWORD",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DatabaseSecretAttachmentE5D1B020",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
            "Ulimits": Array [
              Object {
                "HardLimit": 65536,
                "Name": "nofile",
                "SoftLimit": 65536,
              },
            ],
          },
        ],
        "Cpu": "1024",
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "MetaTaskDefinitionExecutionRole93D83399",
            "Arn",
          ],
        },
        "Family": "SupabasegraphqlMetaTaskDefinition43DBCC6D",
        "Memory": "2048",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "RuntimePlatform": Object {
          "CpuArchitecture": "ARM64",
          "OperatingSystemFamily": "LINUX",
        },
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "MetaTaskDefinitionTaskRole18CD498C",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "MetaTaskDefinitionExecutionRole93D83399": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "MetaTaskDefinitionExecutionRoleDefaultPolicy5A6F1F9C": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "MetaLogs80FD71C7",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "DatabaseSecretAttachmentE5D1B020",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "MetaTaskDefinitionExecutionRoleDefaultPolicy5A6F1F9C",
        "Roles": Array [
          Object {
            "Ref": "MetaTaskDefinitionExecutionRole93D83399",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "MetaTaskDefinitionTaskRole18CD498C": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "ParameterGroup5E32DECB": Object {
      "Properties": Object {
        "Description": "Supabase parameter group for aurora-postgresql",
        "Family": "aurora-postgresql14",
        "Parameters": Object {
          "autovacuum_max_workers": "GREATEST({DBInstanceClassMemory/64371566592},2)",
          "max_logical_replication_workers": "4",
          "max_parallel_workers": "2",
          "max_replication_slots": "20",
          "max_slot_wal_keep_size": "1024",
          "max_wal_senders": "20",
          "rds.logical_replication": "1",
          "shared_preload_libraries": "pg_stat_statements, pgaudit, pg_cron",
        },
      },
      "Type": "AWS::RDS::DBClusterParameterGroup",
    },
    "RealtimeForceDeployFunctionFE2E409A": Object {
      "DependsOn": Array [
        "RealtimeForceDeployFunctionServiceRoleDefaultPolicyCD107644",
        "RealtimeForceDeployFunctionServiceRole6E959CD8",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "8d678058f0eb8312a176152d7bdc2392d3a97980a0b4c6a5af633d405b11038b.zip",
        },
        "Description": "Supabase - Force deploy ECS service function",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "ECS_CLUSTER_NAME": Object {
              "Ref": "ClusterEB0386A7",
            },
            "ECS_SERVICE_NAME": Object {
              "Fn::GetAtt": Array [
                "RealtimeSvcService05F54057",
                "Name",
              ],
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "RealtimeForceDeployFunctionServiceRole6E959CD8",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "RealtimeForceDeployFunctionServiceRole6E959CD8": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "RealtimeForceDeployFunctionServiceRoleDefaultPolicyCD107644": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "ecs:UpdateService",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "RealtimeSvcService05F54057",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "RealtimeForceDeployFunctionServiceRoleDefaultPolicyCD107644",
        "Roles": Array [
          Object {
            "Ref": "RealtimeForceDeployFunctionServiceRole6E959CD8",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "RealtimeLogs5C43159D": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "RetentionInDays": 30,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "RealtimeSvcCloudmapServiceF8CD5DF6": Object {
      "Properties": Object {
        "DnsConfig": Object {
          "DnsRecords": Array [
            Object {
              "TTL": 10,
              "Type": "SRV",
            },
            Object {
              "TTL": 10,
              "Type": "A",
            },
          ],
          "NamespaceId": Object {
            "Fn::GetAtt": Array [
              "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
              "Id",
            ],
          },
          "RoutingPolicy": "MULTIVALUE",
        },
        "HealthCheckCustomConfig": Object {
          "FailureThreshold": 1,
        },
        "Name": "realtime",
        "NamespaceId": Object {
          "Fn::GetAtt": Array [
            "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
            "Id",
          ],
        },
      },
      "Type": "AWS::ServiceDiscovery::Service",
    },
    "RealtimeSvcSecurityGroup15A1991B": Object {
      "Properties": Object {
        "GroupDescription": "Supabase-graphql/Realtime/Svc/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "RealtimeSvcSecurityGroupfromSupabasegraphqlKongSvcSecurityGroup65C63AF440001917A1EB": Object {
      "Properties": Object {
        "Description": "from SupabasegraphqlKongSvcSecurityGroup65C63AF4:4000",
        "FromPort": 4000,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "RealtimeSvcSecurityGroup15A1991B",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "KongSvcSecurityGroupD458B522",
            "GroupId",
          ],
        },
        "ToPort": 4000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "RealtimeSvcService05F54057": Object {
      "DependsOn": Array [
        "DatabaseInstance1844F58FD",
      ],
      "Properties": Object {
        "Cluster": Object {
          "Ref": "ClusterEB0386A7",
        },
        "DeploymentConfiguration": Object {
          "DeploymentCircuitBreaker": Object {
            "Enable": true,
            "Rollback": true,
          },
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "DeploymentController": Object {
          "Type": "ECS",
        },
        "EnableECSManagedTags": true,
        "LaunchType": "FARGATE",
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "RealtimeSvcSecurityGroup15A1991B",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Array [
              Object {
                "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
              },
              Object {
                "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
              },
            ],
          },
        },
        "PropagateTags": "SERVICE",
        "ServiceRegistries": Array [
          Object {
            "ContainerName": "app",
            "ContainerPort": 4000,
            "RegistryArn": Object {
              "Fn::GetAtt": Array [
                "RealtimeSvcCloudmapServiceF8CD5DF6",
                "Arn",
              ],
            },
          },
        ],
        "TaskDefinition": Object {
          "Ref": "RealtimeTaskDefinition52361C2C",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "RealtimeTaskDefinition52361C2C": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "Command": Array [
              "bash",
              "-c",
              "./prod/rel/realtime/bin/realtime eval Realtime.Release.migrate && ./prod/rel/realtime/bin/realtime start",
            ],
            "Environment": Array [
              Object {
                "Name": "DB_SSL",
                "Value": "false",
              },
              Object {
                "Name": "PORT",
                "Value": "4000",
              },
              Object {
                "Name": "REPLICATION_MODE",
                "Value": "RLS",
              },
              Object {
                "Name": "REPLICATION_POLL_INTERVAL",
                "Value": "300",
              },
              Object {
                "Name": "SUBSCRIPTION_SYNC_INTERVAL",
                "Value": "60000",
              },
              Object {
                "Name": "SECURE_CHANNELS",
                "Value": "true",
              },
              Object {
                "Name": "SLOT_NAME",
                "Value": "realtime_rls",
              },
              Object {
                "Name": "TEMPORARY_SLOT",
                "Value": "true",
              },
              Object {
                "Name": "MAX_REPLICATION_LAG_MB",
                "Value": "1000",
              },
            ],
            "Essential": true,
            "Image": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "public.ecr.aws/t3w2s2c9/realtime:",
                  Object {
                    "Ref": "RealtimeApiVersionParameter",
                  },
                ],
              ],
            },
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "RealtimeLogs5C43159D",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "Name": "app",
            "PortMappings": Array [
              Object {
                "ContainerPort": 4000,
                "Protocol": "tcp",
              },
            ],
            "Secrets": Array [
              Object {
                "Name": "JWT_SECRET",
                "ValueFrom": Object {
                  "Ref": "SupabaseJwtSecretFA404A75",
                },
              },
              Object {
                "Name": "DB_HOST",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DatabaseSecretAttachmentE5D1B020",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "DB_PORT",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DatabaseSecretAttachmentE5D1B020",
                      },
                      ":port::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "DB_NAME",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DatabaseSecretAttachmentE5D1B020",
                      },
                      ":dbname::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "DB_USER",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DatabaseSecretAttachmentE5D1B020",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "DB_PASSWORD",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DatabaseSecretAttachmentE5D1B020",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
            "Ulimits": Array [
              Object {
                "HardLimit": 65536,
                "Name": "nofile",
                "SoftLimit": 65536,
              },
            ],
          },
        ],
        "Cpu": "1024",
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "RealtimeTaskDefinitionExecutionRoleCD260B29",
            "Arn",
          ],
        },
        "Family": "SupabasegraphqlRealtimeTaskDefinitionA6BA2FB9",
        "Memory": "2048",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "RuntimePlatform": Object {
          "CpuArchitecture": "ARM64",
          "OperatingSystemFamily": "LINUX",
        },
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "RealtimeTaskDefinitionTaskRole8324A2B1",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "RealtimeTaskDefinitionExecutionRoleCD260B29": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "RealtimeTaskDefinitionExecutionRoleDefaultPolicyBD7C355B": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "RealtimeLogs5C43159D",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "SupabaseJwtSecretFA404A75",
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "DatabaseSecretAttachmentE5D1B020",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "RealtimeTaskDefinitionExecutionRoleDefaultPolicyBD7C355B",
        "Roles": Array [
          Object {
            "Ref": "RealtimeTaskDefinitionExecutionRoleCD260B29",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "RealtimeTaskDefinitionTaskRole8324A2B1": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "RestForceDeployFunction6022B502": Object {
      "DependsOn": Array [
        "RestForceDeployFunctionServiceRoleDefaultPolicyD312FEA0",
        "RestForceDeployFunctionServiceRole3E67F069",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "8d678058f0eb8312a176152d7bdc2392d3a97980a0b4c6a5af633d405b11038b.zip",
        },
        "Description": "Supabase - Force deploy ECS service function",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "ECS_CLUSTER_NAME": Object {
              "Ref": "ClusterEB0386A7",
            },
            "ECS_SERVICE_NAME": Object {
              "Fn::GetAtt": Array [
                "RestSvcServiceCEB7F559",
                "Name",
              ],
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "RestForceDeployFunctionServiceRole3E67F069",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "RestForceDeployFunctionServiceRole3E67F069": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "RestForceDeployFunctionServiceRoleDefaultPolicyD312FEA0": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "ecs:UpdateService",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "RestSvcServiceCEB7F559",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "RestForceDeployFunctionServiceRoleDefaultPolicyD312FEA0",
        "Roles": Array [
          Object {
            "Ref": "RestForceDeployFunctionServiceRole3E67F069",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "RestLogsE8B49088": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "RetentionInDays": 30,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "RestSvcCloudmapServiceC2707820": Object {
      "Properties": Object {
        "DnsConfig": Object {
          "DnsRecords": Array [
            Object {
              "TTL": 10,
              "Type": "SRV",
            },
            Object {
              "TTL": 10,
              "Type": "A",
            },
          ],
          "NamespaceId": Object {
            "Fn::GetAtt": Array [
              "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
              "Id",
            ],
          },
          "RoutingPolicy": "MULTIVALUE",
        },
        "HealthCheckCustomConfig": Object {
          "FailureThreshold": 1,
        },
        "Name": "rest",
        "NamespaceId": Object {
          "Fn::GetAtt": Array [
            "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
            "Id",
          ],
        },
      },
      "Type": "AWS::ServiceDiscovery::Service",
    },
    "RestSvcSecurityGroup4F37982C": Object {
      "Properties": Object {
        "GroupDescription": "Supabase-graphql/Rest/Svc/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "RestSvcSecurityGroupfromSupabasegraphqlAuthSvcSecurityGroup340606E230000920723D": Object {
      "Properties": Object {
        "Description": "from SupabasegraphqlAuthSvcSecurityGroup340606E2:3000",
        "FromPort": 3000,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "RestSvcSecurityGroup4F37982C",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "AuthSvcSecurityGroup71415F29",
            "GroupId",
          ],
        },
        "ToPort": 3000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "RestSvcSecurityGroupfromSupabasegraphqlKongSvcSecurityGroup65C63AF43000F2336370": Object {
      "Properties": Object {
        "Description": "from SupabasegraphqlKongSvcSecurityGroup65C63AF4:3000",
        "FromPort": 3000,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "RestSvcSecurityGroup4F37982C",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "KongSvcSecurityGroupD458B522",
            "GroupId",
          ],
        },
        "ToPort": 3000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "RestSvcSecurityGroupfromSupabasegraphqlStorageSvcSecurityGroup634A37C83000B5F1813C": Object {
      "Properties": Object {
        "Description": "from SupabasegraphqlStorageSvcSecurityGroup634A37C8:3000",
        "FromPort": 3000,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "RestSvcSecurityGroup4F37982C",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "StorageSvcSecurityGroup134E6883",
            "GroupId",
          ],
        },
        "ToPort": 3000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "RestSvcServiceCEB7F559": Object {
      "DependsOn": Array [
        "DatabaseInstance1844F58FD",
      ],
      "Properties": Object {
        "Cluster": Object {
          "Ref": "ClusterEB0386A7",
        },
        "DeploymentConfiguration": Object {
          "DeploymentCircuitBreaker": Object {
            "Enable": true,
            "Rollback": true,
          },
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "DeploymentController": Object {
          "Type": "ECS",
        },
        "EnableECSManagedTags": true,
        "LaunchType": "FARGATE",
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "RestSvcSecurityGroup4F37982C",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Array [
              Object {
                "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
              },
              Object {
                "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
              },
            ],
          },
        },
        "PropagateTags": "SERVICE",
        "ServiceRegistries": Array [
          Object {
            "ContainerName": "app",
            "ContainerPort": 3000,
            "RegistryArn": Object {
              "Fn::GetAtt": Array [
                "RestSvcCloudmapServiceC2707820",
                "Arn",
              ],
            },
          },
        ],
        "TaskDefinition": Object {
          "Ref": "RestTaskDefinition4EBA60E9",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "RestSvcTaskCountTarget16F159C2": Object {
      "Properties": Object {
        "MaxCapacity": 20,
        "MinCapacity": 1,
        "ResourceId": Object {
          "Fn::Join": Array [
            "",
            Array [
              "service/",
              Object {
                "Ref": "ClusterEB0386A7",
              },
              "/",
              Object {
                "Fn::GetAtt": Array [
                  "RestSvcServiceCEB7F559",
                  "Name",
                ],
              },
            ],
          ],
        },
        "RoleARN": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":iam::",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService",
            ],
          ],
        },
        "ScalableDimension": "ecs:service:DesiredCount",
        "ServiceNamespace": "ecs",
      },
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
    },
    "RestSvcTaskCountTargetScaleOnCpuB698E9D3": Object {
      "Properties": Object {
        "PolicyName": "SupabasegraphqlRestSvcTaskCountTargetScaleOnCpu0DC18B84",
        "PolicyType": "TargetTrackingScaling",
        "ScalingTargetId": Object {
          "Ref": "RestSvcTaskCountTarget16F159C2",
        },
        "TargetTrackingScalingPolicyConfiguration": Object {
          "PredefinedMetricSpecification": Object {
            "PredefinedMetricType": "ECSServiceAverageCPUUtilization",
          },
          "ScaleInCooldown": 60,
          "ScaleOutCooldown": 60,
          "TargetValue": 50,
        },
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
    },
    "RestTaskDefinition4EBA60E9": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "Environment": Array [
              Object {
                "Name": "PGRST_DB_SCHEMAS",
                "Value": "public,storage,graphql_public",
              },
              Object {
                "Name": "PGRST_DB_ANON_ROLE",
                "Value": "anon",
              },
              Object {
                "Name": "PGRST_DB_USE_LEGACY_GUCS",
                "Value": "false",
              },
            ],
            "Essential": true,
            "Image": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "postgrest/postgrest:",
                  Object {
                    "Ref": "RestApiVersionParameter",
                  },
                ],
              ],
            },
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "RestLogsE8B49088",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "Name": "app",
            "PortMappings": Array [
              Object {
                "ContainerPort": 3000,
                "Protocol": "tcp",
              },
            ],
            "Secrets": Array [
              Object {
                "Name": "PGRST_DB_URI",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "DatabaseUrlParameter81075D88",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "PGRST_JWT_SECRET",
                "ValueFrom": Object {
                  "Ref": "SupabaseJwtSecretFA404A75",
                },
              },
            ],
            "Ulimits": Array [
              Object {
                "HardLimit": 65536,
                "Name": "nofile",
                "SoftLimit": 65536,
              },
            ],
          },
        ],
        "Cpu": "1024",
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "RestTaskDefinitionExecutionRole3F0CBE29",
            "Arn",
          ],
        },
        "Family": "SupabasegraphqlRestTaskDefinition07E924BA",
        "Memory": "2048",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "RuntimePlatform": Object {
          "CpuArchitecture": "ARM64",
          "OperatingSystemFamily": "LINUX",
        },
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "RestTaskDefinitionTaskRole94551FBF",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "RestTaskDefinitionExecutionRole3F0CBE29": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "RestTaskDefinitionExecutionRoleDefaultPolicyB130F5B5": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "RestLogsE8B49088",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "DatabaseUrlParameter81075D88",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "SupabaseJwtSecretFA404A75",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "RestTaskDefinitionExecutionRoleDefaultPolicyB130F5B5",
        "Roles": Array [
          Object {
            "Ref": "RestTaskDefinitionExecutionRole3F0CBE29",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "RestTaskDefinitionTaskRole94551FBF": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "StorageForceDeployFunction7B52931B": Object {
      "DependsOn": Array [
        "StorageForceDeployFunctionServiceRoleDefaultPolicyBA75E2CB",
        "StorageForceDeployFunctionServiceRoleA311B812",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "8d678058f0eb8312a176152d7bdc2392d3a97980a0b4c6a5af633d405b11038b.zip",
        },
        "Description": "Supabase - Force deploy ECS service function",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "ECS_CLUSTER_NAME": Object {
              "Ref": "ClusterEB0386A7",
            },
            "ECS_SERVICE_NAME": Object {
              "Fn::GetAtt": Array [
                "StorageSvcServiceA4DA327A",
                "Name",
              ],
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "StorageForceDeployFunctionServiceRoleA311B812",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "StorageForceDeployFunctionServiceRoleA311B812": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "StorageForceDeployFunctionServiceRoleDefaultPolicyBA75E2CB": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "ecs:UpdateService",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "StorageSvcServiceA4DA327A",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "StorageForceDeployFunctionServiceRoleDefaultPolicyBA75E2CB",
        "Roles": Array [
          Object {
            "Ref": "StorageForceDeployFunctionServiceRoleA311B812",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "StorageLogs2A2D4D26": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "RetentionInDays": 30,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "StorageSvcCloudmapServiceEC9FA74C": Object {
      "Properties": Object {
        "DnsConfig": Object {
          "DnsRecords": Array [
            Object {
              "TTL": 10,
              "Type": "SRV",
            },
            Object {
              "TTL": 10,
              "Type": "A",
            },
          ],
          "NamespaceId": Object {
            "Fn::GetAtt": Array [
              "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
              "Id",
            ],
          },
          "RoutingPolicy": "MULTIVALUE",
        },
        "HealthCheckCustomConfig": Object {
          "FailureThreshold": 1,
        },
        "Name": "storage",
        "NamespaceId": Object {
          "Fn::GetAtt": Array [
            "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
            "Id",
          ],
        },
      },
      "Type": "AWS::ServiceDiscovery::Service",
    },
    "StorageSvcSecurityGroup134E6883": Object {
      "Properties": Object {
        "GroupDescription": "Supabase-graphql/Storage/Svc/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "StorageSvcSecurityGroupfromSupabasegraphqlKongSvcSecurityGroup65C63AF450007C0EB8A7": Object {
      "Properties": Object {
        "Description": "from SupabasegraphqlKongSvcSecurityGroup65C63AF4:5000",
        "FromPort": 5000,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "StorageSvcSecurityGroup134E6883",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "KongSvcSecurityGroupD458B522",
            "GroupId",
          ],
        },
        "ToPort": 5000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "StorageSvcServiceA4DA327A": Object {
      "DependsOn": Array [
        "DatabaseInstance1844F58FD",
      ],
      "Properties": Object {
        "Cluster": Object {
          "Ref": "ClusterEB0386A7",
        },
        "DeploymentConfiguration": Object {
          "DeploymentCircuitBreaker": Object {
            "Enable": true,
            "Rollback": true,
          },
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "DeploymentController": Object {
          "Type": "ECS",
        },
        "EnableECSManagedTags": true,
        "LaunchType": "FARGATE",
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "StorageSvcSecurityGroup134E6883",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Array [
              Object {
                "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
              },
              Object {
                "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
              },
            ],
          },
        },
        "PropagateTags": "SERVICE",
        "ServiceRegistries": Array [
          Object {
            "ContainerName": "app",
            "ContainerPort": 5000,
            "RegistryArn": Object {
              "Fn::GetAtt": Array [
                "StorageSvcCloudmapServiceEC9FA74C",
                "Arn",
              ],
            },
          },
        ],
        "TaskDefinition": Object {
          "Ref": "StorageTaskDefinition6B21D26E",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "StorageSvcTaskCountTarget6971484D": Object {
      "Properties": Object {
        "MaxCapacity": 20,
        "MinCapacity": 1,
        "ResourceId": Object {
          "Fn::Join": Array [
            "",
            Array [
              "service/",
              Object {
                "Ref": "ClusterEB0386A7",
              },
              "/",
              Object {
                "Fn::GetAtt": Array [
                  "StorageSvcServiceA4DA327A",
                  "Name",
                ],
              },
            ],
          ],
        },
        "RoleARN": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":iam::",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService",
            ],
          ],
        },
        "ScalableDimension": "ecs:service:DesiredCount",
        "ServiceNamespace": "ecs",
      },
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
    },
    "StorageSvcTaskCountTargetScaleOnCpu9FD330E2": Object {
      "Properties": Object {
        "PolicyName": "SupabasegraphqlStorageSvcTaskCountTargetScaleOnCpu853683D6",
        "PolicyType": "TargetTrackingScaling",
        "ScalingTargetId": Object {
          "Ref": "StorageSvcTaskCountTarget6971484D",
        },
        "TargetTrackingScalingPolicyConfiguration": Object {
          "PredefinedMetricSpecification": Object {
            "PredefinedMetricType": "ECSServiceAverageCPUUtilization",
          },
          "ScaleInCooldown": 60,
          "ScaleOutCooldown": 60,
          "TargetValue": 50,
        },
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
    },
    "StorageTaskDefinition6B21D26E": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "Environment": Array [
              Object {
                "Name": "POSTGREST_URL",
                "Value": "http://rest.supabase.local:3000",
              },
              Object {
                "Name": "PGOPTIONS",
                "Value": "-c search_path=storage,public",
              },
              Object {
                "Name": "FILE_SIZE_LIMIT",
                "Value": "52428800",
              },
              Object {
                "Name": "STORAGE_BACKEND",
                "Value": "s3",
              },
              Object {
                "Name": "TENANT_ID",
                "Value": "default",
              },
              Object {
                "Name": "REGION",
                "Value": Object {
                  "Ref": "AWS::Region",
                },
              },
              Object {
                "Name": "GLOBAL_S3_BUCKET",
                "Value": Object {
                  "Ref": "Bucket83908E77",
                },
              },
            ],
            "Essential": true,
            "Image": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "public.ecr.aws/t3w2s2c9/storage-api:",
                  Object {
                    "Ref": "StorageApiVersionParameter",
                  },
                ],
              ],
            },
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "StorageLogs2A2D4D26",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "Name": "app",
            "PortMappings": Array [
              Object {
                "ContainerPort": 5000,
                "Protocol": "tcp",
              },
            ],
            "Secrets": Array [
              Object {
                "Name": "ANON_KEY",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "SupabaseJwtAnonKey90E80F90",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "SERVICE_KEY",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "SupabaseJwtServiceRoleKey94675B64",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "PGRST_JWT_SECRET",
                "ValueFrom": Object {
                  "Ref": "SupabaseJwtSecretFA404A75",
                },
              },
              Object {
                "Name": "DATABASE_URL",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "DatabaseUrlParameter81075D88",
                      },
                    ],
                  ],
                },
              },
            ],
            "Ulimits": Array [
              Object {
                "HardLimit": 65536,
                "Name": "nofile",
                "SoftLimit": 65536,
              },
            ],
          },
        ],
        "Cpu": "1024",
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "StorageTaskDefinitionExecutionRoleAEB5CF80",
            "Arn",
          ],
        },
        "Family": "SupabasegraphqlStorageTaskDefinitionFFAFA445",
        "Memory": "2048",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "RuntimePlatform": Object {
          "CpuArchitecture": "X86_64",
          "OperatingSystemFamily": "LINUX",
        },
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "StorageTaskDefinitionTaskRole24C4C137",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "StorageTaskDefinitionExecutionRoleAEB5CF80": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "StorageTaskDefinitionExecutionRoleDefaultPolicy537D0826": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "StorageLogs2A2D4D26",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "SupabaseJwtAnonKey90E80F90",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "SupabaseJwtServiceRoleKey94675B64",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "SupabaseJwtSecretFA404A75",
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "DatabaseUrlParameter81075D88",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "StorageTaskDefinitionExecutionRoleDefaultPolicy537D0826",
        "Roles": Array [
          Object {
            "Ref": "StorageTaskDefinitionExecutionRoleAEB5CF80",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "StorageTaskDefinitionTaskRole24C4C137": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "StorageTaskDefinitionTaskRoleDefaultPolicy3448147D": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "Bucket83908E77",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "Bucket83908E77",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "StorageTaskDefinitionTaskRoleDefaultPolicy3448147D",
        "Roles": Array [
          Object {
            "Ref": "StorageTaskDefinitionTaskRole24C4C137",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "StudioClient100BA227": Object {
      "Properties": Object {
        "AllowedOAuthFlows": Array [
          "code",
        ],
        "AllowedOAuthFlowsUserPoolClient": true,
        "AllowedOAuthScopes": Array [
          "openid",
        ],
        "CallbackURLs": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "https://",
                Object {
                  "Fn::GetAtt": Array [
                    "StudioLoadBalancer143227F7",
                    "DNSName",
                  ],
                },
                "/oauth2/idpresponse",
              ],
            ],
          },
        ],
        "ExplicitAuthFlows": Array [
          "ALLOW_USER_PASSWORD_AUTH",
          "ALLOW_USER_SRP_AUTH",
          "ALLOW_REFRESH_TOKEN_AUTH",
        ],
        "GenerateSecret": true,
        "LogoutURLs": Array [
          "https://example.com",
        ],
        "SupportedIdentityProviders": Array [
          "COGNITO",
        ],
        "UserPoolId": Object {
          "Ref": "StudioUserPool94F50620",
        },
      },
      "Type": "AWS::Cognito::UserPoolClient",
    },
    "StudioForceDeployFunction3EEAC04D": Object {
      "DependsOn": Array [
        "StudioForceDeployFunctionServiceRoleDefaultPolicyDDE0ACDC",
        "StudioForceDeployFunctionServiceRole41FBB942",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "8d678058f0eb8312a176152d7bdc2392d3a97980a0b4c6a5af633d405b11038b.zip",
        },
        "Description": "Supabase - Force deploy ECS service function",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "ECS_CLUSTER_NAME": Object {
              "Ref": "ClusterEB0386A7",
            },
            "ECS_SERVICE_NAME": Object {
              "Fn::GetAtt": Array [
                "StudioSvcService57CD4A48",
                "Name",
              ],
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "StudioForceDeployFunctionServiceRole41FBB942",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "StudioForceDeployFunctionServiceRole41FBB942": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "StudioForceDeployFunctionServiceRoleDefaultPolicyDDE0ACDC": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "ecs:UpdateService",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "StudioSvcService57CD4A48",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "StudioForceDeployFunctionServiceRoleDefaultPolicyDDE0ACDC",
        "Roles": Array [
          Object {
            "Ref": "StudioForceDeployFunctionServiceRole41FBB942",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "StudioLoadBalancer143227F7": Object {
      "DependsOn": Array [
        "VPCPublicSubnet1DefaultRoute91CEF279",
        "VPCPublicSubnet2DefaultRouteB7481BBA",
      ],
      "Properties": Object {
        "LoadBalancerAttributes": Array [
          Object {
            "Key": "deletion_protection.enabled",
            "Value": "false",
          },
        ],
        "Scheme": "internet-facing",
        "SecurityGroups": Array [
          Object {
            "Fn::GetAtt": Array [
              "StudioLoadBalancerSecurityGroup73100F94",
              "GroupId",
            ],
          },
        ],
        "Subnets": Array [
          Object {
            "Ref": "VPCPublicSubnet1SubnetB4246D30",
          },
          Object {
            "Ref": "VPCPublicSubnet2Subnet74179F39",
          },
        ],
        "Type": "application",
      },
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
    },
    "StudioLoadBalancerListener522B10FC": Object {
      "Properties": Object {
        "Certificates": Object {
          "Fn::If": Array [
            "StudioHttpCondition14AD1D44",
            Object {
              "Ref": "AWS::NoValue",
            },
            Array [
              Object {
                "CertificateArn": Object {
                  "Ref": "StudioCertificateArnParameterEBA639E6",
                },
              },
            ],
          ],
        },
        "DefaultActions": Array [
          Object {
            "Order": Object {
              "Fn::If": Array [
                "StudioHttpCondition14AD1D44",
                1,
                2,
              ],
            },
            "TargetGroupArn": Object {
              "Ref": "StudioTargetGroupC1E0E03D",
            },
            "Type": "forward",
          },
          Object {
            "Fn::If": Array [
              "StudioHttpCondition14AD1D44",
              Object {
                "Ref": "AWS::NoValue",
              },
              Object {
                "AuthenticateCognitoConfig": Object {
                  "UserPoolArn": Object {
                    "Fn::GetAtt": Array [
                      "StudioUserPool94F50620",
                      "Arn",
                    ],
                  },
                  "UserPoolClientId": Object {
                    "Ref": "StudioClient100BA227",
                  },
                  "UserPoolDomain": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "supabase-studio-",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                      ],
                    ],
                  },
                },
                "Order": 1,
                "Type": "authenticate-cognito",
              },
            ],
          },
        ],
        "LoadBalancerArn": Object {
          "Ref": "StudioLoadBalancer143227F7",
        },
        "Port": Object {
          "Fn::If": Array [
            "StudioHttpCondition14AD1D44",
            80,
            443,
          ],
        },
        "Protocol": Object {
          "Fn::If": Array [
            "StudioHttpCondition14AD1D44",
            "HTTP",
            "HTTPS",
          ],
        },
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "StudioLoadBalancerSecurityGroup73100F94": Object {
      "Properties": Object {
        "GroupDescription": "Supabase-graphql/Studio/LoadBalancerSecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow from anyone on port 80",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80,
          },
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow from anyone on port 443",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "StudioLogs5268B2C5": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "RetentionInDays": 30,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "StudioSvcCloudmapServiceD5D25A54": Object {
      "Properties": Object {
        "DnsConfig": Object {
          "DnsRecords": Array [
            Object {
              "TTL": 10,
              "Type": "SRV",
            },
            Object {
              "TTL": 10,
              "Type": "A",
            },
          ],
          "NamespaceId": Object {
            "Fn::GetAtt": Array [
              "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
              "Id",
            ],
          },
          "RoutingPolicy": "MULTIVALUE",
        },
        "HealthCheckCustomConfig": Object {
          "FailureThreshold": 1,
        },
        "Name": "studio",
        "NamespaceId": Object {
          "Fn::GetAtt": Array [
            "ClusterDefaultServiceDiscoveryNamespaceC336F9B4",
            "Id",
          ],
        },
      },
      "Type": "AWS::ServiceDiscovery::Service",
    },
    "StudioSvcSecurityGroupC3E32D42": Object {
      "Properties": Object {
        "GroupDescription": "Supabase-graphql/Studio/Svc/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "StudioSvcSecurityGroupfromSupabasegraphqlStudioLoadBalancerSecurityGroupE9B2D9DB3000D4E6C71B": Object {
      "Properties": Object {
        "Description": "Load balancer to target",
        "FromPort": 3000,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "StudioSvcSecurityGroupC3E32D42",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "StudioLoadBalancerSecurityGroup73100F94",
            "GroupId",
          ],
        },
        "ToPort": 3000,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "StudioSvcService57CD4A48": Object {
      "DependsOn": Array [
        "StudioLoadBalancerListener522B10FC",
      ],
      "Properties": Object {
        "Cluster": Object {
          "Ref": "ClusterEB0386A7",
        },
        "DeploymentConfiguration": Object {
          "DeploymentCircuitBreaker": Object {
            "Enable": true,
            "Rollback": true,
          },
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "DeploymentController": Object {
          "Type": "ECS",
        },
        "EnableECSManagedTags": true,
        "HealthCheckGracePeriodSeconds": 60,
        "LaunchType": "FARGATE",
        "LoadBalancers": Array [
          Object {
            "ContainerName": "app",
            "ContainerPort": 3000,
            "TargetGroupArn": Object {
              "Ref": "StudioTargetGroupC1E0E03D",
            },
          },
        ],
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "StudioSvcSecurityGroupC3E32D42",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Array [
              Object {
                "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
              },
              Object {
                "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
              },
            ],
          },
        },
        "PropagateTags": "SERVICE",
        "ServiceRegistries": Array [
          Object {
            "ContainerName": "app",
            "ContainerPort": 3000,
            "RegistryArn": Object {
              "Fn::GetAtt": Array [
                "StudioSvcCloudmapServiceD5D25A54",
                "Arn",
              ],
            },
          },
        ],
        "TaskDefinition": Object {
          "Ref": "StudioTaskDefinitionFEEA269A",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "StudioSvcTaskCountTarget992D589A": Object {
      "Properties": Object {
        "MaxCapacity": 20,
        "MinCapacity": 1,
        "ResourceId": Object {
          "Fn::Join": Array [
            "",
            Array [
              "service/",
              Object {
                "Ref": "ClusterEB0386A7",
              },
              "/",
              Object {
                "Fn::GetAtt": Array [
                  "StudioSvcService57CD4A48",
                  "Name",
                ],
              },
            ],
          ],
        },
        "RoleARN": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":iam::",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService",
            ],
          ],
        },
        "ScalableDimension": "ecs:service:DesiredCount",
        "ServiceNamespace": "ecs",
      },
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
    },
    "StudioSvcTaskCountTargetScaleOnCpuF08DFD58": Object {
      "Properties": Object {
        "PolicyName": "SupabasegraphqlStudioSvcTaskCountTargetScaleOnCpu7EB507FC",
        "PolicyType": "TargetTrackingScaling",
        "ScalingTargetId": Object {
          "Ref": "StudioSvcTaskCountTarget992D589A",
        },
        "TargetTrackingScalingPolicyConfiguration": Object {
          "PredefinedMetricSpecification": Object {
            "PredefinedMetricType": "ECSServiceAverageCPUUtilization",
          },
          "ScaleInCooldown": 60,
          "ScaleOutCooldown": 60,
          "TargetValue": 50,
        },
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
    },
    "StudioTargetGroupC1E0E03D": Object {
      "Properties": Object {
        "HealthCheckIntervalSeconds": 10,
        "HealthCheckTimeoutSeconds": 5,
        "Port": 3000,
        "Protocol": "HTTP",
        "TargetGroupAttributes": Array [
          Object {
            "Key": "deregistration_delay.timeout_seconds",
            "Value": "30",
          },
          Object {
            "Key": "stickiness.enabled",
            "Value": "false",
          },
        ],
        "TargetType": "ip",
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
    },
    "StudioTaskDefinitionExecutionRoleBBC69CFE": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "StudioTaskDefinitionExecutionRoleDefaultPolicy1DF00583": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "StudioLogs5268B2C5",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "DatabaseSecretAttachmentE5D1B020",
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "SupabaseJwtAnonKey90E80F90",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    Object {
                      "Ref": "SupabaseJwtServiceRoleKey94675B64",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "StudioTaskDefinitionExecutionRoleDefaultPolicy1DF00583",
        "Roles": Array [
          Object {
            "Ref": "StudioTaskDefinitionExecutionRoleBBC69CFE",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "StudioTaskDefinitionFEEA269A": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "Environment": Array [
              Object {
                "Name": "STUDIO_PG_META_URL",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "https://",
                      Object {
                        "Fn::GetAtt": Array [
                          "CDNDistributionD4FAE585",
                          "DomainName",
                        ],
                      },
                      "/pg",
                    ],
                  ],
                },
              },
              Object {
                "Name": "SUPABASE_URL",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "https://",
                      Object {
                        "Fn::GetAtt": Array [
                          "CDNDistributionD4FAE585",
                          "DomainName",
                        ],
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "SUPABASE_REST_URL",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "https://",
                      Object {
                        "Fn::GetAtt": Array [
                          "CDNDistributionD4FAE585",
                          "DomainName",
                        ],
                      },
                      "/rest/v1/",
                    ],
                  ],
                },
              },
            ],
            "Essential": true,
            "Image": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "public.ecr.aws/t3w2s2c9/studio:",
                  Object {
                    "Ref": "StudioVersionParameter",
                  },
                ],
              ],
            },
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "StudioLogs5268B2C5",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "Name": "app",
            "PortMappings": Array [
              Object {
                "ContainerPort": 3000,
                "Protocol": "tcp",
              },
            ],
            "Secrets": Array [
              Object {
                "Name": "POSTGRES_PASSWORD",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Ref": "DatabaseSecretAttachmentE5D1B020",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              Object {
                "Name": "SUPABASE_ANON_KEY",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "SupabaseJwtAnonKey90E80F90",
                      },
                    ],
                  ],
                },
              },
              Object {
                "Name": "SUPABASE_SERVICE_KEY",
                "ValueFrom": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":ssm:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":parameter",
                      Object {
                        "Ref": "SupabaseJwtServiceRoleKey94675B64",
                      },
                    ],
                  ],
                },
              },
            ],
            "Ulimits": Array [
              Object {
                "HardLimit": 65536,
                "Name": "nofile",
                "SoftLimit": 65536,
              },
            ],
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "StudioTaskDefinitionExecutionRoleBBC69CFE",
            "Arn",
          ],
        },
        "Family": "SupabasegraphqlStudioTaskDefinition19FC8F7A",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "RuntimePlatform": Object {
          "CpuArchitecture": "ARM64",
          "OperatingSystemFamily": "LINUX",
        },
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "StudioTaskDefinitionTaskRole4FE9D685",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "StudioTaskDefinitionTaskRole4FE9D685": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "StudioUserPool94F50620": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "AccountRecoverySetting": Object {
          "RecoveryMechanisms": Array [
            Object {
              "Name": "verified_phone_number",
              "Priority": 1,
            },
            Object {
              "Name": "verified_email",
              "Priority": 2,
            },
          ],
        },
        "AdminCreateUserConfig": Object {
          "AllowAdminCreateUserOnly": true,
        },
        "AutoVerifiedAttributes": Array [
          "email",
        ],
        "EmailVerificationMessage": "The verification code to your new account is {####}",
        "EmailVerificationSubject": "Verify your new account",
        "SmsVerificationMessage": "The verification code to your new account is {####}",
        "UserPoolName": "SupabaseStudio-UserPool",
        "UsernameAttributes": Array [
          "email",
        ],
        "VerificationMessageTemplate": Object {
          "DefaultEmailOption": "CONFIRM_WITH_CODE",
          "EmailMessage": "The verification code to your new account is {####}",
          "EmailSubject": "Verify your new account",
          "SmsMessage": "The verification code to your new account is {####}",
        },
      },
      "Type": "AWS::Cognito::UserPool",
      "UpdateReplacePolicy": "Delete",
    },
    "StudioUserPoolDomain83E076DB": Object {
      "Properties": Object {
        "Domain": Object {
          "Fn::Join": Array [
            "",
            Array [
              "supabase-studio-",
              Object {
                "Ref": "AWS::AccountId",
              },
            ],
          ],
        },
        "UserPoolId": Object {
          "Ref": "StudioUserPool94F50620",
        },
      },
      "Type": "AWS::Cognito::UserPoolDomain",
    },
    "SupabaseJwtAnonKey90E80F90": Object {
      "Properties": Object {
        "Description": "This key is safe to use in a browser if you have enabled Row Level Security for your tables and configured policies.",
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/",
              Object {
                "Ref": "AWS::StackName",
              },
              "/JWT/anon",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Fn::GetAtt": Array [
            "SupabaseJwtAnonRole874E82F9",
            "Token",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "SupabaseJwtAnonRole874E82F9": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "ExpiresIn": "10y",
        "Issuer": "supabase",
        "Payload": Object {
          "role": "anon",
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "SupabaseJwtProviderframeworkonEventABA31464",
            "Arn",
          ],
        },
      },
      "Type": "Custom::SupabaseApiRole",
      "UpdateReplacePolicy": "Delete",
    },
    "SupabaseJwtCreateApiRoleFunction40C9BEBC": Object {
      "DependsOn": Array [
        "SupabaseJwtCreateApiRoleFunctionServiceRoleDefaultPolicyF86CBBD8",
        "SupabaseJwtCreateApiRoleFunctionServiceRoleBB9B11C4",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "711810d3f57d7256b05963e398fa514d237d4766e38bf8be79e548f5e0bf2f53.zip",
        },
        "Description": "Supabase - Create API role & API key",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "JWT_SECRET_ARN": Object {
              "Ref": "SupabaseJwtSecretFA404A75",
            },
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "SupabaseJwtCreateApiRoleFunctionServiceRoleBB9B11C4",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "SupabaseJwtCreateApiRoleFunctionServiceRoleBB9B11C4": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SupabaseJwtCreateApiRoleFunctionServiceRoleDefaultPolicyF86CBBD8": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "SupabaseJwtSecretFA404A75",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SupabaseJwtCreateApiRoleFunctionServiceRoleDefaultPolicyF86CBBD8",
        "Roles": Array [
          Object {
            "Ref": "SupabaseJwtCreateApiRoleFunctionServiceRoleBB9B11C4",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SupabaseJwtProviderframeworkonEventABA31464": Object {
      "DependsOn": Array [
        "SupabaseJwtProviderframeworkonEventServiceRoleDefaultPolicyBFD1DEC9",
        "SupabaseJwtProviderframeworkonEventServiceRole62754416",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "e7c95e1a12d903d913ebdd526c735f1ac58b2024882a5562110221fe685ebe85.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (Supabase-graphql/SupabaseJwt/Provider)",
        "Environment": Object {
          "Variables": Object {
            "USER_ON_EVENT_FUNCTION_ARN": Object {
              "Fn::GetAtt": Array [
                "SupabaseJwtCreateApiRoleFunction40C9BEBC",
                "Arn",
              ],
            },
          },
        },
        "Handler": "framework.onEvent",
        "Role": Object {
          "Fn::GetAtt": Array [
            "SupabaseJwtProviderframeworkonEventServiceRole62754416",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "SupabaseJwtProviderframeworkonEventServiceRole62754416": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SupabaseJwtProviderframeworkonEventServiceRoleDefaultPolicyBFD1DEC9": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "SupabaseJwtCreateApiRoleFunction40C9BEBC",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "SupabaseJwtCreateApiRoleFunction40C9BEBC",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SupabaseJwtProviderframeworkonEventServiceRoleDefaultPolicyBFD1DEC9",
        "Roles": Array [
          Object {
            "Ref": "SupabaseJwtProviderframeworkonEventServiceRole62754416",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SupabaseJwtSecretFA404A75": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "Description": "Supabase - Json Web Token Secret",
        "GenerateSecretString": Object {
          "ExcludePunctuation": true,
          "PasswordLength": 64,
        },
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "SupabaseJwtServiceRole36CFC81F": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "ExpiresIn": "10y",
        "Issuer": "supabase",
        "Payload": Object {
          "role": "service_role",
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "SupabaseJwtProviderframeworkonEventABA31464",
            "Arn",
          ],
        },
      },
      "Type": "Custom::SupabaseApiRole",
      "UpdateReplacePolicy": "Delete",
    },
    "SupabaseJwtServiceRoleKey94675B64": Object {
      "Properties": Object {
        "Description": "This key has the ability to bypass Row Level Security. Never share it publicly.",
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/",
              Object {
                "Ref": "AWS::StackName",
              },
              "/JWT/service_role",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Fn::GetAtt": Array [
            "SupabaseJwtServiceRole36CFC81F",
            "Token",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "SupabaseMailAccessKeyA6348E49": Object {
      "Properties": Object {
        "UserName": Object {
          "Ref": "SupabaseMailUser6287674D",
        },
      },
      "Type": "AWS::IAM::AccessKey",
    },
    "SupabaseMailGenSmtpPasswordFunction1BD23362": Object {
      "DependsOn": Array [
        "SupabaseMailGenSmtpPasswordFunctionServiceRoleDefaultPolicyE69CB8D3",
        "SupabaseMailGenSmtpPasswordFunctionServiceRole0A78DBF3",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "bed229ed30972eb5b99c1adea2197ac5c694cd661895bb420af5f1d4054ba060.zip",
        },
        "Description": "Supabase - Generate SMTP Password Function",
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "SupabaseMailGenSmtpPasswordFunctionServiceRole0A78DBF3",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "SupabaseMailGenSmtpPasswordFunctionServiceRole0A78DBF3": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SupabaseMailGenSmtpPasswordFunctionServiceRoleDefaultPolicyE69CB8D3": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "secretsmanager:PutSecretValue",
                "secretsmanager:UpdateSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "SupabaseMailSecret777E0288",
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "SupabaseMailSecret777E0288",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SupabaseMailGenSmtpPasswordFunctionServiceRoleDefaultPolicyE69CB8D3",
        "Roles": Array [
          Object {
            "Ref": "SupabaseMailGenSmtpPasswordFunctionServiceRole0A78DBF3",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SupabaseMailGenSmtpPasswordProviderframeworkonEvent3038CFFF": Object {
      "DependsOn": Array [
        "SupabaseMailGenSmtpPasswordProviderframeworkonEventServiceRoleDefaultPolicy28275DA1",
        "SupabaseMailGenSmtpPasswordProviderframeworkonEventServiceRole4F5FF7D5",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "e7c95e1a12d903d913ebdd526c735f1ac58b2024882a5562110221fe685ebe85.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (Supabase-graphql/SupabaseMail/GenSmtpPasswordProvider)",
        "Environment": Object {
          "Variables": Object {
            "USER_ON_EVENT_FUNCTION_ARN": Object {
              "Fn::GetAtt": Array [
                "SupabaseMailGenSmtpPasswordFunction1BD23362",
                "Arn",
              ],
            },
          },
        },
        "Handler": "framework.onEvent",
        "Role": Object {
          "Fn::GetAtt": Array [
            "SupabaseMailGenSmtpPasswordProviderframeworkonEventServiceRole4F5FF7D5",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "SupabaseMailGenSmtpPasswordProviderframeworkonEventServiceRole4F5FF7D5": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SupabaseMailGenSmtpPasswordProviderframeworkonEventServiceRoleDefaultPolicy28275DA1": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "SupabaseMailGenSmtpPasswordFunction1BD23362",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "SupabaseMailGenSmtpPasswordFunction1BD23362",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SupabaseMailGenSmtpPasswordProviderframeworkonEventServiceRoleDefaultPolicy28275DA1",
        "Roles": Array [
          Object {
            "Ref": "SupabaseMailGenSmtpPasswordProviderframeworkonEventServiceRole4F5FF7D5",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SupabaseMailPolicy575C9DA2": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "ses:SendRawEmail",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SendEmailPolicy",
        "Users": Array [
          Object {
            "Ref": "SupabaseMailUser6287674D",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SupabaseMailSecret777E0288": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "Description": "Supabase - SES SMTP Secret",
        "SecretString": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{\\"access_key\\":\\"",
              Object {
                "Ref": "SupabaseMailAccessKeyA6348E49",
              },
              "\\",\\"secret_access_key\\":\\"",
              Object {
                "Fn::GetAtt": Array [
                  "SupabaseMailAccessKeyA6348E49",
                  "SecretAccessKey",
                ],
              },
              "\\"}",
            ],
          ],
        },
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "SupabaseMailSmtpPassword3227537A": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "Region": Object {
          "Ref": "SesRegionParameter",
        },
        "SecretId": Object {
          "Ref": "SupabaseMailSecret777E0288",
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "SupabaseMailGenSmtpPasswordProviderframeworkonEvent3038CFFF",
            "Arn",
          ],
        },
      },
      "Type": "Custom::SmtpPassword",
      "UpdateReplacePolicy": "Delete",
    },
    "SupabaseMailUser6287674D": Object {
      "Type": "AWS::IAM::User",
    },
    "SupabasegraphqlDatabaseSecret4D5D66886b2eb8af71bef5c6813259b78dc271d3": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "Description": Object {
          "Fn::Join": Array [
            "",
            Array [
              "Generated by the CDK for stack: ",
              Object {
                "Ref": "AWS::StackName",
              },
            ],
          ],
        },
        "GenerateSecretString": Object {
          "ExcludeCharacters": "%+~\`#$&*()|[]{}:;<>?!'/@\\"\\\\=^",
          "GenerateStringKey": "password",
          "PasswordLength": 30,
          "SecretStringTemplate": "{\\"username\\":\\"supabase_admin\\"}",
        },
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "TwitterClientId11873110": Object {
      "Properties": Object {
        "Description": "The OAuth2 Client ID registered with the external provider.",
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/",
              Object {
                "Ref": "AWS::StackName",
              },
              "/Auth/External/Twitter/ClientId",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Ref": "TwitterClientIdParameterE2950332",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "TwitterSecretA36121D0": Object {
      "Properties": Object {
        "Description": "The OAuth2 Client Secret provided by the external provider when you registered.",
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/",
              Object {
                "Ref": "AWS::StackName",
              },
              "/Auth/External/Twitter/Secret",
            ],
          ],
        },
        "Type": "String",
        "Value": Object {
          "Ref": "TwitterSecretParameter548D162D",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "VPCB9E5F0B4": Object {
      "Properties": Object {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Supabase-graphql/VPC",
          },
        ],
      },
      "Type": "AWS::EC2::VPC",
    },
    "VPCIGWB7E252D3": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Supabase-graphql/VPC",
          },
        ],
      },
      "Type": "AWS::EC2::InternetGateway",
    },
    "VPCPrivateSubnet1DefaultRouteAE1D6490": Object {
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": Object {
          "Ref": "VPCPublicSubnet1NATGatewayE0556630",
        },
        "RouteTableId": Object {
          "Ref": "VPCPrivateSubnet1RouteTableBE8A6027",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VPCPrivateSubnet1RouteTableAssociation347902D1": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VPCPrivateSubnet1RouteTableBE8A6027",
        },
        "SubnetId": Object {
          "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VPCPrivateSubnet1RouteTableBE8A6027": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Supabase-graphql/VPC/PrivateSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VPCPrivateSubnet1Subnet8BCA10E0": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            0,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.128.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          Object {
            "Key": "Name",
            "Value": "Supabase-graphql/VPC/PrivateSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VPCPrivateSubnet2DefaultRouteF4F5CFD2": Object {
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": Object {
          "Ref": "VPCPublicSubnet1NATGatewayE0556630",
        },
        "RouteTableId": Object {
          "Ref": "VPCPrivateSubnet2RouteTable0A19E10E",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VPCPrivateSubnet2RouteTable0A19E10E": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Supabase-graphql/VPC/PrivateSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VPCPrivateSubnet2RouteTableAssociation0C73D413": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VPCPrivateSubnet2RouteTable0A19E10E",
        },
        "SubnetId": Object {
          "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VPCPrivateSubnet2SubnetCFCDAA7A": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            1,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.192.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          Object {
            "Key": "Name",
            "Value": "Supabase-graphql/VPC/PrivateSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VPCPublicSubnet1DefaultRoute91CEF279": Object {
      "DependsOn": Array [
        "VPCVPCGW99B986DC",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "VPCIGWB7E252D3",
        },
        "RouteTableId": Object {
          "Ref": "VPCPublicSubnet1RouteTableFEE4B781",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VPCPublicSubnet1EIP6AD938E8": Object {
      "Properties": Object {
        "Domain": "vpc",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Supabase-graphql/VPC/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::EIP",
    },
    "VPCPublicSubnet1NATGatewayE0556630": Object {
      "Properties": Object {
        "AllocationId": Object {
          "Fn::GetAtt": Array [
            "VPCPublicSubnet1EIP6AD938E8",
            "AllocationId",
          ],
        },
        "SubnetId": Object {
          "Ref": "VPCPublicSubnet1SubnetB4246D30",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Supabase-graphql/VPC/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::NatGateway",
    },
    "VPCPublicSubnet1RouteTableAssociation0B0896DC": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VPCPublicSubnet1RouteTableFEE4B781",
        },
        "SubnetId": Object {
          "Ref": "VPCPublicSubnet1SubnetB4246D30",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VPCPublicSubnet1RouteTableFEE4B781": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Supabase-graphql/VPC/PublicSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VPCPublicSubnet1SubnetB4246D30": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            0,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.0.0/18",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "Supabase-graphql/VPC/PublicSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VPCPublicSubnet2DefaultRouteB7481BBA": Object {
      "DependsOn": Array [
        "VPCVPCGW99B986DC",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "VPCIGWB7E252D3",
        },
        "RouteTableId": Object {
          "Ref": "VPCPublicSubnet2RouteTable6F1A15F1",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VPCPublicSubnet2RouteTable6F1A15F1": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Supabase-graphql/VPC/PublicSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VPCPublicSubnet2RouteTableAssociation5A808732": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VPCPublicSubnet2RouteTable6F1A15F1",
        },
        "SubnetId": Object {
          "Ref": "VPCPublicSubnet2Subnet74179F39",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VPCPublicSubnet2Subnet74179F39": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            1,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.64.0/18",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "Supabase-graphql/VPC/PublicSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VPCVPCGW99B986DC": Object {
      "Properties": Object {
        "InternetGatewayId": Object {
          "Ref": "VPCIGWB7E252D3",
        },
        "VpcId": Object {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::VPCGatewayAttachment",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
  "Transform": "AWS::SecretsManager-2020-07-23",
}
`;
